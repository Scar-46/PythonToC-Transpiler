Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    WHITESPACE

Grammar

Rule 0     S' -> file
Rule 1     file -> statements ENDMARKER
Rule 2     file -> ENDMARKER
Rule 3     statements -> statements statement
Rule 4     statements -> statement
Rule 5     statement -> compound_stmt
Rule 6     statement -> simple_stmts
Rule 7     simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE
Rule 8     simple_stmts -> simple_stmt NEWLINE
Rule 9     simple_stmt -> assignment
Rule 10    simple_stmt -> expressions
Rule 11    simple_stmt -> return_stmt
Rule 12    simple_stmt -> PASS
Rule 13    simple_stmt -> del_stmt
Rule 14    simple_stmt -> BREAK
Rule 15    simple_stmt -> CONTINUE
Rule 16    simple_stmt -> global_stmt
Rule 17    compound_stmt -> function_def
Rule 18    compound_stmt -> if_stmt
Rule 19    compound_stmt -> class_def
Rule 20    compound_stmt -> for_stmt
Rule 21    compound_stmt -> while_stmt
Rule 22    assignment -> IDENTIFIER augmentation_assignment expressions
Rule 23    augmentation_assignment -> ASSIGNMENT
Rule 24    augmentation_assignment -> ADDITION_ASSIGNMENT
Rule 25    augmentation_assignment -> SUBTRACTION_ASSIGNMENT
Rule 26    augmentation_assignment -> MULTIPLICATION_ASSIGNMENT
Rule 27    augmentation_assignment -> DIVISION_ASSIGNMENT
Rule 28    augmentation_assignment -> MODULO_ASSIGNMENT
Rule 29    augmentation_assignment -> EXPONENTIATION_ASSIGNMENT
Rule 30    augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT
Rule 31    return_stmt -> RETURN expressions
Rule 32    global_stmt -> GLOBAL namelist
Rule 33    del_stmt -> DEL namelist
Rule 34    namelist -> namelist COMMA IDENTIFIER
Rule 35    namelist -> IDENTIFIER
Rule 36    block -> NEWLINE INDENT statements DEDENT
Rule 37    block -> simple_stmts
Rule 38    class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
Rule 39    class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
Rule 40    class_def -> CLASS IDENTIFIER COLON block
Rule 41    function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
Rule 42    function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
Rule 43    parameters -> parameters COMMA IDENTIFIER
Rule 44    parameters -> IDENTIFIER
Rule 45    if_stmt -> IF expression COLON block elif_stmt
Rule 46    if_stmt -> IF expression COLON block else_block
Rule 47    if_stmt -> IF expression COLON block
Rule 48    elif_stmt -> ELIF expression COLON block elif_stmt
Rule 49    elif_stmt -> ELIF expression COLON block else_block
Rule 50    elif_stmt -> ELIF expression COLON block
Rule 51    else_block -> ELSE COLON block
Rule 52    while_stmt -> WHILE expression COLON block else_block
Rule 53    while_stmt -> WHILE expression COLON block
Rule 54    for_stmt -> FOR targets IN expressions COLON else_block
Rule 55    for_stmt -> FOR targets IN expressions COLON block
Rule 56    expressions -> expressions COMMA expression
Rule 57    expressions -> expression
Rule 58    expression -> disjunction IF disjunction ELSE expression
Rule 59    expression -> disjunction
Rule 60    disjunction -> conjunction OR disjunction
Rule 61    disjunction -> conjunction
Rule 62    conjunction -> inversion AND inversion
Rule 63    conjunction -> inversion
Rule 64    inversion -> NOT inversion
Rule 65    inversion -> comparison
Rule 66    comparison -> bitwise_or compare_op_list
Rule 67    comparison -> bitwise_or
Rule 68    compare_op_list -> compare_op_list compare_op
Rule 69    compare_op_list -> compare_op
Rule 70    compare_op -> EQUALITY bitwise_or
Rule 71    compare_op -> INEQUALITY bitwise_or
Rule 72    compare_op -> GREATER_EQUAL bitwise_or
Rule 73    compare_op -> LESSER_EQUAL bitwise_or
Rule 74    compare_op -> GREATER bitwise_or
Rule 75    compare_op -> LESSER bitwise_or
Rule 76    compare_op -> NOT IN bitwise_or
Rule 77    compare_op -> IS NOT bitwise_or
Rule 78    compare_op -> IN bitwise_or
Rule 79    compare_op -> IS bitwise_or
Rule 80    bitwise_or -> bitwise_or PIPE bitwise_xor
Rule 81    bitwise_or -> bitwise_xor
Rule 82    bitwise_xor -> bitwise_xor CARET bitwise_and
Rule 83    bitwise_xor -> bitwise_and
Rule 84    bitwise_and -> bitwise_and AMPERSAND shift_expr
Rule 85    bitwise_and -> shift_expr
Rule 86    shift_expr -> shift_expr L_SHIFT sum
Rule 87    shift_expr -> shift_expr R_SHIFT sum
Rule 88    shift_expr -> sum
Rule 89    sum -> sum PLUS term
Rule 90    sum -> sum MINUS term
Rule 91    sum -> term
Rule 92    term -> term STAR factor
Rule 93    term -> term SLASH factor
Rule 94    term -> term DOUBLE_SLASH factor
Rule 95    term -> term PERCENT factor
Rule 96    term -> factor
Rule 97    factor -> PLUS factor
Rule 98    factor -> MINUS factor
Rule 99    factor -> power
Rule 100   power -> primary DOUBLE_STAR factor
Rule 101   power -> primary
Rule 102   primary -> primary L_PARENTHESIS arguments R_PARENTHESIS
Rule 103   primary -> primary L_PARENTHESIS R_PARENTHESIS
Rule 104   primary -> primary L_SQB slices R_SQB
Rule 105   primary -> primary DOT IDENTIFIER
Rule 106   primary -> atomic
Rule 107   slices -> slices COMMA slice
Rule 108   slices -> slice
Rule 109   slice -> expression COLON expression COLON expression
Rule 110   slice -> expression COLON expression
Rule 111   slice -> expression COLON
Rule 112   slice -> COLON expression
Rule 113   slice -> COLON COLON
Rule 114   slice -> COLON
Rule 115   slice -> expression
Rule 116   atomic -> IDENTIFIER
Rule 117   atomic -> TRUE
Rule 118   atomic -> FALSE
Rule 119   atomic -> NONE
Rule 120   atomic -> strings
Rule 121   atomic -> number
Rule 122   atomic -> tuple
Rule 123   atomic -> list
Rule 124   atomic -> dict
Rule 125   atomic -> set
Rule 126   number -> NUMBER
Rule 127   number -> F_NUMBER
Rule 128   number -> BIN_NUMBER
Rule 129   number -> HEX_NUMBER
Rule 130   number -> OCT_NUMBER
Rule 131   arguments -> expressions
Rule 132   strings -> STRING
Rule 133   strings -> TRIPLE_STRING
Rule 134   list -> L_SQB expressions R_SQB
Rule 135   list -> L_SQB R_SQB
Rule 136   tuple -> L_PARENTHESIS expressions R_PARENTHESIS
Rule 137   tuple -> L_PARENTHESIS R_PARENTHESIS
Rule 138   set -> L_CB expressions R_CB
Rule 139   dict -> L_CB kvpairs R_CB
Rule 140   dict -> L_CB R_CB
Rule 141   kvpairs -> kvpairs COMMA kvpair
Rule 142   kvpairs -> kvpair
Rule 143   kvpair -> expression COLON expression
Rule 144   targets -> targets COMMA target
Rule 145   targets -> target
Rule 146   target -> empty
Rule 147   empty -> <empty>

Terminals, with rules where they appear

ADDITION_ASSIGNMENT  : 24
AMPERSAND            : 84
AND                  : 62
AS                   : 
ASSIGNMENT           : 23
BIN_NUMBER           : 128
BREAK                : 14
CARET                : 82
CLASS                : 38 39 40
COLON                : 38 39 40 41 42 45 46 47 48 49 50 51 52 53 54 55 109 109 110 111 112 113 113 114 143
COMMA                : 34 43 56 107 141 144
CONTINUE             : 15
DEDENT               : 36
DEF                  : 41 42
DEL                  : 33
DIVISION_ASSIGNMENT  : 27
DOT                  : 105
DOUBLE_SLASH         : 94
DOUBLE_STAR          : 100
ELIF                 : 48 49 50
ELSE                 : 51 58
ENDMARKER            : 1 2
EQUALITY             : 70
EXPONENTIATION_ASSIGNMENT : 29
FALSE                : 118
FLOOR_DIVISION_ASSIGNMENT : 30
FOR                  : 54 55
F_NUMBER             : 127
GLOBAL               : 32
GREATER              : 74
GREATER_EQUAL        : 72
HEX_NUMBER           : 129
IDENTIFIER           : 22 34 35 38 39 40 41 42 43 44 105 116
IF                   : 45 46 47 58
IN                   : 54 55 76 78
INDENT               : 36
INEQUALITY           : 71
IS                   : 77 79
LESSER               : 75
LESSER_EQUAL         : 73
L_CB                 : 138 139 140
L_PARENTHESIS        : 38 39 41 42 102 103 136 137
L_SHIFT              : 86
L_SQB                : 104 134 135
MINUS                : 90 98
MODULO_ASSIGNMENT    : 28
MULTIPLICATION_ASSIGNMENT : 26
NEWLINE              : 7 8 36
NONE                 : 119
NOT                  : 64 76 77
NUMBER               : 126
OCT_NUMBER           : 130
OR                   : 60
PASS                 : 12
PERCENT              : 95
PIPE                 : 80
PLUS                 : 89 97
RETURN               : 31
R_CB                 : 138 139 140
R_PARENTHESIS        : 38 39 41 42 102 103 136 137
R_SHIFT              : 87
R_SQB                : 104 134 135
SEMICOLON            : 7
SLASH                : 93
STAR                 : 92
STRING               : 132
SUBTRACTION_ASSIGNMENT : 25
TRIPLE_STRING        : 133
TRUE                 : 117
WHILE                : 52 53
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

arguments            : 38 102
assignment           : 9
atomic               : 106
augmentation_assignment : 22
bitwise_and          : 82 83 84
bitwise_or           : 66 67 70 71 72 73 74 75 76 77 78 79 80
bitwise_xor          : 80 81 82
block                : 38 39 40 41 42 45 46 47 48 49 50 51 52 53 55
class_def            : 19
compare_op           : 68 69
compare_op_list      : 66 68
comparison           : 65
compound_stmt        : 5
conjunction          : 60 61
del_stmt             : 13
dict                 : 124
disjunction          : 58 58 59 60
elif_stmt            : 45 48
else_block           : 46 49 52 54
empty                : 146
expression           : 45 46 47 48 49 50 52 53 56 57 58 109 109 109 110 110 111 112 115 143 143
expressions          : 10 22 31 54 55 56 131 134 136 138
factor               : 92 93 94 95 96 97 98 100
file                 : 0
for_stmt             : 20
function_def         : 17
global_stmt          : 16
if_stmt              : 18
inversion            : 62 62 63 64
kvpair               : 141 142
kvpairs              : 139 141
list                 : 123
namelist             : 32 33 34
number               : 121
parameters           : 41 43
power                : 99
primary              : 100 101 102 103 104 105
return_stmt          : 11
set                  : 125
shift_expr           : 84 85 86 87
simple_stmt          : 7 8
simple_stmts         : 6 7 37
slice                : 107 108
slices               : 104 107
statement            : 3 4
statements           : 1 3 36
strings              : 120
sum                  : 86 87 88 89 90
target               : 144 145
targets              : 54 55 144
term                 : 89 90 91 92 93 94 95
tuple                : 122
while_stmt           : 21

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . statements ENDMARKER
    (2) file -> . ENDMARKER
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . compound_stmt
    (6) statement -> . simple_stmts
    (17) compound_stmt -> . function_def
    (18) compound_stmt -> . if_stmt
    (19) compound_stmt -> . class_def
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (41) function_def -> . DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (42) function_def -> . DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (45) if_stmt -> . IF expression COLON block elif_stmt
    (46) if_stmt -> . IF expression COLON block else_block
    (47) if_stmt -> . IF expression COLON block
    (38) class_def -> . CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (39) class_def -> . CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (40) class_def -> . CLASS IDENTIFIER COLON block
    (54) for_stmt -> . FOR targets IN expressions COLON else_block
    (55) for_stmt -> . FOR targets IN expressions COLON block
    (52) while_stmt -> . WHILE expression COLON block else_block
    (53) while_stmt -> . WHILE expression COLON block
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    ENDMARKER       shift and go to state 3
    DEF             shift and go to state 13
    IF              shift and go to state 16
    CLASS           shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 21
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    file                           shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 4
    compound_stmt                  shift and go to state 5
    simple_stmts                   shift and go to state 6
    function_def                   shift and go to state 7
    if_stmt                        shift and go to state 8
    class_def                      shift and go to state 9
    for_stmt                       shift and go to state 10
    while_stmt                     shift and go to state 11
    simple_stmt                    shift and go to state 12
    expression                     shift and go to state 17
    expressions                    shift and go to state 20
    assignment                     shift and go to state 22
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 1

    (0) S' -> file .



state 2

    (1) file -> statements . ENDMARKER
    (3) statements -> statements . statement
    (5) statement -> . compound_stmt
    (6) statement -> . simple_stmts
    (17) compound_stmt -> . function_def
    (18) compound_stmt -> . if_stmt
    (19) compound_stmt -> . class_def
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (41) function_def -> . DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (42) function_def -> . DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (45) if_stmt -> . IF expression COLON block elif_stmt
    (46) if_stmt -> . IF expression COLON block else_block
    (47) if_stmt -> . IF expression COLON block
    (38) class_def -> . CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (39) class_def -> . CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (40) class_def -> . CLASS IDENTIFIER COLON block
    (54) for_stmt -> . FOR targets IN expressions COLON else_block
    (55) for_stmt -> . FOR targets IN expressions COLON block
    (52) while_stmt -> . WHILE expression COLON block else_block
    (53) while_stmt -> . WHILE expression COLON block
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    ENDMARKER       shift and go to state 67
    DEF             shift and go to state 13
    IF              shift and go to state 16
    CLASS           shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 21
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    statement                      shift and go to state 68
    compound_stmt                  shift and go to state 5
    simple_stmts                   shift and go to state 6
    function_def                   shift and go to state 7
    if_stmt                        shift and go to state 8
    class_def                      shift and go to state 9
    for_stmt                       shift and go to state 10
    while_stmt                     shift and go to state 11
    simple_stmt                    shift and go to state 12
    expression                     shift and go to state 17
    expressions                    shift and go to state 20
    assignment                     shift and go to state 22
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 3

    (2) file -> ENDMARKER .

    $end            reduce using rule 2 (file -> ENDMARKER .)


state 4

    (4) statements -> statement .

    ENDMARKER       reduce using rule 4 (statements -> statement .)
    DEF             reduce using rule 4 (statements -> statement .)
    IF              reduce using rule 4 (statements -> statement .)
    CLASS           reduce using rule 4 (statements -> statement .)
    FOR             reduce using rule 4 (statements -> statement .)
    WHILE           reduce using rule 4 (statements -> statement .)
    PASS            reduce using rule 4 (statements -> statement .)
    BREAK           reduce using rule 4 (statements -> statement .)
    CONTINUE        reduce using rule 4 (statements -> statement .)
    IDENTIFIER      reduce using rule 4 (statements -> statement .)
    RETURN          reduce using rule 4 (statements -> statement .)
    DEL             reduce using rule 4 (statements -> statement .)
    GLOBAL          reduce using rule 4 (statements -> statement .)
    NOT             reduce using rule 4 (statements -> statement .)
    PLUS            reduce using rule 4 (statements -> statement .)
    MINUS           reduce using rule 4 (statements -> statement .)
    TRUE            reduce using rule 4 (statements -> statement .)
    FALSE           reduce using rule 4 (statements -> statement .)
    NONE            reduce using rule 4 (statements -> statement .)
    STRING          reduce using rule 4 (statements -> statement .)
    TRIPLE_STRING   reduce using rule 4 (statements -> statement .)
    NUMBER          reduce using rule 4 (statements -> statement .)
    F_NUMBER        reduce using rule 4 (statements -> statement .)
    BIN_NUMBER      reduce using rule 4 (statements -> statement .)
    HEX_NUMBER      reduce using rule 4 (statements -> statement .)
    OCT_NUMBER      reduce using rule 4 (statements -> statement .)
    L_PARENTHESIS   reduce using rule 4 (statements -> statement .)
    L_SQB           reduce using rule 4 (statements -> statement .)
    L_CB            reduce using rule 4 (statements -> statement .)
    DEDENT          reduce using rule 4 (statements -> statement .)


state 5

    (5) statement -> compound_stmt .

    ENDMARKER       reduce using rule 5 (statement -> compound_stmt .)
    DEF             reduce using rule 5 (statement -> compound_stmt .)
    IF              reduce using rule 5 (statement -> compound_stmt .)
    CLASS           reduce using rule 5 (statement -> compound_stmt .)
    FOR             reduce using rule 5 (statement -> compound_stmt .)
    WHILE           reduce using rule 5 (statement -> compound_stmt .)
    PASS            reduce using rule 5 (statement -> compound_stmt .)
    BREAK           reduce using rule 5 (statement -> compound_stmt .)
    CONTINUE        reduce using rule 5 (statement -> compound_stmt .)
    IDENTIFIER      reduce using rule 5 (statement -> compound_stmt .)
    RETURN          reduce using rule 5 (statement -> compound_stmt .)
    DEL             reduce using rule 5 (statement -> compound_stmt .)
    GLOBAL          reduce using rule 5 (statement -> compound_stmt .)
    NOT             reduce using rule 5 (statement -> compound_stmt .)
    PLUS            reduce using rule 5 (statement -> compound_stmt .)
    MINUS           reduce using rule 5 (statement -> compound_stmt .)
    TRUE            reduce using rule 5 (statement -> compound_stmt .)
    FALSE           reduce using rule 5 (statement -> compound_stmt .)
    NONE            reduce using rule 5 (statement -> compound_stmt .)
    STRING          reduce using rule 5 (statement -> compound_stmt .)
    TRIPLE_STRING   reduce using rule 5 (statement -> compound_stmt .)
    NUMBER          reduce using rule 5 (statement -> compound_stmt .)
    F_NUMBER        reduce using rule 5 (statement -> compound_stmt .)
    BIN_NUMBER      reduce using rule 5 (statement -> compound_stmt .)
    HEX_NUMBER      reduce using rule 5 (statement -> compound_stmt .)
    OCT_NUMBER      reduce using rule 5 (statement -> compound_stmt .)
    L_PARENTHESIS   reduce using rule 5 (statement -> compound_stmt .)
    L_SQB           reduce using rule 5 (statement -> compound_stmt .)
    L_CB            reduce using rule 5 (statement -> compound_stmt .)
    DEDENT          reduce using rule 5 (statement -> compound_stmt .)


state 6

    (6) statement -> simple_stmts .
    (7) simple_stmts -> simple_stmts . SEMICOLON simple_stmt NEWLINE

    ENDMARKER       reduce using rule 6 (statement -> simple_stmts .)
    DEF             reduce using rule 6 (statement -> simple_stmts .)
    IF              reduce using rule 6 (statement -> simple_stmts .)
    CLASS           reduce using rule 6 (statement -> simple_stmts .)
    FOR             reduce using rule 6 (statement -> simple_stmts .)
    WHILE           reduce using rule 6 (statement -> simple_stmts .)
    PASS            reduce using rule 6 (statement -> simple_stmts .)
    BREAK           reduce using rule 6 (statement -> simple_stmts .)
    CONTINUE        reduce using rule 6 (statement -> simple_stmts .)
    IDENTIFIER      reduce using rule 6 (statement -> simple_stmts .)
    RETURN          reduce using rule 6 (statement -> simple_stmts .)
    DEL             reduce using rule 6 (statement -> simple_stmts .)
    GLOBAL          reduce using rule 6 (statement -> simple_stmts .)
    NOT             reduce using rule 6 (statement -> simple_stmts .)
    PLUS            reduce using rule 6 (statement -> simple_stmts .)
    MINUS           reduce using rule 6 (statement -> simple_stmts .)
    TRUE            reduce using rule 6 (statement -> simple_stmts .)
    FALSE           reduce using rule 6 (statement -> simple_stmts .)
    NONE            reduce using rule 6 (statement -> simple_stmts .)
    STRING          reduce using rule 6 (statement -> simple_stmts .)
    TRIPLE_STRING   reduce using rule 6 (statement -> simple_stmts .)
    NUMBER          reduce using rule 6 (statement -> simple_stmts .)
    F_NUMBER        reduce using rule 6 (statement -> simple_stmts .)
    BIN_NUMBER      reduce using rule 6 (statement -> simple_stmts .)
    HEX_NUMBER      reduce using rule 6 (statement -> simple_stmts .)
    OCT_NUMBER      reduce using rule 6 (statement -> simple_stmts .)
    L_PARENTHESIS   reduce using rule 6 (statement -> simple_stmts .)
    L_SQB           reduce using rule 6 (statement -> simple_stmts .)
    L_CB            reduce using rule 6 (statement -> simple_stmts .)
    DEDENT          reduce using rule 6 (statement -> simple_stmts .)
    SEMICOLON       shift and go to state 69


state 7

    (17) compound_stmt -> function_def .

    ENDMARKER       reduce using rule 17 (compound_stmt -> function_def .)
    DEF             reduce using rule 17 (compound_stmt -> function_def .)
    IF              reduce using rule 17 (compound_stmt -> function_def .)
    CLASS           reduce using rule 17 (compound_stmt -> function_def .)
    FOR             reduce using rule 17 (compound_stmt -> function_def .)
    WHILE           reduce using rule 17 (compound_stmt -> function_def .)
    PASS            reduce using rule 17 (compound_stmt -> function_def .)
    BREAK           reduce using rule 17 (compound_stmt -> function_def .)
    CONTINUE        reduce using rule 17 (compound_stmt -> function_def .)
    IDENTIFIER      reduce using rule 17 (compound_stmt -> function_def .)
    RETURN          reduce using rule 17 (compound_stmt -> function_def .)
    DEL             reduce using rule 17 (compound_stmt -> function_def .)
    GLOBAL          reduce using rule 17 (compound_stmt -> function_def .)
    NOT             reduce using rule 17 (compound_stmt -> function_def .)
    PLUS            reduce using rule 17 (compound_stmt -> function_def .)
    MINUS           reduce using rule 17 (compound_stmt -> function_def .)
    TRUE            reduce using rule 17 (compound_stmt -> function_def .)
    FALSE           reduce using rule 17 (compound_stmt -> function_def .)
    NONE            reduce using rule 17 (compound_stmt -> function_def .)
    STRING          reduce using rule 17 (compound_stmt -> function_def .)
    TRIPLE_STRING   reduce using rule 17 (compound_stmt -> function_def .)
    NUMBER          reduce using rule 17 (compound_stmt -> function_def .)
    F_NUMBER        reduce using rule 17 (compound_stmt -> function_def .)
    BIN_NUMBER      reduce using rule 17 (compound_stmt -> function_def .)
    HEX_NUMBER      reduce using rule 17 (compound_stmt -> function_def .)
    OCT_NUMBER      reduce using rule 17 (compound_stmt -> function_def .)
    L_PARENTHESIS   reduce using rule 17 (compound_stmt -> function_def .)
    L_SQB           reduce using rule 17 (compound_stmt -> function_def .)
    L_CB            reduce using rule 17 (compound_stmt -> function_def .)
    DEDENT          reduce using rule 17 (compound_stmt -> function_def .)


state 8

    (18) compound_stmt -> if_stmt .

    ENDMARKER       reduce using rule 18 (compound_stmt -> if_stmt .)
    DEF             reduce using rule 18 (compound_stmt -> if_stmt .)
    IF              reduce using rule 18 (compound_stmt -> if_stmt .)
    CLASS           reduce using rule 18 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 18 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 18 (compound_stmt -> if_stmt .)
    PASS            reduce using rule 18 (compound_stmt -> if_stmt .)
    BREAK           reduce using rule 18 (compound_stmt -> if_stmt .)
    CONTINUE        reduce using rule 18 (compound_stmt -> if_stmt .)
    IDENTIFIER      reduce using rule 18 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 18 (compound_stmt -> if_stmt .)
    DEL             reduce using rule 18 (compound_stmt -> if_stmt .)
    GLOBAL          reduce using rule 18 (compound_stmt -> if_stmt .)
    NOT             reduce using rule 18 (compound_stmt -> if_stmt .)
    PLUS            reduce using rule 18 (compound_stmt -> if_stmt .)
    MINUS           reduce using rule 18 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 18 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 18 (compound_stmt -> if_stmt .)
    NONE            reduce using rule 18 (compound_stmt -> if_stmt .)
    STRING          reduce using rule 18 (compound_stmt -> if_stmt .)
    TRIPLE_STRING   reduce using rule 18 (compound_stmt -> if_stmt .)
    NUMBER          reduce using rule 18 (compound_stmt -> if_stmt .)
    F_NUMBER        reduce using rule 18 (compound_stmt -> if_stmt .)
    BIN_NUMBER      reduce using rule 18 (compound_stmt -> if_stmt .)
    HEX_NUMBER      reduce using rule 18 (compound_stmt -> if_stmt .)
    OCT_NUMBER      reduce using rule 18 (compound_stmt -> if_stmt .)
    L_PARENTHESIS   reduce using rule 18 (compound_stmt -> if_stmt .)
    L_SQB           reduce using rule 18 (compound_stmt -> if_stmt .)
    L_CB            reduce using rule 18 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 18 (compound_stmt -> if_stmt .)


state 9

    (19) compound_stmt -> class_def .

    ENDMARKER       reduce using rule 19 (compound_stmt -> class_def .)
    DEF             reduce using rule 19 (compound_stmt -> class_def .)
    IF              reduce using rule 19 (compound_stmt -> class_def .)
    CLASS           reduce using rule 19 (compound_stmt -> class_def .)
    FOR             reduce using rule 19 (compound_stmt -> class_def .)
    WHILE           reduce using rule 19 (compound_stmt -> class_def .)
    PASS            reduce using rule 19 (compound_stmt -> class_def .)
    BREAK           reduce using rule 19 (compound_stmt -> class_def .)
    CONTINUE        reduce using rule 19 (compound_stmt -> class_def .)
    IDENTIFIER      reduce using rule 19 (compound_stmt -> class_def .)
    RETURN          reduce using rule 19 (compound_stmt -> class_def .)
    DEL             reduce using rule 19 (compound_stmt -> class_def .)
    GLOBAL          reduce using rule 19 (compound_stmt -> class_def .)
    NOT             reduce using rule 19 (compound_stmt -> class_def .)
    PLUS            reduce using rule 19 (compound_stmt -> class_def .)
    MINUS           reduce using rule 19 (compound_stmt -> class_def .)
    TRUE            reduce using rule 19 (compound_stmt -> class_def .)
    FALSE           reduce using rule 19 (compound_stmt -> class_def .)
    NONE            reduce using rule 19 (compound_stmt -> class_def .)
    STRING          reduce using rule 19 (compound_stmt -> class_def .)
    TRIPLE_STRING   reduce using rule 19 (compound_stmt -> class_def .)
    NUMBER          reduce using rule 19 (compound_stmt -> class_def .)
    F_NUMBER        reduce using rule 19 (compound_stmt -> class_def .)
    BIN_NUMBER      reduce using rule 19 (compound_stmt -> class_def .)
    HEX_NUMBER      reduce using rule 19 (compound_stmt -> class_def .)
    OCT_NUMBER      reduce using rule 19 (compound_stmt -> class_def .)
    L_PARENTHESIS   reduce using rule 19 (compound_stmt -> class_def .)
    L_SQB           reduce using rule 19 (compound_stmt -> class_def .)
    L_CB            reduce using rule 19 (compound_stmt -> class_def .)
    DEDENT          reduce using rule 19 (compound_stmt -> class_def .)


state 10

    (20) compound_stmt -> for_stmt .

    ENDMARKER       reduce using rule 20 (compound_stmt -> for_stmt .)
    DEF             reduce using rule 20 (compound_stmt -> for_stmt .)
    IF              reduce using rule 20 (compound_stmt -> for_stmt .)
    CLASS           reduce using rule 20 (compound_stmt -> for_stmt .)
    FOR             reduce using rule 20 (compound_stmt -> for_stmt .)
    WHILE           reduce using rule 20 (compound_stmt -> for_stmt .)
    PASS            reduce using rule 20 (compound_stmt -> for_stmt .)
    BREAK           reduce using rule 20 (compound_stmt -> for_stmt .)
    CONTINUE        reduce using rule 20 (compound_stmt -> for_stmt .)
    IDENTIFIER      reduce using rule 20 (compound_stmt -> for_stmt .)
    RETURN          reduce using rule 20 (compound_stmt -> for_stmt .)
    DEL             reduce using rule 20 (compound_stmt -> for_stmt .)
    GLOBAL          reduce using rule 20 (compound_stmt -> for_stmt .)
    NOT             reduce using rule 20 (compound_stmt -> for_stmt .)
    PLUS            reduce using rule 20 (compound_stmt -> for_stmt .)
    MINUS           reduce using rule 20 (compound_stmt -> for_stmt .)
    TRUE            reduce using rule 20 (compound_stmt -> for_stmt .)
    FALSE           reduce using rule 20 (compound_stmt -> for_stmt .)
    NONE            reduce using rule 20 (compound_stmt -> for_stmt .)
    STRING          reduce using rule 20 (compound_stmt -> for_stmt .)
    TRIPLE_STRING   reduce using rule 20 (compound_stmt -> for_stmt .)
    NUMBER          reduce using rule 20 (compound_stmt -> for_stmt .)
    F_NUMBER        reduce using rule 20 (compound_stmt -> for_stmt .)
    BIN_NUMBER      reduce using rule 20 (compound_stmt -> for_stmt .)
    HEX_NUMBER      reduce using rule 20 (compound_stmt -> for_stmt .)
    OCT_NUMBER      reduce using rule 20 (compound_stmt -> for_stmt .)
    L_PARENTHESIS   reduce using rule 20 (compound_stmt -> for_stmt .)
    L_SQB           reduce using rule 20 (compound_stmt -> for_stmt .)
    L_CB            reduce using rule 20 (compound_stmt -> for_stmt .)
    DEDENT          reduce using rule 20 (compound_stmt -> for_stmt .)


state 11

    (21) compound_stmt -> while_stmt .

    ENDMARKER       reduce using rule 21 (compound_stmt -> while_stmt .)
    DEF             reduce using rule 21 (compound_stmt -> while_stmt .)
    IF              reduce using rule 21 (compound_stmt -> while_stmt .)
    CLASS           reduce using rule 21 (compound_stmt -> while_stmt .)
    FOR             reduce using rule 21 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 21 (compound_stmt -> while_stmt .)
    PASS            reduce using rule 21 (compound_stmt -> while_stmt .)
    BREAK           reduce using rule 21 (compound_stmt -> while_stmt .)
    CONTINUE        reduce using rule 21 (compound_stmt -> while_stmt .)
    IDENTIFIER      reduce using rule 21 (compound_stmt -> while_stmt .)
    RETURN          reduce using rule 21 (compound_stmt -> while_stmt .)
    DEL             reduce using rule 21 (compound_stmt -> while_stmt .)
    GLOBAL          reduce using rule 21 (compound_stmt -> while_stmt .)
    NOT             reduce using rule 21 (compound_stmt -> while_stmt .)
    PLUS            reduce using rule 21 (compound_stmt -> while_stmt .)
    MINUS           reduce using rule 21 (compound_stmt -> while_stmt .)
    TRUE            reduce using rule 21 (compound_stmt -> while_stmt .)
    FALSE           reduce using rule 21 (compound_stmt -> while_stmt .)
    NONE            reduce using rule 21 (compound_stmt -> while_stmt .)
    STRING          reduce using rule 21 (compound_stmt -> while_stmt .)
    TRIPLE_STRING   reduce using rule 21 (compound_stmt -> while_stmt .)
    NUMBER          reduce using rule 21 (compound_stmt -> while_stmt .)
    F_NUMBER        reduce using rule 21 (compound_stmt -> while_stmt .)
    BIN_NUMBER      reduce using rule 21 (compound_stmt -> while_stmt .)
    HEX_NUMBER      reduce using rule 21 (compound_stmt -> while_stmt .)
    OCT_NUMBER      reduce using rule 21 (compound_stmt -> while_stmt .)
    L_PARENTHESIS   reduce using rule 21 (compound_stmt -> while_stmt .)
    L_SQB           reduce using rule 21 (compound_stmt -> while_stmt .)
    L_CB            reduce using rule 21 (compound_stmt -> while_stmt .)
    DEDENT          reduce using rule 21 (compound_stmt -> while_stmt .)


state 12

    (8) simple_stmts -> simple_stmt . NEWLINE

    NEWLINE         shift and go to state 70


state 13

    (41) function_def -> DEF . IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (42) function_def -> DEF . IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block

    IDENTIFIER      shift and go to state 71


state 14

    (22) assignment -> IDENTIFIER . augmentation_assignment expressions
    (116) atomic -> IDENTIFIER .
    (23) augmentation_assignment -> . ASSIGNMENT
    (24) augmentation_assignment -> . ADDITION_ASSIGNMENT
    (25) augmentation_assignment -> . SUBTRACTION_ASSIGNMENT
    (26) augmentation_assignment -> . MULTIPLICATION_ASSIGNMENT
    (27) augmentation_assignment -> . DIVISION_ASSIGNMENT
    (28) augmentation_assignment -> . MODULO_ASSIGNMENT
    (29) augmentation_assignment -> . EXPONENTIATION_ASSIGNMENT
    (30) augmentation_assignment -> . FLOOR_DIVISION_ASSIGNMENT

    DOUBLE_STAR     reduce using rule 116 (atomic -> IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 116 (atomic -> IDENTIFIER .)
    L_SQB           reduce using rule 116 (atomic -> IDENTIFIER .)
    DOT             reduce using rule 116 (atomic -> IDENTIFIER .)
    STAR            reduce using rule 116 (atomic -> IDENTIFIER .)
    SLASH           reduce using rule 116 (atomic -> IDENTIFIER .)
    DOUBLE_SLASH    reduce using rule 116 (atomic -> IDENTIFIER .)
    PERCENT         reduce using rule 116 (atomic -> IDENTIFIER .)
    PLUS            reduce using rule 116 (atomic -> IDENTIFIER .)
    MINUS           reduce using rule 116 (atomic -> IDENTIFIER .)
    L_SHIFT         reduce using rule 116 (atomic -> IDENTIFIER .)
    R_SHIFT         reduce using rule 116 (atomic -> IDENTIFIER .)
    AMPERSAND       reduce using rule 116 (atomic -> IDENTIFIER .)
    CARET           reduce using rule 116 (atomic -> IDENTIFIER .)
    PIPE            reduce using rule 116 (atomic -> IDENTIFIER .)
    EQUALITY        reduce using rule 116 (atomic -> IDENTIFIER .)
    INEQUALITY      reduce using rule 116 (atomic -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 116 (atomic -> IDENTIFIER .)
    LESSER_EQUAL    reduce using rule 116 (atomic -> IDENTIFIER .)
    GREATER         reduce using rule 116 (atomic -> IDENTIFIER .)
    LESSER          reduce using rule 116 (atomic -> IDENTIFIER .)
    NOT             reduce using rule 116 (atomic -> IDENTIFIER .)
    IS              reduce using rule 116 (atomic -> IDENTIFIER .)
    IN              reduce using rule 116 (atomic -> IDENTIFIER .)
    AND             reduce using rule 116 (atomic -> IDENTIFIER .)
    OR              reduce using rule 116 (atomic -> IDENTIFIER .)
    IF              reduce using rule 116 (atomic -> IDENTIFIER .)
    COMMA           reduce using rule 116 (atomic -> IDENTIFIER .)
    NEWLINE         reduce using rule 116 (atomic -> IDENTIFIER .)
    ASSIGNMENT      shift and go to state 73
    ADDITION_ASSIGNMENT shift and go to state 74
    SUBTRACTION_ASSIGNMENT shift and go to state 75
    MULTIPLICATION_ASSIGNMENT shift and go to state 76
    DIVISION_ASSIGNMENT shift and go to state 77
    MODULO_ASSIGNMENT shift and go to state 78
    EXPONENTIATION_ASSIGNMENT shift and go to state 79
    FLOOR_DIVISION_ASSIGNMENT shift and go to state 80

    augmentation_assignment        shift and go to state 72

state 15

    (136) tuple -> L_PARENTHESIS . expressions R_PARENTHESIS
    (137) tuple -> L_PARENTHESIS . R_PARENTHESIS
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    R_PARENTHESIS   shift and go to state 82
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expressions                    shift and go to state 81
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 16

    (45) if_stmt -> IF . expression COLON block elif_stmt
    (46) if_stmt -> IF . expression COLON block else_block
    (47) if_stmt -> IF . expression COLON block
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 84
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 17

    (57) expressions -> expression .

    COMMA           reduce using rule 57 (expressions -> expression .)
    NEWLINE         reduce using rule 57 (expressions -> expression .)
    R_PARENTHESIS   reduce using rule 57 (expressions -> expression .)
    R_SQB           reduce using rule 57 (expressions -> expression .)
    COLON           reduce using rule 57 (expressions -> expression .)


state 18

    (38) class_def -> CLASS . IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (39) class_def -> CLASS . IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (40) class_def -> CLASS . IDENTIFIER COLON block

    IDENTIFIER      shift and go to state 85


state 19

    (54) for_stmt -> FOR . targets IN expressions COLON else_block
    (55) for_stmt -> FOR . targets IN expressions COLON block
    (144) targets -> . targets COMMA target
    (145) targets -> . target
    (146) target -> . empty
    (147) empty -> .

    IN              reduce using rule 147 (empty -> .)
    COMMA           reduce using rule 147 (empty -> .)

    targets                        shift and go to state 86
    target                         shift and go to state 87
    empty                          shift and go to state 88

state 20

    (10) simple_stmt -> expressions .
    (56) expressions -> expressions . COMMA expression

    NEWLINE         reduce using rule 10 (simple_stmt -> expressions .)
    COMMA           shift and go to state 89


state 21

    (52) while_stmt -> WHILE . expression COLON block else_block
    (53) while_stmt -> WHILE . expression COLON block
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 90
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 22

    (9) simple_stmt -> assignment .

    NEWLINE         reduce using rule 9 (simple_stmt -> assignment .)


state 23

    (11) simple_stmt -> return_stmt .

    NEWLINE         reduce using rule 11 (simple_stmt -> return_stmt .)


state 24

    (12) simple_stmt -> PASS .

    NEWLINE         reduce using rule 12 (simple_stmt -> PASS .)


state 25

    (13) simple_stmt -> del_stmt .

    NEWLINE         reduce using rule 13 (simple_stmt -> del_stmt .)


state 26

    (14) simple_stmt -> BREAK .

    NEWLINE         reduce using rule 14 (simple_stmt -> BREAK .)


state 27

    (15) simple_stmt -> CONTINUE .

    NEWLINE         reduce using rule 15 (simple_stmt -> CONTINUE .)


state 28

    (16) simple_stmt -> global_stmt .

    NEWLINE         reduce using rule 16 (simple_stmt -> global_stmt .)


state 29

    (31) return_stmt -> RETURN . expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expressions                    shift and go to state 91
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 30

    (33) del_stmt -> DEL . namelist
    (34) namelist -> . namelist COMMA IDENTIFIER
    (35) namelist -> . IDENTIFIER

    IDENTIFIER      shift and go to state 93

    namelist                       shift and go to state 92

state 31

    (32) global_stmt -> GLOBAL . namelist
    (34) namelist -> . namelist COMMA IDENTIFIER
    (35) namelist -> . IDENTIFIER

    IDENTIFIER      shift and go to state 93

    namelist                       shift and go to state 94

state 32

    (58) expression -> disjunction . IF disjunction ELSE expression
    (59) expression -> disjunction .

    IF              shift and go to state 95
    COMMA           reduce using rule 59 (expression -> disjunction .)
    NEWLINE         reduce using rule 59 (expression -> disjunction .)
    R_PARENTHESIS   reduce using rule 59 (expression -> disjunction .)
    COLON           reduce using rule 59 (expression -> disjunction .)
    R_SQB           reduce using rule 59 (expression -> disjunction .)
    R_CB            reduce using rule 59 (expression -> disjunction .)


state 33

    (60) disjunction -> conjunction . OR disjunction
    (61) disjunction -> conjunction .

    OR              shift and go to state 96
    IF              reduce using rule 61 (disjunction -> conjunction .)
    COMMA           reduce using rule 61 (disjunction -> conjunction .)
    NEWLINE         reduce using rule 61 (disjunction -> conjunction .)
    R_PARENTHESIS   reduce using rule 61 (disjunction -> conjunction .)
    COLON           reduce using rule 61 (disjunction -> conjunction .)
    R_SQB           reduce using rule 61 (disjunction -> conjunction .)
    R_CB            reduce using rule 61 (disjunction -> conjunction .)
    ELSE            reduce using rule 61 (disjunction -> conjunction .)


state 34

    (62) conjunction -> inversion . AND inversion
    (63) conjunction -> inversion .

    AND             shift and go to state 97
    OR              reduce using rule 63 (conjunction -> inversion .)
    IF              reduce using rule 63 (conjunction -> inversion .)
    COMMA           reduce using rule 63 (conjunction -> inversion .)
    NEWLINE         reduce using rule 63 (conjunction -> inversion .)
    R_PARENTHESIS   reduce using rule 63 (conjunction -> inversion .)
    COLON           reduce using rule 63 (conjunction -> inversion .)
    R_SQB           reduce using rule 63 (conjunction -> inversion .)
    R_CB            reduce using rule 63 (conjunction -> inversion .)
    ELSE            reduce using rule 63 (conjunction -> inversion .)


state 35

    (64) inversion -> NOT . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    inversion                      shift and go to state 98
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 36

    (65) inversion -> comparison .

    AND             reduce using rule 65 (inversion -> comparison .)
    OR              reduce using rule 65 (inversion -> comparison .)
    IF              reduce using rule 65 (inversion -> comparison .)
    COMMA           reduce using rule 65 (inversion -> comparison .)
    NEWLINE         reduce using rule 65 (inversion -> comparison .)
    R_PARENTHESIS   reduce using rule 65 (inversion -> comparison .)
    COLON           reduce using rule 65 (inversion -> comparison .)
    R_SQB           reduce using rule 65 (inversion -> comparison .)
    R_CB            reduce using rule 65 (inversion -> comparison .)
    ELSE            reduce using rule 65 (inversion -> comparison .)


state 37

    (66) comparison -> bitwise_or . compare_op_list
    (67) comparison -> bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor
    (68) compare_op_list -> . compare_op_list compare_op
    (69) compare_op_list -> . compare_op
    (70) compare_op -> . EQUALITY bitwise_or
    (71) compare_op -> . INEQUALITY bitwise_or
    (72) compare_op -> . GREATER_EQUAL bitwise_or
    (73) compare_op -> . LESSER_EQUAL bitwise_or
    (74) compare_op -> . GREATER bitwise_or
    (75) compare_op -> . LESSER bitwise_or
    (76) compare_op -> . NOT IN bitwise_or
    (77) compare_op -> . IS NOT bitwise_or
    (78) compare_op -> . IN bitwise_or
    (79) compare_op -> . IS bitwise_or

    AND             reduce using rule 67 (comparison -> bitwise_or .)
    OR              reduce using rule 67 (comparison -> bitwise_or .)
    IF              reduce using rule 67 (comparison -> bitwise_or .)
    COMMA           reduce using rule 67 (comparison -> bitwise_or .)
    NEWLINE         reduce using rule 67 (comparison -> bitwise_or .)
    R_PARENTHESIS   reduce using rule 67 (comparison -> bitwise_or .)
    COLON           reduce using rule 67 (comparison -> bitwise_or .)
    R_SQB           reduce using rule 67 (comparison -> bitwise_or .)
    R_CB            reduce using rule 67 (comparison -> bitwise_or .)
    ELSE            reduce using rule 67 (comparison -> bitwise_or .)
    PIPE            shift and go to state 100
    EQUALITY        shift and go to state 102
    INEQUALITY      shift and go to state 103
    GREATER_EQUAL   shift and go to state 104
    LESSER_EQUAL    shift and go to state 105
    GREATER         shift and go to state 106
    LESSER          shift and go to state 107
    NOT             shift and go to state 108
    IS              shift and go to state 110
    IN              shift and go to state 109

    compare_op_list                shift and go to state 99
    compare_op                     shift and go to state 101

state 38

    (81) bitwise_or -> bitwise_xor .
    (82) bitwise_xor -> bitwise_xor . CARET bitwise_and

    PIPE            reduce using rule 81 (bitwise_or -> bitwise_xor .)
    EQUALITY        reduce using rule 81 (bitwise_or -> bitwise_xor .)
    INEQUALITY      reduce using rule 81 (bitwise_or -> bitwise_xor .)
    GREATER_EQUAL   reduce using rule 81 (bitwise_or -> bitwise_xor .)
    LESSER_EQUAL    reduce using rule 81 (bitwise_or -> bitwise_xor .)
    GREATER         reduce using rule 81 (bitwise_or -> bitwise_xor .)
    LESSER          reduce using rule 81 (bitwise_or -> bitwise_xor .)
    NOT             reduce using rule 81 (bitwise_or -> bitwise_xor .)
    IS              reduce using rule 81 (bitwise_or -> bitwise_xor .)
    IN              reduce using rule 81 (bitwise_or -> bitwise_xor .)
    AND             reduce using rule 81 (bitwise_or -> bitwise_xor .)
    OR              reduce using rule 81 (bitwise_or -> bitwise_xor .)
    IF              reduce using rule 81 (bitwise_or -> bitwise_xor .)
    COMMA           reduce using rule 81 (bitwise_or -> bitwise_xor .)
    NEWLINE         reduce using rule 81 (bitwise_or -> bitwise_xor .)
    R_PARENTHESIS   reduce using rule 81 (bitwise_or -> bitwise_xor .)
    COLON           reduce using rule 81 (bitwise_or -> bitwise_xor .)
    R_SQB           reduce using rule 81 (bitwise_or -> bitwise_xor .)
    R_CB            reduce using rule 81 (bitwise_or -> bitwise_xor .)
    ELSE            reduce using rule 81 (bitwise_or -> bitwise_xor .)
    CARET           shift and go to state 111


state 39

    (83) bitwise_xor -> bitwise_and .
    (84) bitwise_and -> bitwise_and . AMPERSAND shift_expr

    CARET           reduce using rule 83 (bitwise_xor -> bitwise_and .)
    PIPE            reduce using rule 83 (bitwise_xor -> bitwise_and .)
    EQUALITY        reduce using rule 83 (bitwise_xor -> bitwise_and .)
    INEQUALITY      reduce using rule 83 (bitwise_xor -> bitwise_and .)
    GREATER_EQUAL   reduce using rule 83 (bitwise_xor -> bitwise_and .)
    LESSER_EQUAL    reduce using rule 83 (bitwise_xor -> bitwise_and .)
    GREATER         reduce using rule 83 (bitwise_xor -> bitwise_and .)
    LESSER          reduce using rule 83 (bitwise_xor -> bitwise_and .)
    NOT             reduce using rule 83 (bitwise_xor -> bitwise_and .)
    IS              reduce using rule 83 (bitwise_xor -> bitwise_and .)
    IN              reduce using rule 83 (bitwise_xor -> bitwise_and .)
    AND             reduce using rule 83 (bitwise_xor -> bitwise_and .)
    OR              reduce using rule 83 (bitwise_xor -> bitwise_and .)
    IF              reduce using rule 83 (bitwise_xor -> bitwise_and .)
    COMMA           reduce using rule 83 (bitwise_xor -> bitwise_and .)
    NEWLINE         reduce using rule 83 (bitwise_xor -> bitwise_and .)
    R_PARENTHESIS   reduce using rule 83 (bitwise_xor -> bitwise_and .)
    COLON           reduce using rule 83 (bitwise_xor -> bitwise_and .)
    R_SQB           reduce using rule 83 (bitwise_xor -> bitwise_and .)
    R_CB            reduce using rule 83 (bitwise_xor -> bitwise_and .)
    ELSE            reduce using rule 83 (bitwise_xor -> bitwise_and .)
    AMPERSAND       shift and go to state 112


state 40

    (85) bitwise_and -> shift_expr .
    (86) shift_expr -> shift_expr . L_SHIFT sum
    (87) shift_expr -> shift_expr . R_SHIFT sum

    AMPERSAND       reduce using rule 85 (bitwise_and -> shift_expr .)
    CARET           reduce using rule 85 (bitwise_and -> shift_expr .)
    PIPE            reduce using rule 85 (bitwise_and -> shift_expr .)
    EQUALITY        reduce using rule 85 (bitwise_and -> shift_expr .)
    INEQUALITY      reduce using rule 85 (bitwise_and -> shift_expr .)
    GREATER_EQUAL   reduce using rule 85 (bitwise_and -> shift_expr .)
    LESSER_EQUAL    reduce using rule 85 (bitwise_and -> shift_expr .)
    GREATER         reduce using rule 85 (bitwise_and -> shift_expr .)
    LESSER          reduce using rule 85 (bitwise_and -> shift_expr .)
    NOT             reduce using rule 85 (bitwise_and -> shift_expr .)
    IS              reduce using rule 85 (bitwise_and -> shift_expr .)
    IN              reduce using rule 85 (bitwise_and -> shift_expr .)
    AND             reduce using rule 85 (bitwise_and -> shift_expr .)
    OR              reduce using rule 85 (bitwise_and -> shift_expr .)
    IF              reduce using rule 85 (bitwise_and -> shift_expr .)
    COMMA           reduce using rule 85 (bitwise_and -> shift_expr .)
    NEWLINE         reduce using rule 85 (bitwise_and -> shift_expr .)
    R_PARENTHESIS   reduce using rule 85 (bitwise_and -> shift_expr .)
    COLON           reduce using rule 85 (bitwise_and -> shift_expr .)
    R_SQB           reduce using rule 85 (bitwise_and -> shift_expr .)
    R_CB            reduce using rule 85 (bitwise_and -> shift_expr .)
    ELSE            reduce using rule 85 (bitwise_and -> shift_expr .)
    L_SHIFT         shift and go to state 113
    R_SHIFT         shift and go to state 114


state 41

    (88) shift_expr -> sum .
    (89) sum -> sum . PLUS term
    (90) sum -> sum . MINUS term

    L_SHIFT         reduce using rule 88 (shift_expr -> sum .)
    R_SHIFT         reduce using rule 88 (shift_expr -> sum .)
    AMPERSAND       reduce using rule 88 (shift_expr -> sum .)
    CARET           reduce using rule 88 (shift_expr -> sum .)
    PIPE            reduce using rule 88 (shift_expr -> sum .)
    EQUALITY        reduce using rule 88 (shift_expr -> sum .)
    INEQUALITY      reduce using rule 88 (shift_expr -> sum .)
    GREATER_EQUAL   reduce using rule 88 (shift_expr -> sum .)
    LESSER_EQUAL    reduce using rule 88 (shift_expr -> sum .)
    GREATER         reduce using rule 88 (shift_expr -> sum .)
    LESSER          reduce using rule 88 (shift_expr -> sum .)
    NOT             reduce using rule 88 (shift_expr -> sum .)
    IS              reduce using rule 88 (shift_expr -> sum .)
    IN              reduce using rule 88 (shift_expr -> sum .)
    AND             reduce using rule 88 (shift_expr -> sum .)
    OR              reduce using rule 88 (shift_expr -> sum .)
    IF              reduce using rule 88 (shift_expr -> sum .)
    COMMA           reduce using rule 88 (shift_expr -> sum .)
    NEWLINE         reduce using rule 88 (shift_expr -> sum .)
    R_PARENTHESIS   reduce using rule 88 (shift_expr -> sum .)
    COLON           reduce using rule 88 (shift_expr -> sum .)
    R_SQB           reduce using rule 88 (shift_expr -> sum .)
    R_CB            reduce using rule 88 (shift_expr -> sum .)
    ELSE            reduce using rule 88 (shift_expr -> sum .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116


state 42

    (97) factor -> PLUS . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    factor                         shift and go to state 117
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 43

    (91) sum -> term .
    (92) term -> term . STAR factor
    (93) term -> term . SLASH factor
    (94) term -> term . DOUBLE_SLASH factor
    (95) term -> term . PERCENT factor

    PLUS            reduce using rule 91 (sum -> term .)
    MINUS           reduce using rule 91 (sum -> term .)
    L_SHIFT         reduce using rule 91 (sum -> term .)
    R_SHIFT         reduce using rule 91 (sum -> term .)
    AMPERSAND       reduce using rule 91 (sum -> term .)
    CARET           reduce using rule 91 (sum -> term .)
    PIPE            reduce using rule 91 (sum -> term .)
    EQUALITY        reduce using rule 91 (sum -> term .)
    INEQUALITY      reduce using rule 91 (sum -> term .)
    GREATER_EQUAL   reduce using rule 91 (sum -> term .)
    LESSER_EQUAL    reduce using rule 91 (sum -> term .)
    GREATER         reduce using rule 91 (sum -> term .)
    LESSER          reduce using rule 91 (sum -> term .)
    NOT             reduce using rule 91 (sum -> term .)
    IS              reduce using rule 91 (sum -> term .)
    IN              reduce using rule 91 (sum -> term .)
    AND             reduce using rule 91 (sum -> term .)
    OR              reduce using rule 91 (sum -> term .)
    IF              reduce using rule 91 (sum -> term .)
    COMMA           reduce using rule 91 (sum -> term .)
    NEWLINE         reduce using rule 91 (sum -> term .)
    R_PARENTHESIS   reduce using rule 91 (sum -> term .)
    COLON           reduce using rule 91 (sum -> term .)
    R_SQB           reduce using rule 91 (sum -> term .)
    R_CB            reduce using rule 91 (sum -> term .)
    ELSE            reduce using rule 91 (sum -> term .)
    STAR            shift and go to state 118
    SLASH           shift and go to state 119
    DOUBLE_SLASH    shift and go to state 120
    PERCENT         shift and go to state 121


state 44

    (98) factor -> MINUS . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    factor                         shift and go to state 122
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 45

    (96) term -> factor .

    STAR            reduce using rule 96 (term -> factor .)
    SLASH           reduce using rule 96 (term -> factor .)
    DOUBLE_SLASH    reduce using rule 96 (term -> factor .)
    PERCENT         reduce using rule 96 (term -> factor .)
    PLUS            reduce using rule 96 (term -> factor .)
    MINUS           reduce using rule 96 (term -> factor .)
    L_SHIFT         reduce using rule 96 (term -> factor .)
    R_SHIFT         reduce using rule 96 (term -> factor .)
    AMPERSAND       reduce using rule 96 (term -> factor .)
    CARET           reduce using rule 96 (term -> factor .)
    PIPE            reduce using rule 96 (term -> factor .)
    EQUALITY        reduce using rule 96 (term -> factor .)
    INEQUALITY      reduce using rule 96 (term -> factor .)
    GREATER_EQUAL   reduce using rule 96 (term -> factor .)
    LESSER_EQUAL    reduce using rule 96 (term -> factor .)
    GREATER         reduce using rule 96 (term -> factor .)
    LESSER          reduce using rule 96 (term -> factor .)
    NOT             reduce using rule 96 (term -> factor .)
    IS              reduce using rule 96 (term -> factor .)
    IN              reduce using rule 96 (term -> factor .)
    AND             reduce using rule 96 (term -> factor .)
    OR              reduce using rule 96 (term -> factor .)
    IF              reduce using rule 96 (term -> factor .)
    COMMA           reduce using rule 96 (term -> factor .)
    NEWLINE         reduce using rule 96 (term -> factor .)
    R_PARENTHESIS   reduce using rule 96 (term -> factor .)
    COLON           reduce using rule 96 (term -> factor .)
    R_SQB           reduce using rule 96 (term -> factor .)
    R_CB            reduce using rule 96 (term -> factor .)
    ELSE            reduce using rule 96 (term -> factor .)


state 46

    (99) factor -> power .

    STAR            reduce using rule 99 (factor -> power .)
    SLASH           reduce using rule 99 (factor -> power .)
    DOUBLE_SLASH    reduce using rule 99 (factor -> power .)
    PERCENT         reduce using rule 99 (factor -> power .)
    PLUS            reduce using rule 99 (factor -> power .)
    MINUS           reduce using rule 99 (factor -> power .)
    L_SHIFT         reduce using rule 99 (factor -> power .)
    R_SHIFT         reduce using rule 99 (factor -> power .)
    AMPERSAND       reduce using rule 99 (factor -> power .)
    CARET           reduce using rule 99 (factor -> power .)
    PIPE            reduce using rule 99 (factor -> power .)
    EQUALITY        reduce using rule 99 (factor -> power .)
    INEQUALITY      reduce using rule 99 (factor -> power .)
    GREATER_EQUAL   reduce using rule 99 (factor -> power .)
    LESSER_EQUAL    reduce using rule 99 (factor -> power .)
    GREATER         reduce using rule 99 (factor -> power .)
    LESSER          reduce using rule 99 (factor -> power .)
    NOT             reduce using rule 99 (factor -> power .)
    IS              reduce using rule 99 (factor -> power .)
    IN              reduce using rule 99 (factor -> power .)
    AND             reduce using rule 99 (factor -> power .)
    OR              reduce using rule 99 (factor -> power .)
    IF              reduce using rule 99 (factor -> power .)
    COMMA           reduce using rule 99 (factor -> power .)
    NEWLINE         reduce using rule 99 (factor -> power .)
    R_PARENTHESIS   reduce using rule 99 (factor -> power .)
    COLON           reduce using rule 99 (factor -> power .)
    R_SQB           reduce using rule 99 (factor -> power .)
    R_CB            reduce using rule 99 (factor -> power .)
    ELSE            reduce using rule 99 (factor -> power .)


state 47

    (100) power -> primary . DOUBLE_STAR factor
    (101) power -> primary .
    (102) primary -> primary . L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> primary . L_PARENTHESIS R_PARENTHESIS
    (104) primary -> primary . L_SQB slices R_SQB
    (105) primary -> primary . DOT IDENTIFIER

    DOUBLE_STAR     shift and go to state 123
    STAR            reduce using rule 101 (power -> primary .)
    SLASH           reduce using rule 101 (power -> primary .)
    DOUBLE_SLASH    reduce using rule 101 (power -> primary .)
    PERCENT         reduce using rule 101 (power -> primary .)
    PLUS            reduce using rule 101 (power -> primary .)
    MINUS           reduce using rule 101 (power -> primary .)
    L_SHIFT         reduce using rule 101 (power -> primary .)
    R_SHIFT         reduce using rule 101 (power -> primary .)
    AMPERSAND       reduce using rule 101 (power -> primary .)
    CARET           reduce using rule 101 (power -> primary .)
    PIPE            reduce using rule 101 (power -> primary .)
    EQUALITY        reduce using rule 101 (power -> primary .)
    INEQUALITY      reduce using rule 101 (power -> primary .)
    GREATER_EQUAL   reduce using rule 101 (power -> primary .)
    LESSER_EQUAL    reduce using rule 101 (power -> primary .)
    GREATER         reduce using rule 101 (power -> primary .)
    LESSER          reduce using rule 101 (power -> primary .)
    NOT             reduce using rule 101 (power -> primary .)
    IS              reduce using rule 101 (power -> primary .)
    IN              reduce using rule 101 (power -> primary .)
    AND             reduce using rule 101 (power -> primary .)
    OR              reduce using rule 101 (power -> primary .)
    IF              reduce using rule 101 (power -> primary .)
    COMMA           reduce using rule 101 (power -> primary .)
    NEWLINE         reduce using rule 101 (power -> primary .)
    R_PARENTHESIS   reduce using rule 101 (power -> primary .)
    COLON           reduce using rule 101 (power -> primary .)
    R_SQB           reduce using rule 101 (power -> primary .)
    R_CB            reduce using rule 101 (power -> primary .)
    ELSE            reduce using rule 101 (power -> primary .)
    L_PARENTHESIS   shift and go to state 124
    L_SQB           shift and go to state 125
    DOT             shift and go to state 126


state 48

    (134) list -> L_SQB . expressions R_SQB
    (135) list -> L_SQB . R_SQB
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    R_SQB           shift and go to state 128
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expressions                    shift and go to state 127
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 49

    (106) primary -> atomic .

    DOUBLE_STAR     reduce using rule 106 (primary -> atomic .)
    L_PARENTHESIS   reduce using rule 106 (primary -> atomic .)
    L_SQB           reduce using rule 106 (primary -> atomic .)
    DOT             reduce using rule 106 (primary -> atomic .)
    STAR            reduce using rule 106 (primary -> atomic .)
    SLASH           reduce using rule 106 (primary -> atomic .)
    DOUBLE_SLASH    reduce using rule 106 (primary -> atomic .)
    PERCENT         reduce using rule 106 (primary -> atomic .)
    PLUS            reduce using rule 106 (primary -> atomic .)
    MINUS           reduce using rule 106 (primary -> atomic .)
    L_SHIFT         reduce using rule 106 (primary -> atomic .)
    R_SHIFT         reduce using rule 106 (primary -> atomic .)
    AMPERSAND       reduce using rule 106 (primary -> atomic .)
    CARET           reduce using rule 106 (primary -> atomic .)
    PIPE            reduce using rule 106 (primary -> atomic .)
    EQUALITY        reduce using rule 106 (primary -> atomic .)
    INEQUALITY      reduce using rule 106 (primary -> atomic .)
    GREATER_EQUAL   reduce using rule 106 (primary -> atomic .)
    LESSER_EQUAL    reduce using rule 106 (primary -> atomic .)
    GREATER         reduce using rule 106 (primary -> atomic .)
    LESSER          reduce using rule 106 (primary -> atomic .)
    NOT             reduce using rule 106 (primary -> atomic .)
    IS              reduce using rule 106 (primary -> atomic .)
    IN              reduce using rule 106 (primary -> atomic .)
    AND             reduce using rule 106 (primary -> atomic .)
    OR              reduce using rule 106 (primary -> atomic .)
    IF              reduce using rule 106 (primary -> atomic .)
    COMMA           reduce using rule 106 (primary -> atomic .)
    NEWLINE         reduce using rule 106 (primary -> atomic .)
    R_PARENTHESIS   reduce using rule 106 (primary -> atomic .)
    COLON           reduce using rule 106 (primary -> atomic .)
    R_SQB           reduce using rule 106 (primary -> atomic .)
    R_CB            reduce using rule 106 (primary -> atomic .)
    ELSE            reduce using rule 106 (primary -> atomic .)


state 50

    (117) atomic -> TRUE .

    DOUBLE_STAR     reduce using rule 117 (atomic -> TRUE .)
    L_PARENTHESIS   reduce using rule 117 (atomic -> TRUE .)
    L_SQB           reduce using rule 117 (atomic -> TRUE .)
    DOT             reduce using rule 117 (atomic -> TRUE .)
    STAR            reduce using rule 117 (atomic -> TRUE .)
    SLASH           reduce using rule 117 (atomic -> TRUE .)
    DOUBLE_SLASH    reduce using rule 117 (atomic -> TRUE .)
    PERCENT         reduce using rule 117 (atomic -> TRUE .)
    PLUS            reduce using rule 117 (atomic -> TRUE .)
    MINUS           reduce using rule 117 (atomic -> TRUE .)
    L_SHIFT         reduce using rule 117 (atomic -> TRUE .)
    R_SHIFT         reduce using rule 117 (atomic -> TRUE .)
    AMPERSAND       reduce using rule 117 (atomic -> TRUE .)
    CARET           reduce using rule 117 (atomic -> TRUE .)
    PIPE            reduce using rule 117 (atomic -> TRUE .)
    EQUALITY        reduce using rule 117 (atomic -> TRUE .)
    INEQUALITY      reduce using rule 117 (atomic -> TRUE .)
    GREATER_EQUAL   reduce using rule 117 (atomic -> TRUE .)
    LESSER_EQUAL    reduce using rule 117 (atomic -> TRUE .)
    GREATER         reduce using rule 117 (atomic -> TRUE .)
    LESSER          reduce using rule 117 (atomic -> TRUE .)
    NOT             reduce using rule 117 (atomic -> TRUE .)
    IS              reduce using rule 117 (atomic -> TRUE .)
    IN              reduce using rule 117 (atomic -> TRUE .)
    AND             reduce using rule 117 (atomic -> TRUE .)
    OR              reduce using rule 117 (atomic -> TRUE .)
    IF              reduce using rule 117 (atomic -> TRUE .)
    COMMA           reduce using rule 117 (atomic -> TRUE .)
    NEWLINE         reduce using rule 117 (atomic -> TRUE .)
    R_PARENTHESIS   reduce using rule 117 (atomic -> TRUE .)
    COLON           reduce using rule 117 (atomic -> TRUE .)
    R_SQB           reduce using rule 117 (atomic -> TRUE .)
    R_CB            reduce using rule 117 (atomic -> TRUE .)
    ELSE            reduce using rule 117 (atomic -> TRUE .)


state 51

    (118) atomic -> FALSE .

    DOUBLE_STAR     reduce using rule 118 (atomic -> FALSE .)
    L_PARENTHESIS   reduce using rule 118 (atomic -> FALSE .)
    L_SQB           reduce using rule 118 (atomic -> FALSE .)
    DOT             reduce using rule 118 (atomic -> FALSE .)
    STAR            reduce using rule 118 (atomic -> FALSE .)
    SLASH           reduce using rule 118 (atomic -> FALSE .)
    DOUBLE_SLASH    reduce using rule 118 (atomic -> FALSE .)
    PERCENT         reduce using rule 118 (atomic -> FALSE .)
    PLUS            reduce using rule 118 (atomic -> FALSE .)
    MINUS           reduce using rule 118 (atomic -> FALSE .)
    L_SHIFT         reduce using rule 118 (atomic -> FALSE .)
    R_SHIFT         reduce using rule 118 (atomic -> FALSE .)
    AMPERSAND       reduce using rule 118 (atomic -> FALSE .)
    CARET           reduce using rule 118 (atomic -> FALSE .)
    PIPE            reduce using rule 118 (atomic -> FALSE .)
    EQUALITY        reduce using rule 118 (atomic -> FALSE .)
    INEQUALITY      reduce using rule 118 (atomic -> FALSE .)
    GREATER_EQUAL   reduce using rule 118 (atomic -> FALSE .)
    LESSER_EQUAL    reduce using rule 118 (atomic -> FALSE .)
    GREATER         reduce using rule 118 (atomic -> FALSE .)
    LESSER          reduce using rule 118 (atomic -> FALSE .)
    NOT             reduce using rule 118 (atomic -> FALSE .)
    IS              reduce using rule 118 (atomic -> FALSE .)
    IN              reduce using rule 118 (atomic -> FALSE .)
    AND             reduce using rule 118 (atomic -> FALSE .)
    OR              reduce using rule 118 (atomic -> FALSE .)
    IF              reduce using rule 118 (atomic -> FALSE .)
    COMMA           reduce using rule 118 (atomic -> FALSE .)
    NEWLINE         reduce using rule 118 (atomic -> FALSE .)
    R_PARENTHESIS   reduce using rule 118 (atomic -> FALSE .)
    COLON           reduce using rule 118 (atomic -> FALSE .)
    R_SQB           reduce using rule 118 (atomic -> FALSE .)
    R_CB            reduce using rule 118 (atomic -> FALSE .)
    ELSE            reduce using rule 118 (atomic -> FALSE .)


state 52

    (119) atomic -> NONE .

    DOUBLE_STAR     reduce using rule 119 (atomic -> NONE .)
    L_PARENTHESIS   reduce using rule 119 (atomic -> NONE .)
    L_SQB           reduce using rule 119 (atomic -> NONE .)
    DOT             reduce using rule 119 (atomic -> NONE .)
    STAR            reduce using rule 119 (atomic -> NONE .)
    SLASH           reduce using rule 119 (atomic -> NONE .)
    DOUBLE_SLASH    reduce using rule 119 (atomic -> NONE .)
    PERCENT         reduce using rule 119 (atomic -> NONE .)
    PLUS            reduce using rule 119 (atomic -> NONE .)
    MINUS           reduce using rule 119 (atomic -> NONE .)
    L_SHIFT         reduce using rule 119 (atomic -> NONE .)
    R_SHIFT         reduce using rule 119 (atomic -> NONE .)
    AMPERSAND       reduce using rule 119 (atomic -> NONE .)
    CARET           reduce using rule 119 (atomic -> NONE .)
    PIPE            reduce using rule 119 (atomic -> NONE .)
    EQUALITY        reduce using rule 119 (atomic -> NONE .)
    INEQUALITY      reduce using rule 119 (atomic -> NONE .)
    GREATER_EQUAL   reduce using rule 119 (atomic -> NONE .)
    LESSER_EQUAL    reduce using rule 119 (atomic -> NONE .)
    GREATER         reduce using rule 119 (atomic -> NONE .)
    LESSER          reduce using rule 119 (atomic -> NONE .)
    NOT             reduce using rule 119 (atomic -> NONE .)
    IS              reduce using rule 119 (atomic -> NONE .)
    IN              reduce using rule 119 (atomic -> NONE .)
    AND             reduce using rule 119 (atomic -> NONE .)
    OR              reduce using rule 119 (atomic -> NONE .)
    IF              reduce using rule 119 (atomic -> NONE .)
    COMMA           reduce using rule 119 (atomic -> NONE .)
    NEWLINE         reduce using rule 119 (atomic -> NONE .)
    R_PARENTHESIS   reduce using rule 119 (atomic -> NONE .)
    COLON           reduce using rule 119 (atomic -> NONE .)
    R_SQB           reduce using rule 119 (atomic -> NONE .)
    R_CB            reduce using rule 119 (atomic -> NONE .)
    ELSE            reduce using rule 119 (atomic -> NONE .)


state 53

    (120) atomic -> strings .

    DOUBLE_STAR     reduce using rule 120 (atomic -> strings .)
    L_PARENTHESIS   reduce using rule 120 (atomic -> strings .)
    L_SQB           reduce using rule 120 (atomic -> strings .)
    DOT             reduce using rule 120 (atomic -> strings .)
    STAR            reduce using rule 120 (atomic -> strings .)
    SLASH           reduce using rule 120 (atomic -> strings .)
    DOUBLE_SLASH    reduce using rule 120 (atomic -> strings .)
    PERCENT         reduce using rule 120 (atomic -> strings .)
    PLUS            reduce using rule 120 (atomic -> strings .)
    MINUS           reduce using rule 120 (atomic -> strings .)
    L_SHIFT         reduce using rule 120 (atomic -> strings .)
    R_SHIFT         reduce using rule 120 (atomic -> strings .)
    AMPERSAND       reduce using rule 120 (atomic -> strings .)
    CARET           reduce using rule 120 (atomic -> strings .)
    PIPE            reduce using rule 120 (atomic -> strings .)
    EQUALITY        reduce using rule 120 (atomic -> strings .)
    INEQUALITY      reduce using rule 120 (atomic -> strings .)
    GREATER_EQUAL   reduce using rule 120 (atomic -> strings .)
    LESSER_EQUAL    reduce using rule 120 (atomic -> strings .)
    GREATER         reduce using rule 120 (atomic -> strings .)
    LESSER          reduce using rule 120 (atomic -> strings .)
    NOT             reduce using rule 120 (atomic -> strings .)
    IS              reduce using rule 120 (atomic -> strings .)
    IN              reduce using rule 120 (atomic -> strings .)
    AND             reduce using rule 120 (atomic -> strings .)
    OR              reduce using rule 120 (atomic -> strings .)
    IF              reduce using rule 120 (atomic -> strings .)
    COMMA           reduce using rule 120 (atomic -> strings .)
    NEWLINE         reduce using rule 120 (atomic -> strings .)
    R_PARENTHESIS   reduce using rule 120 (atomic -> strings .)
    COLON           reduce using rule 120 (atomic -> strings .)
    R_SQB           reduce using rule 120 (atomic -> strings .)
    R_CB            reduce using rule 120 (atomic -> strings .)
    ELSE            reduce using rule 120 (atomic -> strings .)


state 54

    (121) atomic -> number .

    DOUBLE_STAR     reduce using rule 121 (atomic -> number .)
    L_PARENTHESIS   reduce using rule 121 (atomic -> number .)
    L_SQB           reduce using rule 121 (atomic -> number .)
    DOT             reduce using rule 121 (atomic -> number .)
    STAR            reduce using rule 121 (atomic -> number .)
    SLASH           reduce using rule 121 (atomic -> number .)
    DOUBLE_SLASH    reduce using rule 121 (atomic -> number .)
    PERCENT         reduce using rule 121 (atomic -> number .)
    PLUS            reduce using rule 121 (atomic -> number .)
    MINUS           reduce using rule 121 (atomic -> number .)
    L_SHIFT         reduce using rule 121 (atomic -> number .)
    R_SHIFT         reduce using rule 121 (atomic -> number .)
    AMPERSAND       reduce using rule 121 (atomic -> number .)
    CARET           reduce using rule 121 (atomic -> number .)
    PIPE            reduce using rule 121 (atomic -> number .)
    EQUALITY        reduce using rule 121 (atomic -> number .)
    INEQUALITY      reduce using rule 121 (atomic -> number .)
    GREATER_EQUAL   reduce using rule 121 (atomic -> number .)
    LESSER_EQUAL    reduce using rule 121 (atomic -> number .)
    GREATER         reduce using rule 121 (atomic -> number .)
    LESSER          reduce using rule 121 (atomic -> number .)
    NOT             reduce using rule 121 (atomic -> number .)
    IS              reduce using rule 121 (atomic -> number .)
    IN              reduce using rule 121 (atomic -> number .)
    AND             reduce using rule 121 (atomic -> number .)
    OR              reduce using rule 121 (atomic -> number .)
    IF              reduce using rule 121 (atomic -> number .)
    COMMA           reduce using rule 121 (atomic -> number .)
    NEWLINE         reduce using rule 121 (atomic -> number .)
    R_PARENTHESIS   reduce using rule 121 (atomic -> number .)
    COLON           reduce using rule 121 (atomic -> number .)
    R_SQB           reduce using rule 121 (atomic -> number .)
    R_CB            reduce using rule 121 (atomic -> number .)
    ELSE            reduce using rule 121 (atomic -> number .)


state 55

    (122) atomic -> tuple .

    DOUBLE_STAR     reduce using rule 122 (atomic -> tuple .)
    L_PARENTHESIS   reduce using rule 122 (atomic -> tuple .)
    L_SQB           reduce using rule 122 (atomic -> tuple .)
    DOT             reduce using rule 122 (atomic -> tuple .)
    STAR            reduce using rule 122 (atomic -> tuple .)
    SLASH           reduce using rule 122 (atomic -> tuple .)
    DOUBLE_SLASH    reduce using rule 122 (atomic -> tuple .)
    PERCENT         reduce using rule 122 (atomic -> tuple .)
    PLUS            reduce using rule 122 (atomic -> tuple .)
    MINUS           reduce using rule 122 (atomic -> tuple .)
    L_SHIFT         reduce using rule 122 (atomic -> tuple .)
    R_SHIFT         reduce using rule 122 (atomic -> tuple .)
    AMPERSAND       reduce using rule 122 (atomic -> tuple .)
    CARET           reduce using rule 122 (atomic -> tuple .)
    PIPE            reduce using rule 122 (atomic -> tuple .)
    EQUALITY        reduce using rule 122 (atomic -> tuple .)
    INEQUALITY      reduce using rule 122 (atomic -> tuple .)
    GREATER_EQUAL   reduce using rule 122 (atomic -> tuple .)
    LESSER_EQUAL    reduce using rule 122 (atomic -> tuple .)
    GREATER         reduce using rule 122 (atomic -> tuple .)
    LESSER          reduce using rule 122 (atomic -> tuple .)
    NOT             reduce using rule 122 (atomic -> tuple .)
    IS              reduce using rule 122 (atomic -> tuple .)
    IN              reduce using rule 122 (atomic -> tuple .)
    AND             reduce using rule 122 (atomic -> tuple .)
    OR              reduce using rule 122 (atomic -> tuple .)
    IF              reduce using rule 122 (atomic -> tuple .)
    COMMA           reduce using rule 122 (atomic -> tuple .)
    NEWLINE         reduce using rule 122 (atomic -> tuple .)
    R_PARENTHESIS   reduce using rule 122 (atomic -> tuple .)
    COLON           reduce using rule 122 (atomic -> tuple .)
    R_SQB           reduce using rule 122 (atomic -> tuple .)
    R_CB            reduce using rule 122 (atomic -> tuple .)
    ELSE            reduce using rule 122 (atomic -> tuple .)


state 56

    (123) atomic -> list .

    DOUBLE_STAR     reduce using rule 123 (atomic -> list .)
    L_PARENTHESIS   reduce using rule 123 (atomic -> list .)
    L_SQB           reduce using rule 123 (atomic -> list .)
    DOT             reduce using rule 123 (atomic -> list .)
    STAR            reduce using rule 123 (atomic -> list .)
    SLASH           reduce using rule 123 (atomic -> list .)
    DOUBLE_SLASH    reduce using rule 123 (atomic -> list .)
    PERCENT         reduce using rule 123 (atomic -> list .)
    PLUS            reduce using rule 123 (atomic -> list .)
    MINUS           reduce using rule 123 (atomic -> list .)
    L_SHIFT         reduce using rule 123 (atomic -> list .)
    R_SHIFT         reduce using rule 123 (atomic -> list .)
    AMPERSAND       reduce using rule 123 (atomic -> list .)
    CARET           reduce using rule 123 (atomic -> list .)
    PIPE            reduce using rule 123 (atomic -> list .)
    EQUALITY        reduce using rule 123 (atomic -> list .)
    INEQUALITY      reduce using rule 123 (atomic -> list .)
    GREATER_EQUAL   reduce using rule 123 (atomic -> list .)
    LESSER_EQUAL    reduce using rule 123 (atomic -> list .)
    GREATER         reduce using rule 123 (atomic -> list .)
    LESSER          reduce using rule 123 (atomic -> list .)
    NOT             reduce using rule 123 (atomic -> list .)
    IS              reduce using rule 123 (atomic -> list .)
    IN              reduce using rule 123 (atomic -> list .)
    AND             reduce using rule 123 (atomic -> list .)
    OR              reduce using rule 123 (atomic -> list .)
    IF              reduce using rule 123 (atomic -> list .)
    COMMA           reduce using rule 123 (atomic -> list .)
    NEWLINE         reduce using rule 123 (atomic -> list .)
    R_PARENTHESIS   reduce using rule 123 (atomic -> list .)
    COLON           reduce using rule 123 (atomic -> list .)
    R_SQB           reduce using rule 123 (atomic -> list .)
    R_CB            reduce using rule 123 (atomic -> list .)
    ELSE            reduce using rule 123 (atomic -> list .)


state 57

    (124) atomic -> dict .

    DOUBLE_STAR     reduce using rule 124 (atomic -> dict .)
    L_PARENTHESIS   reduce using rule 124 (atomic -> dict .)
    L_SQB           reduce using rule 124 (atomic -> dict .)
    DOT             reduce using rule 124 (atomic -> dict .)
    STAR            reduce using rule 124 (atomic -> dict .)
    SLASH           reduce using rule 124 (atomic -> dict .)
    DOUBLE_SLASH    reduce using rule 124 (atomic -> dict .)
    PERCENT         reduce using rule 124 (atomic -> dict .)
    PLUS            reduce using rule 124 (atomic -> dict .)
    MINUS           reduce using rule 124 (atomic -> dict .)
    L_SHIFT         reduce using rule 124 (atomic -> dict .)
    R_SHIFT         reduce using rule 124 (atomic -> dict .)
    AMPERSAND       reduce using rule 124 (atomic -> dict .)
    CARET           reduce using rule 124 (atomic -> dict .)
    PIPE            reduce using rule 124 (atomic -> dict .)
    EQUALITY        reduce using rule 124 (atomic -> dict .)
    INEQUALITY      reduce using rule 124 (atomic -> dict .)
    GREATER_EQUAL   reduce using rule 124 (atomic -> dict .)
    LESSER_EQUAL    reduce using rule 124 (atomic -> dict .)
    GREATER         reduce using rule 124 (atomic -> dict .)
    LESSER          reduce using rule 124 (atomic -> dict .)
    NOT             reduce using rule 124 (atomic -> dict .)
    IS              reduce using rule 124 (atomic -> dict .)
    IN              reduce using rule 124 (atomic -> dict .)
    AND             reduce using rule 124 (atomic -> dict .)
    OR              reduce using rule 124 (atomic -> dict .)
    IF              reduce using rule 124 (atomic -> dict .)
    COMMA           reduce using rule 124 (atomic -> dict .)
    NEWLINE         reduce using rule 124 (atomic -> dict .)
    R_PARENTHESIS   reduce using rule 124 (atomic -> dict .)
    COLON           reduce using rule 124 (atomic -> dict .)
    R_SQB           reduce using rule 124 (atomic -> dict .)
    R_CB            reduce using rule 124 (atomic -> dict .)
    ELSE            reduce using rule 124 (atomic -> dict .)


state 58

    (125) atomic -> set .

    DOUBLE_STAR     reduce using rule 125 (atomic -> set .)
    L_PARENTHESIS   reduce using rule 125 (atomic -> set .)
    L_SQB           reduce using rule 125 (atomic -> set .)
    DOT             reduce using rule 125 (atomic -> set .)
    STAR            reduce using rule 125 (atomic -> set .)
    SLASH           reduce using rule 125 (atomic -> set .)
    DOUBLE_SLASH    reduce using rule 125 (atomic -> set .)
    PERCENT         reduce using rule 125 (atomic -> set .)
    PLUS            reduce using rule 125 (atomic -> set .)
    MINUS           reduce using rule 125 (atomic -> set .)
    L_SHIFT         reduce using rule 125 (atomic -> set .)
    R_SHIFT         reduce using rule 125 (atomic -> set .)
    AMPERSAND       reduce using rule 125 (atomic -> set .)
    CARET           reduce using rule 125 (atomic -> set .)
    PIPE            reduce using rule 125 (atomic -> set .)
    EQUALITY        reduce using rule 125 (atomic -> set .)
    INEQUALITY      reduce using rule 125 (atomic -> set .)
    GREATER_EQUAL   reduce using rule 125 (atomic -> set .)
    LESSER_EQUAL    reduce using rule 125 (atomic -> set .)
    GREATER         reduce using rule 125 (atomic -> set .)
    LESSER          reduce using rule 125 (atomic -> set .)
    NOT             reduce using rule 125 (atomic -> set .)
    IS              reduce using rule 125 (atomic -> set .)
    IN              reduce using rule 125 (atomic -> set .)
    AND             reduce using rule 125 (atomic -> set .)
    OR              reduce using rule 125 (atomic -> set .)
    IF              reduce using rule 125 (atomic -> set .)
    COMMA           reduce using rule 125 (atomic -> set .)
    NEWLINE         reduce using rule 125 (atomic -> set .)
    R_PARENTHESIS   reduce using rule 125 (atomic -> set .)
    COLON           reduce using rule 125 (atomic -> set .)
    R_SQB           reduce using rule 125 (atomic -> set .)
    R_CB            reduce using rule 125 (atomic -> set .)
    ELSE            reduce using rule 125 (atomic -> set .)


state 59

    (132) strings -> STRING .

    DOUBLE_STAR     reduce using rule 132 (strings -> STRING .)
    L_PARENTHESIS   reduce using rule 132 (strings -> STRING .)
    L_SQB           reduce using rule 132 (strings -> STRING .)
    DOT             reduce using rule 132 (strings -> STRING .)
    STAR            reduce using rule 132 (strings -> STRING .)
    SLASH           reduce using rule 132 (strings -> STRING .)
    DOUBLE_SLASH    reduce using rule 132 (strings -> STRING .)
    PERCENT         reduce using rule 132 (strings -> STRING .)
    PLUS            reduce using rule 132 (strings -> STRING .)
    MINUS           reduce using rule 132 (strings -> STRING .)
    L_SHIFT         reduce using rule 132 (strings -> STRING .)
    R_SHIFT         reduce using rule 132 (strings -> STRING .)
    AMPERSAND       reduce using rule 132 (strings -> STRING .)
    CARET           reduce using rule 132 (strings -> STRING .)
    PIPE            reduce using rule 132 (strings -> STRING .)
    EQUALITY        reduce using rule 132 (strings -> STRING .)
    INEQUALITY      reduce using rule 132 (strings -> STRING .)
    GREATER_EQUAL   reduce using rule 132 (strings -> STRING .)
    LESSER_EQUAL    reduce using rule 132 (strings -> STRING .)
    GREATER         reduce using rule 132 (strings -> STRING .)
    LESSER          reduce using rule 132 (strings -> STRING .)
    NOT             reduce using rule 132 (strings -> STRING .)
    IS              reduce using rule 132 (strings -> STRING .)
    IN              reduce using rule 132 (strings -> STRING .)
    AND             reduce using rule 132 (strings -> STRING .)
    OR              reduce using rule 132 (strings -> STRING .)
    IF              reduce using rule 132 (strings -> STRING .)
    COMMA           reduce using rule 132 (strings -> STRING .)
    NEWLINE         reduce using rule 132 (strings -> STRING .)
    R_PARENTHESIS   reduce using rule 132 (strings -> STRING .)
    COLON           reduce using rule 132 (strings -> STRING .)
    R_SQB           reduce using rule 132 (strings -> STRING .)
    R_CB            reduce using rule 132 (strings -> STRING .)
    ELSE            reduce using rule 132 (strings -> STRING .)


state 60

    (133) strings -> TRIPLE_STRING .

    DOUBLE_STAR     reduce using rule 133 (strings -> TRIPLE_STRING .)
    L_PARENTHESIS   reduce using rule 133 (strings -> TRIPLE_STRING .)
    L_SQB           reduce using rule 133 (strings -> TRIPLE_STRING .)
    DOT             reduce using rule 133 (strings -> TRIPLE_STRING .)
    STAR            reduce using rule 133 (strings -> TRIPLE_STRING .)
    SLASH           reduce using rule 133 (strings -> TRIPLE_STRING .)
    DOUBLE_SLASH    reduce using rule 133 (strings -> TRIPLE_STRING .)
    PERCENT         reduce using rule 133 (strings -> TRIPLE_STRING .)
    PLUS            reduce using rule 133 (strings -> TRIPLE_STRING .)
    MINUS           reduce using rule 133 (strings -> TRIPLE_STRING .)
    L_SHIFT         reduce using rule 133 (strings -> TRIPLE_STRING .)
    R_SHIFT         reduce using rule 133 (strings -> TRIPLE_STRING .)
    AMPERSAND       reduce using rule 133 (strings -> TRIPLE_STRING .)
    CARET           reduce using rule 133 (strings -> TRIPLE_STRING .)
    PIPE            reduce using rule 133 (strings -> TRIPLE_STRING .)
    EQUALITY        reduce using rule 133 (strings -> TRIPLE_STRING .)
    INEQUALITY      reduce using rule 133 (strings -> TRIPLE_STRING .)
    GREATER_EQUAL   reduce using rule 133 (strings -> TRIPLE_STRING .)
    LESSER_EQUAL    reduce using rule 133 (strings -> TRIPLE_STRING .)
    GREATER         reduce using rule 133 (strings -> TRIPLE_STRING .)
    LESSER          reduce using rule 133 (strings -> TRIPLE_STRING .)
    NOT             reduce using rule 133 (strings -> TRIPLE_STRING .)
    IS              reduce using rule 133 (strings -> TRIPLE_STRING .)
    IN              reduce using rule 133 (strings -> TRIPLE_STRING .)
    AND             reduce using rule 133 (strings -> TRIPLE_STRING .)
    OR              reduce using rule 133 (strings -> TRIPLE_STRING .)
    IF              reduce using rule 133 (strings -> TRIPLE_STRING .)
    COMMA           reduce using rule 133 (strings -> TRIPLE_STRING .)
    NEWLINE         reduce using rule 133 (strings -> TRIPLE_STRING .)
    R_PARENTHESIS   reduce using rule 133 (strings -> TRIPLE_STRING .)
    COLON           reduce using rule 133 (strings -> TRIPLE_STRING .)
    R_SQB           reduce using rule 133 (strings -> TRIPLE_STRING .)
    R_CB            reduce using rule 133 (strings -> TRIPLE_STRING .)
    ELSE            reduce using rule 133 (strings -> TRIPLE_STRING .)


state 61

    (126) number -> NUMBER .

    DOUBLE_STAR     reduce using rule 126 (number -> NUMBER .)
    L_PARENTHESIS   reduce using rule 126 (number -> NUMBER .)
    L_SQB           reduce using rule 126 (number -> NUMBER .)
    DOT             reduce using rule 126 (number -> NUMBER .)
    STAR            reduce using rule 126 (number -> NUMBER .)
    SLASH           reduce using rule 126 (number -> NUMBER .)
    DOUBLE_SLASH    reduce using rule 126 (number -> NUMBER .)
    PERCENT         reduce using rule 126 (number -> NUMBER .)
    PLUS            reduce using rule 126 (number -> NUMBER .)
    MINUS           reduce using rule 126 (number -> NUMBER .)
    L_SHIFT         reduce using rule 126 (number -> NUMBER .)
    R_SHIFT         reduce using rule 126 (number -> NUMBER .)
    AMPERSAND       reduce using rule 126 (number -> NUMBER .)
    CARET           reduce using rule 126 (number -> NUMBER .)
    PIPE            reduce using rule 126 (number -> NUMBER .)
    EQUALITY        reduce using rule 126 (number -> NUMBER .)
    INEQUALITY      reduce using rule 126 (number -> NUMBER .)
    GREATER_EQUAL   reduce using rule 126 (number -> NUMBER .)
    LESSER_EQUAL    reduce using rule 126 (number -> NUMBER .)
    GREATER         reduce using rule 126 (number -> NUMBER .)
    LESSER          reduce using rule 126 (number -> NUMBER .)
    NOT             reduce using rule 126 (number -> NUMBER .)
    IS              reduce using rule 126 (number -> NUMBER .)
    IN              reduce using rule 126 (number -> NUMBER .)
    AND             reduce using rule 126 (number -> NUMBER .)
    OR              reduce using rule 126 (number -> NUMBER .)
    IF              reduce using rule 126 (number -> NUMBER .)
    COMMA           reduce using rule 126 (number -> NUMBER .)
    NEWLINE         reduce using rule 126 (number -> NUMBER .)
    R_PARENTHESIS   reduce using rule 126 (number -> NUMBER .)
    COLON           reduce using rule 126 (number -> NUMBER .)
    R_SQB           reduce using rule 126 (number -> NUMBER .)
    R_CB            reduce using rule 126 (number -> NUMBER .)
    ELSE            reduce using rule 126 (number -> NUMBER .)


state 62

    (127) number -> F_NUMBER .

    DOUBLE_STAR     reduce using rule 127 (number -> F_NUMBER .)
    L_PARENTHESIS   reduce using rule 127 (number -> F_NUMBER .)
    L_SQB           reduce using rule 127 (number -> F_NUMBER .)
    DOT             reduce using rule 127 (number -> F_NUMBER .)
    STAR            reduce using rule 127 (number -> F_NUMBER .)
    SLASH           reduce using rule 127 (number -> F_NUMBER .)
    DOUBLE_SLASH    reduce using rule 127 (number -> F_NUMBER .)
    PERCENT         reduce using rule 127 (number -> F_NUMBER .)
    PLUS            reduce using rule 127 (number -> F_NUMBER .)
    MINUS           reduce using rule 127 (number -> F_NUMBER .)
    L_SHIFT         reduce using rule 127 (number -> F_NUMBER .)
    R_SHIFT         reduce using rule 127 (number -> F_NUMBER .)
    AMPERSAND       reduce using rule 127 (number -> F_NUMBER .)
    CARET           reduce using rule 127 (number -> F_NUMBER .)
    PIPE            reduce using rule 127 (number -> F_NUMBER .)
    EQUALITY        reduce using rule 127 (number -> F_NUMBER .)
    INEQUALITY      reduce using rule 127 (number -> F_NUMBER .)
    GREATER_EQUAL   reduce using rule 127 (number -> F_NUMBER .)
    LESSER_EQUAL    reduce using rule 127 (number -> F_NUMBER .)
    GREATER         reduce using rule 127 (number -> F_NUMBER .)
    LESSER          reduce using rule 127 (number -> F_NUMBER .)
    NOT             reduce using rule 127 (number -> F_NUMBER .)
    IS              reduce using rule 127 (number -> F_NUMBER .)
    IN              reduce using rule 127 (number -> F_NUMBER .)
    AND             reduce using rule 127 (number -> F_NUMBER .)
    OR              reduce using rule 127 (number -> F_NUMBER .)
    IF              reduce using rule 127 (number -> F_NUMBER .)
    COMMA           reduce using rule 127 (number -> F_NUMBER .)
    NEWLINE         reduce using rule 127 (number -> F_NUMBER .)
    R_PARENTHESIS   reduce using rule 127 (number -> F_NUMBER .)
    COLON           reduce using rule 127 (number -> F_NUMBER .)
    R_SQB           reduce using rule 127 (number -> F_NUMBER .)
    R_CB            reduce using rule 127 (number -> F_NUMBER .)
    ELSE            reduce using rule 127 (number -> F_NUMBER .)


state 63

    (128) number -> BIN_NUMBER .

    DOUBLE_STAR     reduce using rule 128 (number -> BIN_NUMBER .)
    L_PARENTHESIS   reduce using rule 128 (number -> BIN_NUMBER .)
    L_SQB           reduce using rule 128 (number -> BIN_NUMBER .)
    DOT             reduce using rule 128 (number -> BIN_NUMBER .)
    STAR            reduce using rule 128 (number -> BIN_NUMBER .)
    SLASH           reduce using rule 128 (number -> BIN_NUMBER .)
    DOUBLE_SLASH    reduce using rule 128 (number -> BIN_NUMBER .)
    PERCENT         reduce using rule 128 (number -> BIN_NUMBER .)
    PLUS            reduce using rule 128 (number -> BIN_NUMBER .)
    MINUS           reduce using rule 128 (number -> BIN_NUMBER .)
    L_SHIFT         reduce using rule 128 (number -> BIN_NUMBER .)
    R_SHIFT         reduce using rule 128 (number -> BIN_NUMBER .)
    AMPERSAND       reduce using rule 128 (number -> BIN_NUMBER .)
    CARET           reduce using rule 128 (number -> BIN_NUMBER .)
    PIPE            reduce using rule 128 (number -> BIN_NUMBER .)
    EQUALITY        reduce using rule 128 (number -> BIN_NUMBER .)
    INEQUALITY      reduce using rule 128 (number -> BIN_NUMBER .)
    GREATER_EQUAL   reduce using rule 128 (number -> BIN_NUMBER .)
    LESSER_EQUAL    reduce using rule 128 (number -> BIN_NUMBER .)
    GREATER         reduce using rule 128 (number -> BIN_NUMBER .)
    LESSER          reduce using rule 128 (number -> BIN_NUMBER .)
    NOT             reduce using rule 128 (number -> BIN_NUMBER .)
    IS              reduce using rule 128 (number -> BIN_NUMBER .)
    IN              reduce using rule 128 (number -> BIN_NUMBER .)
    AND             reduce using rule 128 (number -> BIN_NUMBER .)
    OR              reduce using rule 128 (number -> BIN_NUMBER .)
    IF              reduce using rule 128 (number -> BIN_NUMBER .)
    COMMA           reduce using rule 128 (number -> BIN_NUMBER .)
    NEWLINE         reduce using rule 128 (number -> BIN_NUMBER .)
    R_PARENTHESIS   reduce using rule 128 (number -> BIN_NUMBER .)
    COLON           reduce using rule 128 (number -> BIN_NUMBER .)
    R_SQB           reduce using rule 128 (number -> BIN_NUMBER .)
    R_CB            reduce using rule 128 (number -> BIN_NUMBER .)
    ELSE            reduce using rule 128 (number -> BIN_NUMBER .)


state 64

    (129) number -> HEX_NUMBER .

    DOUBLE_STAR     reduce using rule 129 (number -> HEX_NUMBER .)
    L_PARENTHESIS   reduce using rule 129 (number -> HEX_NUMBER .)
    L_SQB           reduce using rule 129 (number -> HEX_NUMBER .)
    DOT             reduce using rule 129 (number -> HEX_NUMBER .)
    STAR            reduce using rule 129 (number -> HEX_NUMBER .)
    SLASH           reduce using rule 129 (number -> HEX_NUMBER .)
    DOUBLE_SLASH    reduce using rule 129 (number -> HEX_NUMBER .)
    PERCENT         reduce using rule 129 (number -> HEX_NUMBER .)
    PLUS            reduce using rule 129 (number -> HEX_NUMBER .)
    MINUS           reduce using rule 129 (number -> HEX_NUMBER .)
    L_SHIFT         reduce using rule 129 (number -> HEX_NUMBER .)
    R_SHIFT         reduce using rule 129 (number -> HEX_NUMBER .)
    AMPERSAND       reduce using rule 129 (number -> HEX_NUMBER .)
    CARET           reduce using rule 129 (number -> HEX_NUMBER .)
    PIPE            reduce using rule 129 (number -> HEX_NUMBER .)
    EQUALITY        reduce using rule 129 (number -> HEX_NUMBER .)
    INEQUALITY      reduce using rule 129 (number -> HEX_NUMBER .)
    GREATER_EQUAL   reduce using rule 129 (number -> HEX_NUMBER .)
    LESSER_EQUAL    reduce using rule 129 (number -> HEX_NUMBER .)
    GREATER         reduce using rule 129 (number -> HEX_NUMBER .)
    LESSER          reduce using rule 129 (number -> HEX_NUMBER .)
    NOT             reduce using rule 129 (number -> HEX_NUMBER .)
    IS              reduce using rule 129 (number -> HEX_NUMBER .)
    IN              reduce using rule 129 (number -> HEX_NUMBER .)
    AND             reduce using rule 129 (number -> HEX_NUMBER .)
    OR              reduce using rule 129 (number -> HEX_NUMBER .)
    IF              reduce using rule 129 (number -> HEX_NUMBER .)
    COMMA           reduce using rule 129 (number -> HEX_NUMBER .)
    NEWLINE         reduce using rule 129 (number -> HEX_NUMBER .)
    R_PARENTHESIS   reduce using rule 129 (number -> HEX_NUMBER .)
    COLON           reduce using rule 129 (number -> HEX_NUMBER .)
    R_SQB           reduce using rule 129 (number -> HEX_NUMBER .)
    R_CB            reduce using rule 129 (number -> HEX_NUMBER .)
    ELSE            reduce using rule 129 (number -> HEX_NUMBER .)


state 65

    (130) number -> OCT_NUMBER .

    DOUBLE_STAR     reduce using rule 130 (number -> OCT_NUMBER .)
    L_PARENTHESIS   reduce using rule 130 (number -> OCT_NUMBER .)
    L_SQB           reduce using rule 130 (number -> OCT_NUMBER .)
    DOT             reduce using rule 130 (number -> OCT_NUMBER .)
    STAR            reduce using rule 130 (number -> OCT_NUMBER .)
    SLASH           reduce using rule 130 (number -> OCT_NUMBER .)
    DOUBLE_SLASH    reduce using rule 130 (number -> OCT_NUMBER .)
    PERCENT         reduce using rule 130 (number -> OCT_NUMBER .)
    PLUS            reduce using rule 130 (number -> OCT_NUMBER .)
    MINUS           reduce using rule 130 (number -> OCT_NUMBER .)
    L_SHIFT         reduce using rule 130 (number -> OCT_NUMBER .)
    R_SHIFT         reduce using rule 130 (number -> OCT_NUMBER .)
    AMPERSAND       reduce using rule 130 (number -> OCT_NUMBER .)
    CARET           reduce using rule 130 (number -> OCT_NUMBER .)
    PIPE            reduce using rule 130 (number -> OCT_NUMBER .)
    EQUALITY        reduce using rule 130 (number -> OCT_NUMBER .)
    INEQUALITY      reduce using rule 130 (number -> OCT_NUMBER .)
    GREATER_EQUAL   reduce using rule 130 (number -> OCT_NUMBER .)
    LESSER_EQUAL    reduce using rule 130 (number -> OCT_NUMBER .)
    GREATER         reduce using rule 130 (number -> OCT_NUMBER .)
    LESSER          reduce using rule 130 (number -> OCT_NUMBER .)
    NOT             reduce using rule 130 (number -> OCT_NUMBER .)
    IS              reduce using rule 130 (number -> OCT_NUMBER .)
    IN              reduce using rule 130 (number -> OCT_NUMBER .)
    AND             reduce using rule 130 (number -> OCT_NUMBER .)
    OR              reduce using rule 130 (number -> OCT_NUMBER .)
    IF              reduce using rule 130 (number -> OCT_NUMBER .)
    COMMA           reduce using rule 130 (number -> OCT_NUMBER .)
    NEWLINE         reduce using rule 130 (number -> OCT_NUMBER .)
    R_PARENTHESIS   reduce using rule 130 (number -> OCT_NUMBER .)
    COLON           reduce using rule 130 (number -> OCT_NUMBER .)
    R_SQB           reduce using rule 130 (number -> OCT_NUMBER .)
    R_CB            reduce using rule 130 (number -> OCT_NUMBER .)
    ELSE            reduce using rule 130 (number -> OCT_NUMBER .)


state 66

    (139) dict -> L_CB . kvpairs R_CB
    (140) dict -> L_CB . R_CB
    (138) set -> L_CB . expressions R_CB
    (141) kvpairs -> . kvpairs COMMA kvpair
    (142) kvpairs -> . kvpair
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (143) kvpair -> . expression COLON expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    R_CB            shift and go to state 130
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    kvpairs                        shift and go to state 129
    expressions                    shift and go to state 131
    kvpair                         shift and go to state 132
    expression                     shift and go to state 133
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 67

    (1) file -> statements ENDMARKER .

    $end            reduce using rule 1 (file -> statements ENDMARKER .)


state 68

    (3) statements -> statements statement .

    ENDMARKER       reduce using rule 3 (statements -> statements statement .)
    DEF             reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    CLASS           reduce using rule 3 (statements -> statements statement .)
    FOR             reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    PASS            reduce using rule 3 (statements -> statements statement .)
    BREAK           reduce using rule 3 (statements -> statements statement .)
    CONTINUE        reduce using rule 3 (statements -> statements statement .)
    IDENTIFIER      reduce using rule 3 (statements -> statements statement .)
    RETURN          reduce using rule 3 (statements -> statements statement .)
    DEL             reduce using rule 3 (statements -> statements statement .)
    GLOBAL          reduce using rule 3 (statements -> statements statement .)
    NOT             reduce using rule 3 (statements -> statements statement .)
    PLUS            reduce using rule 3 (statements -> statements statement .)
    MINUS           reduce using rule 3 (statements -> statements statement .)
    TRUE            reduce using rule 3 (statements -> statements statement .)
    FALSE           reduce using rule 3 (statements -> statements statement .)
    NONE            reduce using rule 3 (statements -> statements statement .)
    STRING          reduce using rule 3 (statements -> statements statement .)
    TRIPLE_STRING   reduce using rule 3 (statements -> statements statement .)
    NUMBER          reduce using rule 3 (statements -> statements statement .)
    F_NUMBER        reduce using rule 3 (statements -> statements statement .)
    BIN_NUMBER      reduce using rule 3 (statements -> statements statement .)
    HEX_NUMBER      reduce using rule 3 (statements -> statements statement .)
    OCT_NUMBER      reduce using rule 3 (statements -> statements statement .)
    L_PARENTHESIS   reduce using rule 3 (statements -> statements statement .)
    L_SQB           reduce using rule 3 (statements -> statements statement .)
    L_CB            reduce using rule 3 (statements -> statements statement .)
    DEDENT          reduce using rule 3 (statements -> statements statement .)


state 69

    (7) simple_stmts -> simple_stmts SEMICOLON . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    simple_stmt                    shift and go to state 134
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 70

    (8) simple_stmts -> simple_stmt NEWLINE .

    SEMICOLON       reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    ENDMARKER       reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    DEF             reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    IF              reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    CLASS           reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    FOR             reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    WHILE           reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    PASS            reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    BREAK           reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    CONTINUE        reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    IDENTIFIER      reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    RETURN          reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    DEL             reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    GLOBAL          reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    NOT             reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    PLUS            reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    MINUS           reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    TRUE            reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    FALSE           reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    NONE            reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    STRING          reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    TRIPLE_STRING   reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    NUMBER          reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    F_NUMBER        reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    BIN_NUMBER      reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    HEX_NUMBER      reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    OCT_NUMBER      reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    L_PARENTHESIS   reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    L_SQB           reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    L_CB            reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    ELIF            reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    ELSE            reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)
    DEDENT          reduce using rule 8 (simple_stmts -> simple_stmt NEWLINE .)


state 71

    (41) function_def -> DEF IDENTIFIER . L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (42) function_def -> DEF IDENTIFIER . L_PARENTHESIS R_PARENTHESIS COLON block

    L_PARENTHESIS   shift and go to state 135


state 72

    (22) assignment -> IDENTIFIER augmentation_assignment . expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expressions                    shift and go to state 136
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 73

    (23) augmentation_assignment -> ASSIGNMENT .

    NOT             reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    PLUS            reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    MINUS           reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    IDENTIFIER      reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    TRUE            reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    FALSE           reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    NONE            reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    STRING          reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    NUMBER          reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    F_NUMBER        reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    L_SQB           reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)
    L_CB            reduce using rule 23 (augmentation_assignment -> ASSIGNMENT .)


state 74

    (24) augmentation_assignment -> ADDITION_ASSIGNMENT .

    NOT             reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    PLUS            reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    MINUS           reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    TRUE            reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    FALSE           reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    NONE            reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    STRING          reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    NUMBER          reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    L_SQB           reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    L_CB            reduce using rule 24 (augmentation_assignment -> ADDITION_ASSIGNMENT .)


state 75

    (25) augmentation_assignment -> SUBTRACTION_ASSIGNMENT .

    NOT             reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    PLUS            reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    MINUS           reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    TRUE            reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    FALSE           reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    NONE            reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    STRING          reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    NUMBER          reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    L_SQB           reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    L_CB            reduce using rule 25 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)


state 76

    (26) augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .

    NOT             reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    PLUS            reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    MINUS           reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    TRUE            reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    FALSE           reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    NONE            reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    STRING          reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    NUMBER          reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    L_SQB           reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    L_CB            reduce using rule 26 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)


state 77

    (27) augmentation_assignment -> DIVISION_ASSIGNMENT .

    NOT             reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    PLUS            reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    MINUS           reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    TRUE            reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    FALSE           reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    NONE            reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    STRING          reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    NUMBER          reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    L_SQB           reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    L_CB            reduce using rule 27 (augmentation_assignment -> DIVISION_ASSIGNMENT .)


state 78

    (28) augmentation_assignment -> MODULO_ASSIGNMENT .

    NOT             reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    PLUS            reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    MINUS           reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    TRUE            reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    FALSE           reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    NONE            reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    STRING          reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    NUMBER          reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    F_NUMBER        reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    L_SQB           reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    L_CB            reduce using rule 28 (augmentation_assignment -> MODULO_ASSIGNMENT .)


state 79

    (29) augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .

    NOT             reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    PLUS            reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    MINUS           reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    TRUE            reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    FALSE           reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    NONE            reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    STRING          reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    NUMBER          reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    L_SQB           reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    L_CB            reduce using rule 29 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)


state 80

    (30) augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .

    NOT             reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    PLUS            reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    MINUS           reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    TRUE            reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    FALSE           reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    NONE            reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    STRING          reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    NUMBER          reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    L_SQB           reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    L_CB            reduce using rule 30 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)


state 81

    (136) tuple -> L_PARENTHESIS expressions . R_PARENTHESIS
    (56) expressions -> expressions . COMMA expression

    R_PARENTHESIS   shift and go to state 137
    COMMA           shift and go to state 89


state 82

    (137) tuple -> L_PARENTHESIS R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    L_SQB           reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    DOT             reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    STAR            reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    SLASH           reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    PERCENT         reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    PLUS            reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    MINUS           reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    L_SHIFT         reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    R_SHIFT         reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    AMPERSAND       reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    CARET           reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    PIPE            reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    EQUALITY        reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    INEQUALITY      reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    GREATER         reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    LESSER          reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    NOT             reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    IS              reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    IN              reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    AND             reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    OR              reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    IF              reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    COMMA           reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    NEWLINE         reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    COLON           reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    R_SQB           reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    R_CB            reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    ELSE            reduce using rule 137 (tuple -> L_PARENTHESIS R_PARENTHESIS .)


state 83

    (116) atomic -> IDENTIFIER .

    DOUBLE_STAR     reduce using rule 116 (atomic -> IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 116 (atomic -> IDENTIFIER .)
    L_SQB           reduce using rule 116 (atomic -> IDENTIFIER .)
    DOT             reduce using rule 116 (atomic -> IDENTIFIER .)
    STAR            reduce using rule 116 (atomic -> IDENTIFIER .)
    SLASH           reduce using rule 116 (atomic -> IDENTIFIER .)
    DOUBLE_SLASH    reduce using rule 116 (atomic -> IDENTIFIER .)
    PERCENT         reduce using rule 116 (atomic -> IDENTIFIER .)
    PLUS            reduce using rule 116 (atomic -> IDENTIFIER .)
    MINUS           reduce using rule 116 (atomic -> IDENTIFIER .)
    L_SHIFT         reduce using rule 116 (atomic -> IDENTIFIER .)
    R_SHIFT         reduce using rule 116 (atomic -> IDENTIFIER .)
    AMPERSAND       reduce using rule 116 (atomic -> IDENTIFIER .)
    CARET           reduce using rule 116 (atomic -> IDENTIFIER .)
    PIPE            reduce using rule 116 (atomic -> IDENTIFIER .)
    EQUALITY        reduce using rule 116 (atomic -> IDENTIFIER .)
    INEQUALITY      reduce using rule 116 (atomic -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 116 (atomic -> IDENTIFIER .)
    LESSER_EQUAL    reduce using rule 116 (atomic -> IDENTIFIER .)
    GREATER         reduce using rule 116 (atomic -> IDENTIFIER .)
    LESSER          reduce using rule 116 (atomic -> IDENTIFIER .)
    NOT             reduce using rule 116 (atomic -> IDENTIFIER .)
    IS              reduce using rule 116 (atomic -> IDENTIFIER .)
    IN              reduce using rule 116 (atomic -> IDENTIFIER .)
    AND             reduce using rule 116 (atomic -> IDENTIFIER .)
    OR              reduce using rule 116 (atomic -> IDENTIFIER .)
    IF              reduce using rule 116 (atomic -> IDENTIFIER .)
    R_PARENTHESIS   reduce using rule 116 (atomic -> IDENTIFIER .)
    COMMA           reduce using rule 116 (atomic -> IDENTIFIER .)
    COLON           reduce using rule 116 (atomic -> IDENTIFIER .)
    NEWLINE         reduce using rule 116 (atomic -> IDENTIFIER .)
    R_SQB           reduce using rule 116 (atomic -> IDENTIFIER .)
    R_CB            reduce using rule 116 (atomic -> IDENTIFIER .)
    ELSE            reduce using rule 116 (atomic -> IDENTIFIER .)


state 84

    (45) if_stmt -> IF expression . COLON block elif_stmt
    (46) if_stmt -> IF expression . COLON block else_block
    (47) if_stmt -> IF expression . COLON block

    COLON           shift and go to state 138


state 85

    (38) class_def -> CLASS IDENTIFIER . L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (39) class_def -> CLASS IDENTIFIER . L_PARENTHESIS R_PARENTHESIS COLON block
    (40) class_def -> CLASS IDENTIFIER . COLON block

    L_PARENTHESIS   shift and go to state 139
    COLON           shift and go to state 140


state 86

    (54) for_stmt -> FOR targets . IN expressions COLON else_block
    (55) for_stmt -> FOR targets . IN expressions COLON block
    (144) targets -> targets . COMMA target

    IN              shift and go to state 141
    COMMA           shift and go to state 142


state 87

    (145) targets -> target .

    IN              reduce using rule 145 (targets -> target .)
    COMMA           reduce using rule 145 (targets -> target .)


state 88

    (146) target -> empty .

    IN              reduce using rule 146 (target -> empty .)
    COMMA           reduce using rule 146 (target -> empty .)


state 89

    (56) expressions -> expressions COMMA . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 143
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 90

    (52) while_stmt -> WHILE expression . COLON block else_block
    (53) while_stmt -> WHILE expression . COLON block

    COLON           shift and go to state 144


state 91

    (31) return_stmt -> RETURN expressions .
    (56) expressions -> expressions . COMMA expression

    NEWLINE         reduce using rule 31 (return_stmt -> RETURN expressions .)
    COMMA           shift and go to state 89


state 92

    (33) del_stmt -> DEL namelist .
    (34) namelist -> namelist . COMMA IDENTIFIER

    NEWLINE         reduce using rule 33 (del_stmt -> DEL namelist .)
    COMMA           shift and go to state 145


state 93

    (35) namelist -> IDENTIFIER .

    COMMA           reduce using rule 35 (namelist -> IDENTIFIER .)
    NEWLINE         reduce using rule 35 (namelist -> IDENTIFIER .)


state 94

    (32) global_stmt -> GLOBAL namelist .
    (34) namelist -> namelist . COMMA IDENTIFIER

    NEWLINE         reduce using rule 32 (global_stmt -> GLOBAL namelist .)
    COMMA           shift and go to state 145


state 95

    (58) expression -> disjunction IF . disjunction ELSE expression
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    disjunction                    shift and go to state 146
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 96

    (60) disjunction -> conjunction OR . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    conjunction                    shift and go to state 33
    disjunction                    shift and go to state 147
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 97

    (62) conjunction -> inversion AND . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    inversion                      shift and go to state 148
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 98

    (64) inversion -> NOT inversion .

    AND             reduce using rule 64 (inversion -> NOT inversion .)
    OR              reduce using rule 64 (inversion -> NOT inversion .)
    IF              reduce using rule 64 (inversion -> NOT inversion .)
    COMMA           reduce using rule 64 (inversion -> NOT inversion .)
    NEWLINE         reduce using rule 64 (inversion -> NOT inversion .)
    R_PARENTHESIS   reduce using rule 64 (inversion -> NOT inversion .)
    COLON           reduce using rule 64 (inversion -> NOT inversion .)
    R_SQB           reduce using rule 64 (inversion -> NOT inversion .)
    R_CB            reduce using rule 64 (inversion -> NOT inversion .)
    ELSE            reduce using rule 64 (inversion -> NOT inversion .)


state 99

    (66) comparison -> bitwise_or compare_op_list .
    (68) compare_op_list -> compare_op_list . compare_op
    (70) compare_op -> . EQUALITY bitwise_or
    (71) compare_op -> . INEQUALITY bitwise_or
    (72) compare_op -> . GREATER_EQUAL bitwise_or
    (73) compare_op -> . LESSER_EQUAL bitwise_or
    (74) compare_op -> . GREATER bitwise_or
    (75) compare_op -> . LESSER bitwise_or
    (76) compare_op -> . NOT IN bitwise_or
    (77) compare_op -> . IS NOT bitwise_or
    (78) compare_op -> . IN bitwise_or
    (79) compare_op -> . IS bitwise_or

    AND             reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    OR              reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    IF              reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    COMMA           reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    NEWLINE         reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    R_PARENTHESIS   reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    COLON           reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    R_SQB           reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    R_CB            reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    ELSE            reduce using rule 66 (comparison -> bitwise_or compare_op_list .)
    EQUALITY        shift and go to state 102
    INEQUALITY      shift and go to state 103
    GREATER_EQUAL   shift and go to state 104
    LESSER_EQUAL    shift and go to state 105
    GREATER         shift and go to state 106
    LESSER          shift and go to state 107
    NOT             shift and go to state 108
    IS              shift and go to state 110
    IN              shift and go to state 109

    compare_op                     shift and go to state 149

state 100

    (80) bitwise_or -> bitwise_or PIPE . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_xor                    shift and go to state 150
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 101

    (69) compare_op_list -> compare_op .

    EQUALITY        reduce using rule 69 (compare_op_list -> compare_op .)
    INEQUALITY      reduce using rule 69 (compare_op_list -> compare_op .)
    GREATER_EQUAL   reduce using rule 69 (compare_op_list -> compare_op .)
    LESSER_EQUAL    reduce using rule 69 (compare_op_list -> compare_op .)
    GREATER         reduce using rule 69 (compare_op_list -> compare_op .)
    LESSER          reduce using rule 69 (compare_op_list -> compare_op .)
    NOT             reduce using rule 69 (compare_op_list -> compare_op .)
    IS              reduce using rule 69 (compare_op_list -> compare_op .)
    IN              reduce using rule 69 (compare_op_list -> compare_op .)
    AND             reduce using rule 69 (compare_op_list -> compare_op .)
    OR              reduce using rule 69 (compare_op_list -> compare_op .)
    IF              reduce using rule 69 (compare_op_list -> compare_op .)
    COMMA           reduce using rule 69 (compare_op_list -> compare_op .)
    NEWLINE         reduce using rule 69 (compare_op_list -> compare_op .)
    R_PARENTHESIS   reduce using rule 69 (compare_op_list -> compare_op .)
    COLON           reduce using rule 69 (compare_op_list -> compare_op .)
    R_SQB           reduce using rule 69 (compare_op_list -> compare_op .)
    R_CB            reduce using rule 69 (compare_op_list -> compare_op .)
    ELSE            reduce using rule 69 (compare_op_list -> compare_op .)


state 102

    (70) compare_op -> EQUALITY . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 151
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 103

    (71) compare_op -> INEQUALITY . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 152
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 104

    (72) compare_op -> GREATER_EQUAL . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 153
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 105

    (73) compare_op -> LESSER_EQUAL . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 154
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 106

    (74) compare_op -> GREATER . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 155
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 107

    (75) compare_op -> LESSER . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 156
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 108

    (76) compare_op -> NOT . IN bitwise_or

    IN              shift and go to state 157


state 109

    (78) compare_op -> IN . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 158
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 110

    (77) compare_op -> IS . NOT bitwise_or
    (79) compare_op -> IS . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 159
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 160
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 111

    (82) bitwise_xor -> bitwise_xor CARET . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_and                    shift and go to state 161
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 112

    (84) bitwise_and -> bitwise_and AMPERSAND . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    shift_expr                     shift and go to state 162
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 113

    (86) shift_expr -> shift_expr L_SHIFT . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    sum                            shift and go to state 163
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 114

    (87) shift_expr -> shift_expr R_SHIFT . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    sum                            shift and go to state 164
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 115

    (89) sum -> sum PLUS . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    term                           shift and go to state 165
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 116

    (90) sum -> sum MINUS . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    term                           shift and go to state 166
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 117

    (97) factor -> PLUS factor .

    STAR            reduce using rule 97 (factor -> PLUS factor .)
    SLASH           reduce using rule 97 (factor -> PLUS factor .)
    DOUBLE_SLASH    reduce using rule 97 (factor -> PLUS factor .)
    PERCENT         reduce using rule 97 (factor -> PLUS factor .)
    PLUS            reduce using rule 97 (factor -> PLUS factor .)
    MINUS           reduce using rule 97 (factor -> PLUS factor .)
    L_SHIFT         reduce using rule 97 (factor -> PLUS factor .)
    R_SHIFT         reduce using rule 97 (factor -> PLUS factor .)
    AMPERSAND       reduce using rule 97 (factor -> PLUS factor .)
    CARET           reduce using rule 97 (factor -> PLUS factor .)
    PIPE            reduce using rule 97 (factor -> PLUS factor .)
    EQUALITY        reduce using rule 97 (factor -> PLUS factor .)
    INEQUALITY      reduce using rule 97 (factor -> PLUS factor .)
    GREATER_EQUAL   reduce using rule 97 (factor -> PLUS factor .)
    LESSER_EQUAL    reduce using rule 97 (factor -> PLUS factor .)
    GREATER         reduce using rule 97 (factor -> PLUS factor .)
    LESSER          reduce using rule 97 (factor -> PLUS factor .)
    NOT             reduce using rule 97 (factor -> PLUS factor .)
    IS              reduce using rule 97 (factor -> PLUS factor .)
    IN              reduce using rule 97 (factor -> PLUS factor .)
    AND             reduce using rule 97 (factor -> PLUS factor .)
    OR              reduce using rule 97 (factor -> PLUS factor .)
    IF              reduce using rule 97 (factor -> PLUS factor .)
    COMMA           reduce using rule 97 (factor -> PLUS factor .)
    NEWLINE         reduce using rule 97 (factor -> PLUS factor .)
    R_PARENTHESIS   reduce using rule 97 (factor -> PLUS factor .)
    COLON           reduce using rule 97 (factor -> PLUS factor .)
    R_SQB           reduce using rule 97 (factor -> PLUS factor .)
    R_CB            reduce using rule 97 (factor -> PLUS factor .)
    ELSE            reduce using rule 97 (factor -> PLUS factor .)


state 118

    (92) term -> term STAR . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    factor                         shift and go to state 167
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 119

    (93) term -> term SLASH . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    factor                         shift and go to state 168
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 120

    (94) term -> term DOUBLE_SLASH . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    factor                         shift and go to state 169
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 121

    (95) term -> term PERCENT . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    factor                         shift and go to state 170
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 122

    (98) factor -> MINUS factor .

    STAR            reduce using rule 98 (factor -> MINUS factor .)
    SLASH           reduce using rule 98 (factor -> MINUS factor .)
    DOUBLE_SLASH    reduce using rule 98 (factor -> MINUS factor .)
    PERCENT         reduce using rule 98 (factor -> MINUS factor .)
    PLUS            reduce using rule 98 (factor -> MINUS factor .)
    MINUS           reduce using rule 98 (factor -> MINUS factor .)
    L_SHIFT         reduce using rule 98 (factor -> MINUS factor .)
    R_SHIFT         reduce using rule 98 (factor -> MINUS factor .)
    AMPERSAND       reduce using rule 98 (factor -> MINUS factor .)
    CARET           reduce using rule 98 (factor -> MINUS factor .)
    PIPE            reduce using rule 98 (factor -> MINUS factor .)
    EQUALITY        reduce using rule 98 (factor -> MINUS factor .)
    INEQUALITY      reduce using rule 98 (factor -> MINUS factor .)
    GREATER_EQUAL   reduce using rule 98 (factor -> MINUS factor .)
    LESSER_EQUAL    reduce using rule 98 (factor -> MINUS factor .)
    GREATER         reduce using rule 98 (factor -> MINUS factor .)
    LESSER          reduce using rule 98 (factor -> MINUS factor .)
    NOT             reduce using rule 98 (factor -> MINUS factor .)
    IS              reduce using rule 98 (factor -> MINUS factor .)
    IN              reduce using rule 98 (factor -> MINUS factor .)
    AND             reduce using rule 98 (factor -> MINUS factor .)
    OR              reduce using rule 98 (factor -> MINUS factor .)
    IF              reduce using rule 98 (factor -> MINUS factor .)
    COMMA           reduce using rule 98 (factor -> MINUS factor .)
    NEWLINE         reduce using rule 98 (factor -> MINUS factor .)
    R_PARENTHESIS   reduce using rule 98 (factor -> MINUS factor .)
    COLON           reduce using rule 98 (factor -> MINUS factor .)
    R_SQB           reduce using rule 98 (factor -> MINUS factor .)
    R_CB            reduce using rule 98 (factor -> MINUS factor .)
    ELSE            reduce using rule 98 (factor -> MINUS factor .)


state 123

    (100) power -> primary DOUBLE_STAR . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    primary                        shift and go to state 47
    factor                         shift and go to state 171
    power                          shift and go to state 46
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 124

    (102) primary -> primary L_PARENTHESIS . arguments R_PARENTHESIS
    (103) primary -> primary L_PARENTHESIS . R_PARENTHESIS
    (131) arguments -> . expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    R_PARENTHESIS   shift and go to state 173
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    primary                        shift and go to state 47
    arguments                      shift and go to state 172
    expressions                    shift and go to state 174
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 125

    (104) primary -> primary L_SQB . slices R_SQB
    (107) slices -> . slices COMMA slice
    (108) slices -> . slice
    (109) slice -> . expression COLON expression COLON expression
    (110) slice -> . expression COLON expression
    (111) slice -> . expression COLON
    (112) slice -> . COLON expression
    (113) slice -> . COLON COLON
    (114) slice -> . COLON
    (115) slice -> . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    COLON           shift and go to state 178
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    primary                        shift and go to state 47
    slices                         shift and go to state 175
    slice                          shift and go to state 176
    expression                     shift and go to state 177
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 126

    (105) primary -> primary DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 179


state 127

    (134) list -> L_SQB expressions . R_SQB
    (56) expressions -> expressions . COMMA expression

    R_SQB           shift and go to state 180
    COMMA           shift and go to state 89


state 128

    (135) list -> L_SQB R_SQB .

    DOUBLE_STAR     reduce using rule 135 (list -> L_SQB R_SQB .)
    L_PARENTHESIS   reduce using rule 135 (list -> L_SQB R_SQB .)
    L_SQB           reduce using rule 135 (list -> L_SQB R_SQB .)
    DOT             reduce using rule 135 (list -> L_SQB R_SQB .)
    STAR            reduce using rule 135 (list -> L_SQB R_SQB .)
    SLASH           reduce using rule 135 (list -> L_SQB R_SQB .)
    DOUBLE_SLASH    reduce using rule 135 (list -> L_SQB R_SQB .)
    PERCENT         reduce using rule 135 (list -> L_SQB R_SQB .)
    PLUS            reduce using rule 135 (list -> L_SQB R_SQB .)
    MINUS           reduce using rule 135 (list -> L_SQB R_SQB .)
    L_SHIFT         reduce using rule 135 (list -> L_SQB R_SQB .)
    R_SHIFT         reduce using rule 135 (list -> L_SQB R_SQB .)
    AMPERSAND       reduce using rule 135 (list -> L_SQB R_SQB .)
    CARET           reduce using rule 135 (list -> L_SQB R_SQB .)
    PIPE            reduce using rule 135 (list -> L_SQB R_SQB .)
    EQUALITY        reduce using rule 135 (list -> L_SQB R_SQB .)
    INEQUALITY      reduce using rule 135 (list -> L_SQB R_SQB .)
    GREATER_EQUAL   reduce using rule 135 (list -> L_SQB R_SQB .)
    LESSER_EQUAL    reduce using rule 135 (list -> L_SQB R_SQB .)
    GREATER         reduce using rule 135 (list -> L_SQB R_SQB .)
    LESSER          reduce using rule 135 (list -> L_SQB R_SQB .)
    NOT             reduce using rule 135 (list -> L_SQB R_SQB .)
    IS              reduce using rule 135 (list -> L_SQB R_SQB .)
    IN              reduce using rule 135 (list -> L_SQB R_SQB .)
    AND             reduce using rule 135 (list -> L_SQB R_SQB .)
    OR              reduce using rule 135 (list -> L_SQB R_SQB .)
    IF              reduce using rule 135 (list -> L_SQB R_SQB .)
    COMMA           reduce using rule 135 (list -> L_SQB R_SQB .)
    NEWLINE         reduce using rule 135 (list -> L_SQB R_SQB .)
    R_PARENTHESIS   reduce using rule 135 (list -> L_SQB R_SQB .)
    COLON           reduce using rule 135 (list -> L_SQB R_SQB .)
    R_SQB           reduce using rule 135 (list -> L_SQB R_SQB .)
    R_CB            reduce using rule 135 (list -> L_SQB R_SQB .)
    ELSE            reduce using rule 135 (list -> L_SQB R_SQB .)


state 129

    (139) dict -> L_CB kvpairs . R_CB
    (141) kvpairs -> kvpairs . COMMA kvpair

    R_CB            shift and go to state 181
    COMMA           shift and go to state 182


state 130

    (140) dict -> L_CB R_CB .

    DOUBLE_STAR     reduce using rule 140 (dict -> L_CB R_CB .)
    L_PARENTHESIS   reduce using rule 140 (dict -> L_CB R_CB .)
    L_SQB           reduce using rule 140 (dict -> L_CB R_CB .)
    DOT             reduce using rule 140 (dict -> L_CB R_CB .)
    STAR            reduce using rule 140 (dict -> L_CB R_CB .)
    SLASH           reduce using rule 140 (dict -> L_CB R_CB .)
    DOUBLE_SLASH    reduce using rule 140 (dict -> L_CB R_CB .)
    PERCENT         reduce using rule 140 (dict -> L_CB R_CB .)
    PLUS            reduce using rule 140 (dict -> L_CB R_CB .)
    MINUS           reduce using rule 140 (dict -> L_CB R_CB .)
    L_SHIFT         reduce using rule 140 (dict -> L_CB R_CB .)
    R_SHIFT         reduce using rule 140 (dict -> L_CB R_CB .)
    AMPERSAND       reduce using rule 140 (dict -> L_CB R_CB .)
    CARET           reduce using rule 140 (dict -> L_CB R_CB .)
    PIPE            reduce using rule 140 (dict -> L_CB R_CB .)
    EQUALITY        reduce using rule 140 (dict -> L_CB R_CB .)
    INEQUALITY      reduce using rule 140 (dict -> L_CB R_CB .)
    GREATER_EQUAL   reduce using rule 140 (dict -> L_CB R_CB .)
    LESSER_EQUAL    reduce using rule 140 (dict -> L_CB R_CB .)
    GREATER         reduce using rule 140 (dict -> L_CB R_CB .)
    LESSER          reduce using rule 140 (dict -> L_CB R_CB .)
    NOT             reduce using rule 140 (dict -> L_CB R_CB .)
    IS              reduce using rule 140 (dict -> L_CB R_CB .)
    IN              reduce using rule 140 (dict -> L_CB R_CB .)
    AND             reduce using rule 140 (dict -> L_CB R_CB .)
    OR              reduce using rule 140 (dict -> L_CB R_CB .)
    IF              reduce using rule 140 (dict -> L_CB R_CB .)
    COMMA           reduce using rule 140 (dict -> L_CB R_CB .)
    NEWLINE         reduce using rule 140 (dict -> L_CB R_CB .)
    R_PARENTHESIS   reduce using rule 140 (dict -> L_CB R_CB .)
    COLON           reduce using rule 140 (dict -> L_CB R_CB .)
    R_SQB           reduce using rule 140 (dict -> L_CB R_CB .)
    R_CB            reduce using rule 140 (dict -> L_CB R_CB .)
    ELSE            reduce using rule 140 (dict -> L_CB R_CB .)


state 131

    (138) set -> L_CB expressions . R_CB
    (56) expressions -> expressions . COMMA expression

    R_CB            shift and go to state 183
    COMMA           shift and go to state 89


state 132

    (142) kvpairs -> kvpair .

    R_CB            reduce using rule 142 (kvpairs -> kvpair .)
    COMMA           reduce using rule 142 (kvpairs -> kvpair .)


state 133

    (57) expressions -> expression .
    (143) kvpair -> expression . COLON expression

    R_CB            reduce using rule 57 (expressions -> expression .)
    COMMA           reduce using rule 57 (expressions -> expression .)
    COLON           shift and go to state 184


state 134

    (7) simple_stmts -> simple_stmts SEMICOLON simple_stmt . NEWLINE

    NEWLINE         shift and go to state 185


state 135

    (41) function_def -> DEF IDENTIFIER L_PARENTHESIS . parameters R_PARENTHESIS COLON block
    (42) function_def -> DEF IDENTIFIER L_PARENTHESIS . R_PARENTHESIS COLON block
    (43) parameters -> . parameters COMMA IDENTIFIER
    (44) parameters -> . IDENTIFIER

    R_PARENTHESIS   shift and go to state 188
    IDENTIFIER      shift and go to state 186

    parameters                     shift and go to state 187

state 136

    (22) assignment -> IDENTIFIER augmentation_assignment expressions .
    (56) expressions -> expressions . COMMA expression

    NEWLINE         reduce using rule 22 (assignment -> IDENTIFIER augmentation_assignment expressions .)
    COMMA           shift and go to state 89


state 137

    (136) tuple -> L_PARENTHESIS expressions R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    L_SQB           reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    DOT             reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    STAR            reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    SLASH           reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    PERCENT         reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    PLUS            reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    MINUS           reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    L_SHIFT         reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    R_SHIFT         reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    AMPERSAND       reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    CARET           reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    PIPE            reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    EQUALITY        reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    INEQUALITY      reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    GREATER         reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    LESSER          reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    NOT             reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    IS              reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    IN              reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    AND             reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    OR              reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    IF              reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    COMMA           reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    NEWLINE         reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    COLON           reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    R_SQB           reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    R_CB            reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)
    ELSE            reduce using rule 136 (tuple -> L_PARENTHESIS expressions R_PARENTHESIS .)


state 138

    (45) if_stmt -> IF expression COLON . block elif_stmt
    (46) if_stmt -> IF expression COLON . block else_block
    (47) if_stmt -> IF expression COLON . block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 17
    block                          shift and go to state 189
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 139

    (38) class_def -> CLASS IDENTIFIER L_PARENTHESIS . arguments R_PARENTHESIS COLON block
    (39) class_def -> CLASS IDENTIFIER L_PARENTHESIS . R_PARENTHESIS COLON block
    (131) arguments -> . expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    R_PARENTHESIS   shift and go to state 193
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    arguments                      shift and go to state 192
    expressions                    shift and go to state 174
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 140

    (40) class_def -> CLASS IDENTIFIER COLON . block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    block                          shift and go to state 194
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 141

    (54) for_stmt -> FOR targets IN . expressions COLON else_block
    (55) for_stmt -> FOR targets IN . expressions COLON block
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expressions                    shift and go to state 195
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 142

    (144) targets -> targets COMMA . target
    (146) target -> . empty
    (147) empty -> .

    IN              reduce using rule 147 (empty -> .)
    COMMA           reduce using rule 147 (empty -> .)

    target                         shift and go to state 196
    empty                          shift and go to state 88

state 143

    (56) expressions -> expressions COMMA expression .

    COMMA           reduce using rule 56 (expressions -> expressions COMMA expression .)
    NEWLINE         reduce using rule 56 (expressions -> expressions COMMA expression .)
    R_PARENTHESIS   reduce using rule 56 (expressions -> expressions COMMA expression .)
    R_SQB           reduce using rule 56 (expressions -> expressions COMMA expression .)
    R_CB            reduce using rule 56 (expressions -> expressions COMMA expression .)
    COLON           reduce using rule 56 (expressions -> expressions COMMA expression .)


state 144

    (52) while_stmt -> WHILE expression COLON . block else_block
    (53) while_stmt -> WHILE expression COLON . block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 17
    block                          shift and go to state 197
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 145

    (34) namelist -> namelist COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 198


state 146

    (58) expression -> disjunction IF disjunction . ELSE expression

    ELSE            shift and go to state 199


state 147

    (60) disjunction -> conjunction OR disjunction .

    IF              reduce using rule 60 (disjunction -> conjunction OR disjunction .)
    COMMA           reduce using rule 60 (disjunction -> conjunction OR disjunction .)
    NEWLINE         reduce using rule 60 (disjunction -> conjunction OR disjunction .)
    R_PARENTHESIS   reduce using rule 60 (disjunction -> conjunction OR disjunction .)
    COLON           reduce using rule 60 (disjunction -> conjunction OR disjunction .)
    R_SQB           reduce using rule 60 (disjunction -> conjunction OR disjunction .)
    R_CB            reduce using rule 60 (disjunction -> conjunction OR disjunction .)
    ELSE            reduce using rule 60 (disjunction -> conjunction OR disjunction .)


state 148

    (62) conjunction -> inversion AND inversion .

    OR              reduce using rule 62 (conjunction -> inversion AND inversion .)
    IF              reduce using rule 62 (conjunction -> inversion AND inversion .)
    COMMA           reduce using rule 62 (conjunction -> inversion AND inversion .)
    NEWLINE         reduce using rule 62 (conjunction -> inversion AND inversion .)
    R_PARENTHESIS   reduce using rule 62 (conjunction -> inversion AND inversion .)
    COLON           reduce using rule 62 (conjunction -> inversion AND inversion .)
    R_SQB           reduce using rule 62 (conjunction -> inversion AND inversion .)
    R_CB            reduce using rule 62 (conjunction -> inversion AND inversion .)
    ELSE            reduce using rule 62 (conjunction -> inversion AND inversion .)


state 149

    (68) compare_op_list -> compare_op_list compare_op .

    EQUALITY        reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    INEQUALITY      reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    GREATER_EQUAL   reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    LESSER_EQUAL    reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    GREATER         reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    LESSER          reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    NOT             reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    IS              reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    IN              reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    AND             reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    OR              reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    IF              reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    COMMA           reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    NEWLINE         reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    R_PARENTHESIS   reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    COLON           reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    R_SQB           reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    R_CB            reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)
    ELSE            reduce using rule 68 (compare_op_list -> compare_op_list compare_op .)


state 150

    (80) bitwise_or -> bitwise_or PIPE bitwise_xor .
    (82) bitwise_xor -> bitwise_xor . CARET bitwise_and

    PIPE            reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    EQUALITY        reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    INEQUALITY      reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    GREATER_EQUAL   reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    LESSER_EQUAL    reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    GREATER         reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    LESSER          reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    NOT             reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    IS              reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    IN              reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    AND             reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    OR              reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    IF              reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    COMMA           reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    NEWLINE         reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    R_PARENTHESIS   reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    COLON           reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    R_SQB           reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    R_CB            reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    ELSE            reduce using rule 80 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    CARET           shift and go to state 111


state 151

    (70) compare_op -> EQUALITY bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    INEQUALITY      reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    GREATER_EQUAL   reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    LESSER_EQUAL    reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    GREATER         reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    LESSER          reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    NOT             reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    IS              reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    IN              reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    AND             reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    OR              reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    IF              reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    COMMA           reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    NEWLINE         reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    R_PARENTHESIS   reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    COLON           reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    R_SQB           reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    R_CB            reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    ELSE            reduce using rule 70 (compare_op -> EQUALITY bitwise_or .)
    PIPE            shift and go to state 100


state 152

    (71) compare_op -> INEQUALITY bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    INEQUALITY      reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    GREATER_EQUAL   reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    LESSER_EQUAL    reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    GREATER         reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    LESSER          reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    NOT             reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    IS              reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    IN              reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    AND             reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    OR              reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    IF              reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    COMMA           reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    NEWLINE         reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    R_PARENTHESIS   reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    COLON           reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    R_SQB           reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    R_CB            reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    ELSE            reduce using rule 71 (compare_op -> INEQUALITY bitwise_or .)
    PIPE            shift and go to state 100


state 153

    (72) compare_op -> GREATER_EQUAL bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    INEQUALITY      reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    GREATER_EQUAL   reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    LESSER_EQUAL    reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    GREATER         reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    LESSER          reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    NOT             reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    IS              reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    IN              reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    AND             reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    OR              reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    IF              reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    COMMA           reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    NEWLINE         reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    R_PARENTHESIS   reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    COLON           reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    R_SQB           reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    R_CB            reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    ELSE            reduce using rule 72 (compare_op -> GREATER_EQUAL bitwise_or .)
    PIPE            shift and go to state 100


state 154

    (73) compare_op -> LESSER_EQUAL bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    INEQUALITY      reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    GREATER_EQUAL   reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    LESSER_EQUAL    reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    GREATER         reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    LESSER          reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    NOT             reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    IS              reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    IN              reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    AND             reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    OR              reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    IF              reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    COMMA           reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    NEWLINE         reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    R_PARENTHESIS   reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    COLON           reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    R_SQB           reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    R_CB            reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    ELSE            reduce using rule 73 (compare_op -> LESSER_EQUAL bitwise_or .)
    PIPE            shift and go to state 100


state 155

    (74) compare_op -> GREATER bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    INEQUALITY      reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    GREATER_EQUAL   reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    LESSER_EQUAL    reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    GREATER         reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    LESSER          reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    NOT             reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    IS              reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    IN              reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    AND             reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    OR              reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    IF              reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    COMMA           reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    NEWLINE         reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    R_PARENTHESIS   reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    COLON           reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    R_SQB           reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    R_CB            reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    ELSE            reduce using rule 74 (compare_op -> GREATER bitwise_or .)
    PIPE            shift and go to state 100


state 156

    (75) compare_op -> LESSER bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    INEQUALITY      reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    GREATER_EQUAL   reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    LESSER_EQUAL    reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    GREATER         reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    LESSER          reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    NOT             reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    IS              reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    IN              reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    AND             reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    OR              reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    IF              reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    COMMA           reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    NEWLINE         reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    R_PARENTHESIS   reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    COLON           reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    R_SQB           reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    R_CB            reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    ELSE            reduce using rule 75 (compare_op -> LESSER bitwise_or .)
    PIPE            shift and go to state 100


state 157

    (76) compare_op -> NOT IN . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 200
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 158

    (78) compare_op -> IN bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 78 (compare_op -> IN bitwise_or .)
    INEQUALITY      reduce using rule 78 (compare_op -> IN bitwise_or .)
    GREATER_EQUAL   reduce using rule 78 (compare_op -> IN bitwise_or .)
    LESSER_EQUAL    reduce using rule 78 (compare_op -> IN bitwise_or .)
    GREATER         reduce using rule 78 (compare_op -> IN bitwise_or .)
    LESSER          reduce using rule 78 (compare_op -> IN bitwise_or .)
    NOT             reduce using rule 78 (compare_op -> IN bitwise_or .)
    IS              reduce using rule 78 (compare_op -> IN bitwise_or .)
    IN              reduce using rule 78 (compare_op -> IN bitwise_or .)
    AND             reduce using rule 78 (compare_op -> IN bitwise_or .)
    OR              reduce using rule 78 (compare_op -> IN bitwise_or .)
    IF              reduce using rule 78 (compare_op -> IN bitwise_or .)
    COMMA           reduce using rule 78 (compare_op -> IN bitwise_or .)
    NEWLINE         reduce using rule 78 (compare_op -> IN bitwise_or .)
    R_PARENTHESIS   reduce using rule 78 (compare_op -> IN bitwise_or .)
    COLON           reduce using rule 78 (compare_op -> IN bitwise_or .)
    R_SQB           reduce using rule 78 (compare_op -> IN bitwise_or .)
    R_CB            reduce using rule 78 (compare_op -> IN bitwise_or .)
    ELSE            reduce using rule 78 (compare_op -> IN bitwise_or .)
    PIPE            shift and go to state 100


state 159

    (77) compare_op -> IS NOT . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    bitwise_or                     shift and go to state 201
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 160

    (79) compare_op -> IS bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 79 (compare_op -> IS bitwise_or .)
    INEQUALITY      reduce using rule 79 (compare_op -> IS bitwise_or .)
    GREATER_EQUAL   reduce using rule 79 (compare_op -> IS bitwise_or .)
    LESSER_EQUAL    reduce using rule 79 (compare_op -> IS bitwise_or .)
    GREATER         reduce using rule 79 (compare_op -> IS bitwise_or .)
    LESSER          reduce using rule 79 (compare_op -> IS bitwise_or .)
    NOT             reduce using rule 79 (compare_op -> IS bitwise_or .)
    IS              reduce using rule 79 (compare_op -> IS bitwise_or .)
    IN              reduce using rule 79 (compare_op -> IS bitwise_or .)
    AND             reduce using rule 79 (compare_op -> IS bitwise_or .)
    OR              reduce using rule 79 (compare_op -> IS bitwise_or .)
    IF              reduce using rule 79 (compare_op -> IS bitwise_or .)
    COMMA           reduce using rule 79 (compare_op -> IS bitwise_or .)
    NEWLINE         reduce using rule 79 (compare_op -> IS bitwise_or .)
    R_PARENTHESIS   reduce using rule 79 (compare_op -> IS bitwise_or .)
    COLON           reduce using rule 79 (compare_op -> IS bitwise_or .)
    R_SQB           reduce using rule 79 (compare_op -> IS bitwise_or .)
    R_CB            reduce using rule 79 (compare_op -> IS bitwise_or .)
    ELSE            reduce using rule 79 (compare_op -> IS bitwise_or .)
    PIPE            shift and go to state 100


state 161

    (82) bitwise_xor -> bitwise_xor CARET bitwise_and .
    (84) bitwise_and -> bitwise_and . AMPERSAND shift_expr

    CARET           reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    PIPE            reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    EQUALITY        reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    INEQUALITY      reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    GREATER_EQUAL   reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    LESSER_EQUAL    reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    GREATER         reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    LESSER          reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    NOT             reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    IS              reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    IN              reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    AND             reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    OR              reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    IF              reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    COMMA           reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    NEWLINE         reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    R_PARENTHESIS   reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    COLON           reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    R_SQB           reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    R_CB            reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    ELSE            reduce using rule 82 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    AMPERSAND       shift and go to state 112


state 162

    (84) bitwise_and -> bitwise_and AMPERSAND shift_expr .
    (86) shift_expr -> shift_expr . L_SHIFT sum
    (87) shift_expr -> shift_expr . R_SHIFT sum

    AMPERSAND       reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    CARET           reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    PIPE            reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    EQUALITY        reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    INEQUALITY      reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    GREATER_EQUAL   reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    LESSER_EQUAL    reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    GREATER         reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    LESSER          reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    NOT             reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    IS              reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    IN              reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    AND             reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    OR              reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    IF              reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    COMMA           reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    NEWLINE         reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    R_PARENTHESIS   reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    COLON           reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    R_SQB           reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    R_CB            reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    ELSE            reduce using rule 84 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    L_SHIFT         shift and go to state 113
    R_SHIFT         shift and go to state 114


state 163

    (86) shift_expr -> shift_expr L_SHIFT sum .
    (89) sum -> sum . PLUS term
    (90) sum -> sum . MINUS term

    L_SHIFT         reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    R_SHIFT         reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    AMPERSAND       reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    CARET           reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    PIPE            reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    EQUALITY        reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    INEQUALITY      reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    GREATER_EQUAL   reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    LESSER_EQUAL    reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    GREATER         reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    LESSER          reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    NOT             reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    IS              reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    IN              reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    AND             reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    OR              reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    IF              reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    COMMA           reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    NEWLINE         reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    R_PARENTHESIS   reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    COLON           reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    R_SQB           reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    R_CB            reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    ELSE            reduce using rule 86 (shift_expr -> shift_expr L_SHIFT sum .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116


state 164

    (87) shift_expr -> shift_expr R_SHIFT sum .
    (89) sum -> sum . PLUS term
    (90) sum -> sum . MINUS term

    L_SHIFT         reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    R_SHIFT         reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    AMPERSAND       reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    CARET           reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    PIPE            reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    EQUALITY        reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    INEQUALITY      reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    GREATER_EQUAL   reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    LESSER_EQUAL    reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    GREATER         reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    LESSER          reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    NOT             reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    IS              reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    IN              reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    AND             reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    OR              reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    IF              reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    COMMA           reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    NEWLINE         reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    R_PARENTHESIS   reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    COLON           reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    R_SQB           reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    R_CB            reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    ELSE            reduce using rule 87 (shift_expr -> shift_expr R_SHIFT sum .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116


state 165

    (89) sum -> sum PLUS term .
    (92) term -> term . STAR factor
    (93) term -> term . SLASH factor
    (94) term -> term . DOUBLE_SLASH factor
    (95) term -> term . PERCENT factor

    PLUS            reduce using rule 89 (sum -> sum PLUS term .)
    MINUS           reduce using rule 89 (sum -> sum PLUS term .)
    L_SHIFT         reduce using rule 89 (sum -> sum PLUS term .)
    R_SHIFT         reduce using rule 89 (sum -> sum PLUS term .)
    AMPERSAND       reduce using rule 89 (sum -> sum PLUS term .)
    CARET           reduce using rule 89 (sum -> sum PLUS term .)
    PIPE            reduce using rule 89 (sum -> sum PLUS term .)
    EQUALITY        reduce using rule 89 (sum -> sum PLUS term .)
    INEQUALITY      reduce using rule 89 (sum -> sum PLUS term .)
    GREATER_EQUAL   reduce using rule 89 (sum -> sum PLUS term .)
    LESSER_EQUAL    reduce using rule 89 (sum -> sum PLUS term .)
    GREATER         reduce using rule 89 (sum -> sum PLUS term .)
    LESSER          reduce using rule 89 (sum -> sum PLUS term .)
    NOT             reduce using rule 89 (sum -> sum PLUS term .)
    IS              reduce using rule 89 (sum -> sum PLUS term .)
    IN              reduce using rule 89 (sum -> sum PLUS term .)
    AND             reduce using rule 89 (sum -> sum PLUS term .)
    OR              reduce using rule 89 (sum -> sum PLUS term .)
    IF              reduce using rule 89 (sum -> sum PLUS term .)
    COMMA           reduce using rule 89 (sum -> sum PLUS term .)
    NEWLINE         reduce using rule 89 (sum -> sum PLUS term .)
    R_PARENTHESIS   reduce using rule 89 (sum -> sum PLUS term .)
    COLON           reduce using rule 89 (sum -> sum PLUS term .)
    R_SQB           reduce using rule 89 (sum -> sum PLUS term .)
    R_CB            reduce using rule 89 (sum -> sum PLUS term .)
    ELSE            reduce using rule 89 (sum -> sum PLUS term .)
    STAR            shift and go to state 118
    SLASH           shift and go to state 119
    DOUBLE_SLASH    shift and go to state 120
    PERCENT         shift and go to state 121


state 166

    (90) sum -> sum MINUS term .
    (92) term -> term . STAR factor
    (93) term -> term . SLASH factor
    (94) term -> term . DOUBLE_SLASH factor
    (95) term -> term . PERCENT factor

    PLUS            reduce using rule 90 (sum -> sum MINUS term .)
    MINUS           reduce using rule 90 (sum -> sum MINUS term .)
    L_SHIFT         reduce using rule 90 (sum -> sum MINUS term .)
    R_SHIFT         reduce using rule 90 (sum -> sum MINUS term .)
    AMPERSAND       reduce using rule 90 (sum -> sum MINUS term .)
    CARET           reduce using rule 90 (sum -> sum MINUS term .)
    PIPE            reduce using rule 90 (sum -> sum MINUS term .)
    EQUALITY        reduce using rule 90 (sum -> sum MINUS term .)
    INEQUALITY      reduce using rule 90 (sum -> sum MINUS term .)
    GREATER_EQUAL   reduce using rule 90 (sum -> sum MINUS term .)
    LESSER_EQUAL    reduce using rule 90 (sum -> sum MINUS term .)
    GREATER         reduce using rule 90 (sum -> sum MINUS term .)
    LESSER          reduce using rule 90 (sum -> sum MINUS term .)
    NOT             reduce using rule 90 (sum -> sum MINUS term .)
    IS              reduce using rule 90 (sum -> sum MINUS term .)
    IN              reduce using rule 90 (sum -> sum MINUS term .)
    AND             reduce using rule 90 (sum -> sum MINUS term .)
    OR              reduce using rule 90 (sum -> sum MINUS term .)
    IF              reduce using rule 90 (sum -> sum MINUS term .)
    COMMA           reduce using rule 90 (sum -> sum MINUS term .)
    NEWLINE         reduce using rule 90 (sum -> sum MINUS term .)
    R_PARENTHESIS   reduce using rule 90 (sum -> sum MINUS term .)
    COLON           reduce using rule 90 (sum -> sum MINUS term .)
    R_SQB           reduce using rule 90 (sum -> sum MINUS term .)
    R_CB            reduce using rule 90 (sum -> sum MINUS term .)
    ELSE            reduce using rule 90 (sum -> sum MINUS term .)
    STAR            shift and go to state 118
    SLASH           shift and go to state 119
    DOUBLE_SLASH    shift and go to state 120
    PERCENT         shift and go to state 121


state 167

    (92) term -> term STAR factor .

    STAR            reduce using rule 92 (term -> term STAR factor .)
    SLASH           reduce using rule 92 (term -> term STAR factor .)
    DOUBLE_SLASH    reduce using rule 92 (term -> term STAR factor .)
    PERCENT         reduce using rule 92 (term -> term STAR factor .)
    PLUS            reduce using rule 92 (term -> term STAR factor .)
    MINUS           reduce using rule 92 (term -> term STAR factor .)
    L_SHIFT         reduce using rule 92 (term -> term STAR factor .)
    R_SHIFT         reduce using rule 92 (term -> term STAR factor .)
    AMPERSAND       reduce using rule 92 (term -> term STAR factor .)
    CARET           reduce using rule 92 (term -> term STAR factor .)
    PIPE            reduce using rule 92 (term -> term STAR factor .)
    EQUALITY        reduce using rule 92 (term -> term STAR factor .)
    INEQUALITY      reduce using rule 92 (term -> term STAR factor .)
    GREATER_EQUAL   reduce using rule 92 (term -> term STAR factor .)
    LESSER_EQUAL    reduce using rule 92 (term -> term STAR factor .)
    GREATER         reduce using rule 92 (term -> term STAR factor .)
    LESSER          reduce using rule 92 (term -> term STAR factor .)
    NOT             reduce using rule 92 (term -> term STAR factor .)
    IS              reduce using rule 92 (term -> term STAR factor .)
    IN              reduce using rule 92 (term -> term STAR factor .)
    AND             reduce using rule 92 (term -> term STAR factor .)
    OR              reduce using rule 92 (term -> term STAR factor .)
    IF              reduce using rule 92 (term -> term STAR factor .)
    COMMA           reduce using rule 92 (term -> term STAR factor .)
    NEWLINE         reduce using rule 92 (term -> term STAR factor .)
    R_PARENTHESIS   reduce using rule 92 (term -> term STAR factor .)
    COLON           reduce using rule 92 (term -> term STAR factor .)
    R_SQB           reduce using rule 92 (term -> term STAR factor .)
    R_CB            reduce using rule 92 (term -> term STAR factor .)
    ELSE            reduce using rule 92 (term -> term STAR factor .)


state 168

    (93) term -> term SLASH factor .

    STAR            reduce using rule 93 (term -> term SLASH factor .)
    SLASH           reduce using rule 93 (term -> term SLASH factor .)
    DOUBLE_SLASH    reduce using rule 93 (term -> term SLASH factor .)
    PERCENT         reduce using rule 93 (term -> term SLASH factor .)
    PLUS            reduce using rule 93 (term -> term SLASH factor .)
    MINUS           reduce using rule 93 (term -> term SLASH factor .)
    L_SHIFT         reduce using rule 93 (term -> term SLASH factor .)
    R_SHIFT         reduce using rule 93 (term -> term SLASH factor .)
    AMPERSAND       reduce using rule 93 (term -> term SLASH factor .)
    CARET           reduce using rule 93 (term -> term SLASH factor .)
    PIPE            reduce using rule 93 (term -> term SLASH factor .)
    EQUALITY        reduce using rule 93 (term -> term SLASH factor .)
    INEQUALITY      reduce using rule 93 (term -> term SLASH factor .)
    GREATER_EQUAL   reduce using rule 93 (term -> term SLASH factor .)
    LESSER_EQUAL    reduce using rule 93 (term -> term SLASH factor .)
    GREATER         reduce using rule 93 (term -> term SLASH factor .)
    LESSER          reduce using rule 93 (term -> term SLASH factor .)
    NOT             reduce using rule 93 (term -> term SLASH factor .)
    IS              reduce using rule 93 (term -> term SLASH factor .)
    IN              reduce using rule 93 (term -> term SLASH factor .)
    AND             reduce using rule 93 (term -> term SLASH factor .)
    OR              reduce using rule 93 (term -> term SLASH factor .)
    IF              reduce using rule 93 (term -> term SLASH factor .)
    COMMA           reduce using rule 93 (term -> term SLASH factor .)
    NEWLINE         reduce using rule 93 (term -> term SLASH factor .)
    R_PARENTHESIS   reduce using rule 93 (term -> term SLASH factor .)
    COLON           reduce using rule 93 (term -> term SLASH factor .)
    R_SQB           reduce using rule 93 (term -> term SLASH factor .)
    R_CB            reduce using rule 93 (term -> term SLASH factor .)
    ELSE            reduce using rule 93 (term -> term SLASH factor .)


state 169

    (94) term -> term DOUBLE_SLASH factor .

    STAR            reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    SLASH           reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    DOUBLE_SLASH    reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    PERCENT         reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    PLUS            reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    MINUS           reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    L_SHIFT         reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    R_SHIFT         reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    AMPERSAND       reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    CARET           reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    PIPE            reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    EQUALITY        reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    INEQUALITY      reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    GREATER_EQUAL   reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    LESSER_EQUAL    reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    GREATER         reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    LESSER          reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    NOT             reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    IS              reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    IN              reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    AND             reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    OR              reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    IF              reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    COMMA           reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    NEWLINE         reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    R_PARENTHESIS   reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    COLON           reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    R_SQB           reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    R_CB            reduce using rule 94 (term -> term DOUBLE_SLASH factor .)
    ELSE            reduce using rule 94 (term -> term DOUBLE_SLASH factor .)


state 170

    (95) term -> term PERCENT factor .

    STAR            reduce using rule 95 (term -> term PERCENT factor .)
    SLASH           reduce using rule 95 (term -> term PERCENT factor .)
    DOUBLE_SLASH    reduce using rule 95 (term -> term PERCENT factor .)
    PERCENT         reduce using rule 95 (term -> term PERCENT factor .)
    PLUS            reduce using rule 95 (term -> term PERCENT factor .)
    MINUS           reduce using rule 95 (term -> term PERCENT factor .)
    L_SHIFT         reduce using rule 95 (term -> term PERCENT factor .)
    R_SHIFT         reduce using rule 95 (term -> term PERCENT factor .)
    AMPERSAND       reduce using rule 95 (term -> term PERCENT factor .)
    CARET           reduce using rule 95 (term -> term PERCENT factor .)
    PIPE            reduce using rule 95 (term -> term PERCENT factor .)
    EQUALITY        reduce using rule 95 (term -> term PERCENT factor .)
    INEQUALITY      reduce using rule 95 (term -> term PERCENT factor .)
    GREATER_EQUAL   reduce using rule 95 (term -> term PERCENT factor .)
    LESSER_EQUAL    reduce using rule 95 (term -> term PERCENT factor .)
    GREATER         reduce using rule 95 (term -> term PERCENT factor .)
    LESSER          reduce using rule 95 (term -> term PERCENT factor .)
    NOT             reduce using rule 95 (term -> term PERCENT factor .)
    IS              reduce using rule 95 (term -> term PERCENT factor .)
    IN              reduce using rule 95 (term -> term PERCENT factor .)
    AND             reduce using rule 95 (term -> term PERCENT factor .)
    OR              reduce using rule 95 (term -> term PERCENT factor .)
    IF              reduce using rule 95 (term -> term PERCENT factor .)
    COMMA           reduce using rule 95 (term -> term PERCENT factor .)
    NEWLINE         reduce using rule 95 (term -> term PERCENT factor .)
    R_PARENTHESIS   reduce using rule 95 (term -> term PERCENT factor .)
    COLON           reduce using rule 95 (term -> term PERCENT factor .)
    R_SQB           reduce using rule 95 (term -> term PERCENT factor .)
    R_CB            reduce using rule 95 (term -> term PERCENT factor .)
    ELSE            reduce using rule 95 (term -> term PERCENT factor .)


state 171

    (100) power -> primary DOUBLE_STAR factor .

    STAR            reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    SLASH           reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    DOUBLE_SLASH    reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    PERCENT         reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    PLUS            reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    MINUS           reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    L_SHIFT         reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    R_SHIFT         reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    AMPERSAND       reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    CARET           reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    PIPE            reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    EQUALITY        reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    INEQUALITY      reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    GREATER_EQUAL   reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    LESSER_EQUAL    reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    GREATER         reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    LESSER          reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    NOT             reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    IS              reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    IN              reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    AND             reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    OR              reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    IF              reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    COMMA           reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    NEWLINE         reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    R_PARENTHESIS   reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    COLON           reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    R_SQB           reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    R_CB            reduce using rule 100 (power -> primary DOUBLE_STAR factor .)
    ELSE            reduce using rule 100 (power -> primary DOUBLE_STAR factor .)


state 172

    (102) primary -> primary L_PARENTHESIS arguments . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 202


state 173

    (103) primary -> primary L_PARENTHESIS R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    L_SQB           reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    DOT             reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    STAR            reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    SLASH           reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    PERCENT         reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    PLUS            reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    MINUS           reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    L_SHIFT         reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    R_SHIFT         reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    AMPERSAND       reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    CARET           reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    PIPE            reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    EQUALITY        reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    INEQUALITY      reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    GREATER         reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    LESSER          reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    NOT             reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    IS              reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    IN              reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    AND             reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    OR              reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    IF              reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    COMMA           reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    NEWLINE         reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    COLON           reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    R_SQB           reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    R_CB            reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    ELSE            reduce using rule 103 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)


state 174

    (131) arguments -> expressions .
    (56) expressions -> expressions . COMMA expression

    R_PARENTHESIS   reduce using rule 131 (arguments -> expressions .)
    COMMA           shift and go to state 89


state 175

    (104) primary -> primary L_SQB slices . R_SQB
    (107) slices -> slices . COMMA slice

    R_SQB           shift and go to state 203
    COMMA           shift and go to state 204


state 176

    (108) slices -> slice .

    R_SQB           reduce using rule 108 (slices -> slice .)
    COMMA           reduce using rule 108 (slices -> slice .)


state 177

    (109) slice -> expression . COLON expression COLON expression
    (110) slice -> expression . COLON expression
    (111) slice -> expression . COLON
    (115) slice -> expression .

    COLON           shift and go to state 205
    R_SQB           reduce using rule 115 (slice -> expression .)
    COMMA           reduce using rule 115 (slice -> expression .)


state 178

    (112) slice -> COLON . expression
    (113) slice -> COLON . COLON
    (114) slice -> COLON .
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    COLON           shift and go to state 206
    R_SQB           reduce using rule 114 (slice -> COLON .)
    COMMA           reduce using rule 114 (slice -> COLON .)
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 207
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 179

    (105) primary -> primary DOT IDENTIFIER .

    DOUBLE_STAR     reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    L_SQB           reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    DOT             reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    STAR            reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    SLASH           reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    DOUBLE_SLASH    reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    PERCENT         reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    PLUS            reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    MINUS           reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    L_SHIFT         reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    R_SHIFT         reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    CARET           reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    PIPE            reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    EQUALITY        reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    INEQUALITY      reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    LESSER_EQUAL    reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    GREATER         reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    LESSER          reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    NOT             reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    IS              reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    IN              reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    AND             reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    OR              reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    IF              reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    COMMA           reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    NEWLINE         reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    R_PARENTHESIS   reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    COLON           reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    R_SQB           reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    R_CB            reduce using rule 105 (primary -> primary DOT IDENTIFIER .)
    ELSE            reduce using rule 105 (primary -> primary DOT IDENTIFIER .)


state 180

    (134) list -> L_SQB expressions R_SQB .

    DOUBLE_STAR     reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    L_PARENTHESIS   reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    L_SQB           reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    DOT             reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    STAR            reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    SLASH           reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    DOUBLE_SLASH    reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    PERCENT         reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    PLUS            reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    MINUS           reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    L_SHIFT         reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    R_SHIFT         reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    AMPERSAND       reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    CARET           reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    PIPE            reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    EQUALITY        reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    INEQUALITY      reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    GREATER_EQUAL   reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    LESSER_EQUAL    reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    GREATER         reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    LESSER          reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    NOT             reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    IS              reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    IN              reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    AND             reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    OR              reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    IF              reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    COMMA           reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    NEWLINE         reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    R_PARENTHESIS   reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    COLON           reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    R_SQB           reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    R_CB            reduce using rule 134 (list -> L_SQB expressions R_SQB .)
    ELSE            reduce using rule 134 (list -> L_SQB expressions R_SQB .)


state 181

    (139) dict -> L_CB kvpairs R_CB .

    DOUBLE_STAR     reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    L_PARENTHESIS   reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    L_SQB           reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    DOT             reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    STAR            reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    SLASH           reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    DOUBLE_SLASH    reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    PERCENT         reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    PLUS            reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    MINUS           reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    L_SHIFT         reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    R_SHIFT         reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    AMPERSAND       reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    CARET           reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    PIPE            reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    EQUALITY        reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    INEQUALITY      reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    GREATER_EQUAL   reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    LESSER_EQUAL    reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    GREATER         reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    LESSER          reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    NOT             reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    IS              reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    IN              reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    AND             reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    OR              reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    IF              reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    COMMA           reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    NEWLINE         reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    R_PARENTHESIS   reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    COLON           reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    R_SQB           reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    R_CB            reduce using rule 139 (dict -> L_CB kvpairs R_CB .)
    ELSE            reduce using rule 139 (dict -> L_CB kvpairs R_CB .)


state 182

    (141) kvpairs -> kvpairs COMMA . kvpair
    (143) kvpair -> . expression COLON expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    kvpair                         shift and go to state 208
    expression                     shift and go to state 209
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 183

    (138) set -> L_CB expressions R_CB .

    DOUBLE_STAR     reduce using rule 138 (set -> L_CB expressions R_CB .)
    L_PARENTHESIS   reduce using rule 138 (set -> L_CB expressions R_CB .)
    L_SQB           reduce using rule 138 (set -> L_CB expressions R_CB .)
    DOT             reduce using rule 138 (set -> L_CB expressions R_CB .)
    STAR            reduce using rule 138 (set -> L_CB expressions R_CB .)
    SLASH           reduce using rule 138 (set -> L_CB expressions R_CB .)
    DOUBLE_SLASH    reduce using rule 138 (set -> L_CB expressions R_CB .)
    PERCENT         reduce using rule 138 (set -> L_CB expressions R_CB .)
    PLUS            reduce using rule 138 (set -> L_CB expressions R_CB .)
    MINUS           reduce using rule 138 (set -> L_CB expressions R_CB .)
    L_SHIFT         reduce using rule 138 (set -> L_CB expressions R_CB .)
    R_SHIFT         reduce using rule 138 (set -> L_CB expressions R_CB .)
    AMPERSAND       reduce using rule 138 (set -> L_CB expressions R_CB .)
    CARET           reduce using rule 138 (set -> L_CB expressions R_CB .)
    PIPE            reduce using rule 138 (set -> L_CB expressions R_CB .)
    EQUALITY        reduce using rule 138 (set -> L_CB expressions R_CB .)
    INEQUALITY      reduce using rule 138 (set -> L_CB expressions R_CB .)
    GREATER_EQUAL   reduce using rule 138 (set -> L_CB expressions R_CB .)
    LESSER_EQUAL    reduce using rule 138 (set -> L_CB expressions R_CB .)
    GREATER         reduce using rule 138 (set -> L_CB expressions R_CB .)
    LESSER          reduce using rule 138 (set -> L_CB expressions R_CB .)
    NOT             reduce using rule 138 (set -> L_CB expressions R_CB .)
    IS              reduce using rule 138 (set -> L_CB expressions R_CB .)
    IN              reduce using rule 138 (set -> L_CB expressions R_CB .)
    AND             reduce using rule 138 (set -> L_CB expressions R_CB .)
    OR              reduce using rule 138 (set -> L_CB expressions R_CB .)
    IF              reduce using rule 138 (set -> L_CB expressions R_CB .)
    COMMA           reduce using rule 138 (set -> L_CB expressions R_CB .)
    NEWLINE         reduce using rule 138 (set -> L_CB expressions R_CB .)
    R_PARENTHESIS   reduce using rule 138 (set -> L_CB expressions R_CB .)
    COLON           reduce using rule 138 (set -> L_CB expressions R_CB .)
    R_SQB           reduce using rule 138 (set -> L_CB expressions R_CB .)
    R_CB            reduce using rule 138 (set -> L_CB expressions R_CB .)
    ELSE            reduce using rule 138 (set -> L_CB expressions R_CB .)


state 184

    (143) kvpair -> expression COLON . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 210
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 185

    (7) simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .

    SEMICOLON       reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    ENDMARKER       reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    DEF             reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    IF              reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    CLASS           reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    FOR             reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    WHILE           reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    PASS            reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    BREAK           reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    CONTINUE        reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    IDENTIFIER      reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    RETURN          reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    DEL             reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    GLOBAL          reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    NOT             reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    PLUS            reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    MINUS           reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    TRUE            reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    FALSE           reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    NONE            reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    STRING          reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    TRIPLE_STRING   reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    NUMBER          reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    F_NUMBER        reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    BIN_NUMBER      reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    HEX_NUMBER      reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    OCT_NUMBER      reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    L_PARENTHESIS   reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    L_SQB           reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    L_CB            reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    ELIF            reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    ELSE            reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    DEDENT          reduce using rule 7 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)


state 186

    (44) parameters -> IDENTIFIER .

    R_PARENTHESIS   reduce using rule 44 (parameters -> IDENTIFIER .)
    COMMA           reduce using rule 44 (parameters -> IDENTIFIER .)


state 187

    (41) function_def -> DEF IDENTIFIER L_PARENTHESIS parameters . R_PARENTHESIS COLON block
    (43) parameters -> parameters . COMMA IDENTIFIER

    R_PARENTHESIS   shift and go to state 211
    COMMA           shift and go to state 212


state 188

    (42) function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS . COLON block

    COLON           shift and go to state 213


state 189

    (45) if_stmt -> IF expression COLON block . elif_stmt
    (46) if_stmt -> IF expression COLON block . else_block
    (47) if_stmt -> IF expression COLON block .
    (48) elif_stmt -> . ELIF expression COLON block elif_stmt
    (49) elif_stmt -> . ELIF expression COLON block else_block
    (50) elif_stmt -> . ELIF expression COLON block
    (51) else_block -> . ELSE COLON block

    ENDMARKER       reduce using rule 47 (if_stmt -> IF expression COLON block .)
    DEF             reduce using rule 47 (if_stmt -> IF expression COLON block .)
    IF              reduce using rule 47 (if_stmt -> IF expression COLON block .)
    CLASS           reduce using rule 47 (if_stmt -> IF expression COLON block .)
    FOR             reduce using rule 47 (if_stmt -> IF expression COLON block .)
    WHILE           reduce using rule 47 (if_stmt -> IF expression COLON block .)
    PASS            reduce using rule 47 (if_stmt -> IF expression COLON block .)
    BREAK           reduce using rule 47 (if_stmt -> IF expression COLON block .)
    CONTINUE        reduce using rule 47 (if_stmt -> IF expression COLON block .)
    IDENTIFIER      reduce using rule 47 (if_stmt -> IF expression COLON block .)
    RETURN          reduce using rule 47 (if_stmt -> IF expression COLON block .)
    DEL             reduce using rule 47 (if_stmt -> IF expression COLON block .)
    GLOBAL          reduce using rule 47 (if_stmt -> IF expression COLON block .)
    NOT             reduce using rule 47 (if_stmt -> IF expression COLON block .)
    PLUS            reduce using rule 47 (if_stmt -> IF expression COLON block .)
    MINUS           reduce using rule 47 (if_stmt -> IF expression COLON block .)
    TRUE            reduce using rule 47 (if_stmt -> IF expression COLON block .)
    FALSE           reduce using rule 47 (if_stmt -> IF expression COLON block .)
    NONE            reduce using rule 47 (if_stmt -> IF expression COLON block .)
    STRING          reduce using rule 47 (if_stmt -> IF expression COLON block .)
    TRIPLE_STRING   reduce using rule 47 (if_stmt -> IF expression COLON block .)
    NUMBER          reduce using rule 47 (if_stmt -> IF expression COLON block .)
    F_NUMBER        reduce using rule 47 (if_stmt -> IF expression COLON block .)
    BIN_NUMBER      reduce using rule 47 (if_stmt -> IF expression COLON block .)
    HEX_NUMBER      reduce using rule 47 (if_stmt -> IF expression COLON block .)
    OCT_NUMBER      reduce using rule 47 (if_stmt -> IF expression COLON block .)
    L_PARENTHESIS   reduce using rule 47 (if_stmt -> IF expression COLON block .)
    L_SQB           reduce using rule 47 (if_stmt -> IF expression COLON block .)
    L_CB            reduce using rule 47 (if_stmt -> IF expression COLON block .)
    DEDENT          reduce using rule 47 (if_stmt -> IF expression COLON block .)
    ELIF            shift and go to state 216
    ELSE            shift and go to state 217

    elif_stmt                      shift and go to state 214
    else_block                     shift and go to state 215

state 190

    (36) block -> NEWLINE . INDENT statements DEDENT

    INDENT          shift and go to state 218


state 191

    (37) block -> simple_stmts .
    (7) simple_stmts -> simple_stmts . SEMICOLON simple_stmt NEWLINE

    ELIF            reduce using rule 37 (block -> simple_stmts .)
    ELSE            reduce using rule 37 (block -> simple_stmts .)
    ENDMARKER       reduce using rule 37 (block -> simple_stmts .)
    DEF             reduce using rule 37 (block -> simple_stmts .)
    IF              reduce using rule 37 (block -> simple_stmts .)
    CLASS           reduce using rule 37 (block -> simple_stmts .)
    FOR             reduce using rule 37 (block -> simple_stmts .)
    WHILE           reduce using rule 37 (block -> simple_stmts .)
    PASS            reduce using rule 37 (block -> simple_stmts .)
    BREAK           reduce using rule 37 (block -> simple_stmts .)
    CONTINUE        reduce using rule 37 (block -> simple_stmts .)
    IDENTIFIER      reduce using rule 37 (block -> simple_stmts .)
    RETURN          reduce using rule 37 (block -> simple_stmts .)
    DEL             reduce using rule 37 (block -> simple_stmts .)
    GLOBAL          reduce using rule 37 (block -> simple_stmts .)
    NOT             reduce using rule 37 (block -> simple_stmts .)
    PLUS            reduce using rule 37 (block -> simple_stmts .)
    MINUS           reduce using rule 37 (block -> simple_stmts .)
    TRUE            reduce using rule 37 (block -> simple_stmts .)
    FALSE           reduce using rule 37 (block -> simple_stmts .)
    NONE            reduce using rule 37 (block -> simple_stmts .)
    STRING          reduce using rule 37 (block -> simple_stmts .)
    TRIPLE_STRING   reduce using rule 37 (block -> simple_stmts .)
    NUMBER          reduce using rule 37 (block -> simple_stmts .)
    F_NUMBER        reduce using rule 37 (block -> simple_stmts .)
    BIN_NUMBER      reduce using rule 37 (block -> simple_stmts .)
    HEX_NUMBER      reduce using rule 37 (block -> simple_stmts .)
    OCT_NUMBER      reduce using rule 37 (block -> simple_stmts .)
    L_PARENTHESIS   reduce using rule 37 (block -> simple_stmts .)
    L_SQB           reduce using rule 37 (block -> simple_stmts .)
    L_CB            reduce using rule 37 (block -> simple_stmts .)
    DEDENT          reduce using rule 37 (block -> simple_stmts .)
    SEMICOLON       shift and go to state 69


state 192

    (38) class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments . R_PARENTHESIS COLON block

    R_PARENTHESIS   shift and go to state 219


state 193

    (39) class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS . COLON block

    COLON           shift and go to state 220


state 194

    (40) class_def -> CLASS IDENTIFIER COLON block .

    ENDMARKER       reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    DEF             reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    IF              reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    CLASS           reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    FOR             reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    WHILE           reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    PASS            reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    BREAK           reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    CONTINUE        reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    IDENTIFIER      reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    RETURN          reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    DEL             reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    GLOBAL          reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    NOT             reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    PLUS            reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    MINUS           reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    TRUE            reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    FALSE           reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    NONE            reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    STRING          reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    TRIPLE_STRING   reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    NUMBER          reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    F_NUMBER        reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    BIN_NUMBER      reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    HEX_NUMBER      reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    OCT_NUMBER      reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    L_PARENTHESIS   reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    L_SQB           reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    L_CB            reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)
    DEDENT          reduce using rule 40 (class_def -> CLASS IDENTIFIER COLON block .)


state 195

    (54) for_stmt -> FOR targets IN expressions . COLON else_block
    (55) for_stmt -> FOR targets IN expressions . COLON block
    (56) expressions -> expressions . COMMA expression

    COLON           shift and go to state 221
    COMMA           shift and go to state 89


state 196

    (144) targets -> targets COMMA target .

    IN              reduce using rule 144 (targets -> targets COMMA target .)
    COMMA           reduce using rule 144 (targets -> targets COMMA target .)


state 197

    (52) while_stmt -> WHILE expression COLON block . else_block
    (53) while_stmt -> WHILE expression COLON block .
    (51) else_block -> . ELSE COLON block

    ENDMARKER       reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    DEF             reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    IF              reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    CLASS           reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    FOR             reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    WHILE           reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    PASS            reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    BREAK           reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    CONTINUE        reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    IDENTIFIER      reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    RETURN          reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    DEL             reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    GLOBAL          reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    NOT             reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    PLUS            reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    MINUS           reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    TRUE            reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    FALSE           reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    NONE            reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    STRING          reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    TRIPLE_STRING   reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    NUMBER          reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    F_NUMBER        reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    BIN_NUMBER      reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    HEX_NUMBER      reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    OCT_NUMBER      reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    L_PARENTHESIS   reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    L_SQB           reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    L_CB            reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    DEDENT          reduce using rule 53 (while_stmt -> WHILE expression COLON block .)
    ELSE            shift and go to state 217

    else_block                     shift and go to state 222

state 198

    (34) namelist -> namelist COMMA IDENTIFIER .

    COMMA           reduce using rule 34 (namelist -> namelist COMMA IDENTIFIER .)
    NEWLINE         reduce using rule 34 (namelist -> namelist COMMA IDENTIFIER .)


state 199

    (58) expression -> disjunction IF disjunction ELSE . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    disjunction                    shift and go to state 32
    expression                     shift and go to state 223
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 200

    (76) compare_op -> NOT IN bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    INEQUALITY      reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    GREATER_EQUAL   reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    LESSER_EQUAL    reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    GREATER         reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    LESSER          reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    NOT             reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    IS              reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    IN              reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    AND             reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    OR              reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    IF              reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    COMMA           reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    NEWLINE         reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    R_PARENTHESIS   reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    COLON           reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    R_SQB           reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    R_CB            reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    ELSE            reduce using rule 76 (compare_op -> NOT IN bitwise_or .)
    PIPE            shift and go to state 100


state 201

    (77) compare_op -> IS NOT bitwise_or .
    (80) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    INEQUALITY      reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    GREATER_EQUAL   reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    LESSER_EQUAL    reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    GREATER         reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    LESSER          reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    NOT             reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    IS              reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    IN              reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    AND             reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    OR              reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    IF              reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    COMMA           reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    NEWLINE         reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    R_PARENTHESIS   reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    COLON           reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    R_SQB           reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    R_CB            reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    ELSE            reduce using rule 77 (compare_op -> IS NOT bitwise_or .)
    PIPE            shift and go to state 100


state 202

    (102) primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    L_SQB           reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    DOT             reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    STAR            reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    SLASH           reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    PERCENT         reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    PLUS            reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    MINUS           reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    L_SHIFT         reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    R_SHIFT         reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    AMPERSAND       reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    CARET           reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    PIPE            reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    EQUALITY        reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    INEQUALITY      reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    GREATER         reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    LESSER          reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    NOT             reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    IS              reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    IN              reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    AND             reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    OR              reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    IF              reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    COMMA           reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    NEWLINE         reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    COLON           reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    R_SQB           reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    R_CB            reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    ELSE            reduce using rule 102 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)


state 203

    (104) primary -> primary L_SQB slices R_SQB .

    DOUBLE_STAR     reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    L_PARENTHESIS   reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    L_SQB           reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    DOT             reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    STAR            reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    SLASH           reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    DOUBLE_SLASH    reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    PERCENT         reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    PLUS            reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    MINUS           reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    L_SHIFT         reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    R_SHIFT         reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    AMPERSAND       reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    CARET           reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    PIPE            reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    EQUALITY        reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    INEQUALITY      reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    GREATER_EQUAL   reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    LESSER_EQUAL    reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    GREATER         reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    LESSER          reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    NOT             reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    IS              reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    IN              reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    AND             reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    OR              reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    IF              reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    COMMA           reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    NEWLINE         reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    R_PARENTHESIS   reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    COLON           reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    R_SQB           reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    R_CB            reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)
    ELSE            reduce using rule 104 (primary -> primary L_SQB slices R_SQB .)


state 204

    (107) slices -> slices COMMA . slice
    (109) slice -> . expression COLON expression COLON expression
    (110) slice -> . expression COLON expression
    (111) slice -> . expression COLON
    (112) slice -> . COLON expression
    (113) slice -> . COLON COLON
    (114) slice -> . COLON
    (115) slice -> . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    COLON           shift and go to state 178
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    slice                          shift and go to state 224
    expression                     shift and go to state 177
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 205

    (109) slice -> expression COLON . expression COLON expression
    (110) slice -> expression COLON . expression
    (111) slice -> expression COLON .
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    R_SQB           reduce using rule 111 (slice -> expression COLON .)
    COMMA           reduce using rule 111 (slice -> expression COLON .)
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 225
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 206

    (113) slice -> COLON COLON .

    R_SQB           reduce using rule 113 (slice -> COLON COLON .)
    COMMA           reduce using rule 113 (slice -> COLON COLON .)


state 207

    (112) slice -> COLON expression .

    R_SQB           reduce using rule 112 (slice -> COLON expression .)
    COMMA           reduce using rule 112 (slice -> COLON expression .)


state 208

    (141) kvpairs -> kvpairs COMMA kvpair .

    R_CB            reduce using rule 141 (kvpairs -> kvpairs COMMA kvpair .)
    COMMA           reduce using rule 141 (kvpairs -> kvpairs COMMA kvpair .)


state 209

    (143) kvpair -> expression . COLON expression

    COLON           shift and go to state 184


state 210

    (143) kvpair -> expression COLON expression .

    R_CB            reduce using rule 143 (kvpair -> expression COLON expression .)
    COMMA           reduce using rule 143 (kvpair -> expression COLON expression .)


state 211

    (41) function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS . COLON block

    COLON           shift and go to state 226


state 212

    (43) parameters -> parameters COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 227


state 213

    (42) function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON . block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    block                          shift and go to state 228
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 214

    (45) if_stmt -> IF expression COLON block elif_stmt .

    ENDMARKER       reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    DEF             reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    IF              reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    CLASS           reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    FOR             reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    WHILE           reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    PASS            reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    BREAK           reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    CONTINUE        reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    IDENTIFIER      reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    RETURN          reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    DEL             reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    GLOBAL          reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    NOT             reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    PLUS            reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    MINUS           reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    TRUE            reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    FALSE           reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    NONE            reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    STRING          reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    TRIPLE_STRING   reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    NUMBER          reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    F_NUMBER        reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    BIN_NUMBER      reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    HEX_NUMBER      reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    OCT_NUMBER      reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    L_PARENTHESIS   reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    L_SQB           reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    L_CB            reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)
    DEDENT          reduce using rule 45 (if_stmt -> IF expression COLON block elif_stmt .)


state 215

    (46) if_stmt -> IF expression COLON block else_block .

    ENDMARKER       reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    DEF             reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    IF              reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    CLASS           reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    FOR             reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    WHILE           reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    PASS            reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    BREAK           reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    CONTINUE        reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    IDENTIFIER      reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    RETURN          reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    DEL             reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    GLOBAL          reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    NOT             reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    PLUS            reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    MINUS           reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    TRUE            reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    FALSE           reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    NONE            reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    STRING          reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    TRIPLE_STRING   reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    NUMBER          reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    F_NUMBER        reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    BIN_NUMBER      reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    HEX_NUMBER      reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    OCT_NUMBER      reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    L_PARENTHESIS   reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    L_SQB           reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    L_CB            reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)
    DEDENT          reduce using rule 46 (if_stmt -> IF expression COLON block else_block .)


state 216

    (48) elif_stmt -> ELIF . expression COLON block elif_stmt
    (49) elif_stmt -> ELIF . expression COLON block else_block
    (50) elif_stmt -> ELIF . expression COLON block
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 229
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 217

    (51) else_block -> ELSE . COLON block

    COLON           shift and go to state 230


state 218

    (36) block -> NEWLINE INDENT . statements DEDENT
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . compound_stmt
    (6) statement -> . simple_stmts
    (17) compound_stmt -> . function_def
    (18) compound_stmt -> . if_stmt
    (19) compound_stmt -> . class_def
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (41) function_def -> . DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (42) function_def -> . DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (45) if_stmt -> . IF expression COLON block elif_stmt
    (46) if_stmt -> . IF expression COLON block else_block
    (47) if_stmt -> . IF expression COLON block
    (38) class_def -> . CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (39) class_def -> . CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (40) class_def -> . CLASS IDENTIFIER COLON block
    (54) for_stmt -> . FOR targets IN expressions COLON else_block
    (55) for_stmt -> . FOR targets IN expressions COLON block
    (52) while_stmt -> . WHILE expression COLON block else_block
    (53) while_stmt -> . WHILE expression COLON block
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    DEF             shift and go to state 13
    IF              shift and go to state 16
    CLASS           shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 21
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    statements                     shift and go to state 231
    statement                      shift and go to state 4
    compound_stmt                  shift and go to state 5
    simple_stmts                   shift and go to state 6
    function_def                   shift and go to state 7
    if_stmt                        shift and go to state 8
    class_def                      shift and go to state 9
    for_stmt                       shift and go to state 10
    while_stmt                     shift and go to state 11
    simple_stmt                    shift and go to state 12
    expression                     shift and go to state 17
    expressions                    shift and go to state 20
    assignment                     shift and go to state 22
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 219

    (38) class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS . COLON block

    COLON           shift and go to state 232


state 220

    (39) class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON . block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    block                          shift and go to state 233
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 221

    (54) for_stmt -> FOR targets IN expressions COLON . else_block
    (55) for_stmt -> FOR targets IN expressions COLON . block
    (51) else_block -> . ELSE COLON block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    ELSE            shift and go to state 217
    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expressions                    shift and go to state 20
    else_block                     shift and go to state 234
    block                          shift and go to state 235
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 222

    (52) while_stmt -> WHILE expression COLON block else_block .

    ENDMARKER       reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    DEF             reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    IF              reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    CLASS           reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    FOR             reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    WHILE           reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    PASS            reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    BREAK           reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    CONTINUE        reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    IDENTIFIER      reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    RETURN          reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    DEL             reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    GLOBAL          reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    NOT             reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    PLUS            reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    MINUS           reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    TRUE            reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    FALSE           reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    NONE            reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    STRING          reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    TRIPLE_STRING   reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    NUMBER          reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    F_NUMBER        reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    BIN_NUMBER      reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    HEX_NUMBER      reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    OCT_NUMBER      reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    L_PARENTHESIS   reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    L_SQB           reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    L_CB            reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)
    DEDENT          reduce using rule 52 (while_stmt -> WHILE expression COLON block else_block .)


state 223

    (58) expression -> disjunction IF disjunction ELSE expression .

    COMMA           reduce using rule 58 (expression -> disjunction IF disjunction ELSE expression .)
    NEWLINE         reduce using rule 58 (expression -> disjunction IF disjunction ELSE expression .)
    R_PARENTHESIS   reduce using rule 58 (expression -> disjunction IF disjunction ELSE expression .)
    COLON           reduce using rule 58 (expression -> disjunction IF disjunction ELSE expression .)
    R_SQB           reduce using rule 58 (expression -> disjunction IF disjunction ELSE expression .)
    R_CB            reduce using rule 58 (expression -> disjunction IF disjunction ELSE expression .)


state 224

    (107) slices -> slices COMMA slice .

    R_SQB           reduce using rule 107 (slices -> slices COMMA slice .)
    COMMA           reduce using rule 107 (slices -> slices COMMA slice .)


state 225

    (109) slice -> expression COLON expression . COLON expression
    (110) slice -> expression COLON expression .

    COLON           shift and go to state 236
    R_SQB           reduce using rule 110 (slice -> expression COLON expression .)
    COMMA           reduce using rule 110 (slice -> expression COLON expression .)


state 226

    (41) function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON . block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    block                          shift and go to state 237
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 227

    (43) parameters -> parameters COMMA IDENTIFIER .

    R_PARENTHESIS   reduce using rule 43 (parameters -> parameters COMMA IDENTIFIER .)
    COMMA           reduce using rule 43 (parameters -> parameters COMMA IDENTIFIER .)


state 228

    (42) function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .

    ENDMARKER       reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEF             reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    IF              reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    CLASS           reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    FOR             reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    WHILE           reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    PASS            reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    BREAK           reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    CONTINUE        reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    IDENTIFIER      reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    RETURN          reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEL             reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    GLOBAL          reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NOT             reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    PLUS            reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    MINUS           reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    TRUE            reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    FALSE           reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NONE            reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    STRING          reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    TRIPLE_STRING   reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NUMBER          reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    F_NUMBER        reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    BIN_NUMBER      reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    HEX_NUMBER      reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    OCT_NUMBER      reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_PARENTHESIS   reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_SQB           reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_CB            reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEDENT          reduce using rule 42 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)


state 229

    (48) elif_stmt -> ELIF expression . COLON block elif_stmt
    (49) elif_stmt -> ELIF expression . COLON block else_block
    (50) elif_stmt -> ELIF expression . COLON block

    COLON           shift and go to state 238


state 230

    (51) else_block -> ELSE COLON . block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    block                          shift and go to state 239
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 231

    (36) block -> NEWLINE INDENT statements . DEDENT
    (3) statements -> statements . statement
    (5) statement -> . compound_stmt
    (6) statement -> . simple_stmts
    (17) compound_stmt -> . function_def
    (18) compound_stmt -> . if_stmt
    (19) compound_stmt -> . class_def
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (41) function_def -> . DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (42) function_def -> . DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (45) if_stmt -> . IF expression COLON block elif_stmt
    (46) if_stmt -> . IF expression COLON block else_block
    (47) if_stmt -> . IF expression COLON block
    (38) class_def -> . CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (39) class_def -> . CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (40) class_def -> . CLASS IDENTIFIER COLON block
    (54) for_stmt -> . FOR targets IN expressions COLON else_block
    (55) for_stmt -> . FOR targets IN expressions COLON block
    (52) while_stmt -> . WHILE expression COLON block else_block
    (53) while_stmt -> . WHILE expression COLON block
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    DEDENT          shift and go to state 240
    DEF             shift and go to state 13
    IF              shift and go to state 16
    CLASS           shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 21
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    statement                      shift and go to state 68
    compound_stmt                  shift and go to state 5
    simple_stmts                   shift and go to state 6
    function_def                   shift and go to state 7
    if_stmt                        shift and go to state 8
    class_def                      shift and go to state 9
    for_stmt                       shift and go to state 10
    while_stmt                     shift and go to state 11
    simple_stmt                    shift and go to state 12
    expression                     shift and go to state 17
    expressions                    shift and go to state 20
    assignment                     shift and go to state 22
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 232

    (38) class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON . block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    block                          shift and go to state 241
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    expression                     shift and go to state 17
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 233

    (39) class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .

    ENDMARKER       reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEF             reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    IF              reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    CLASS           reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    FOR             reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    WHILE           reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    PASS            reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    BREAK           reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    CONTINUE        reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    IDENTIFIER      reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    RETURN          reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEL             reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    GLOBAL          reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NOT             reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    PLUS            reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    MINUS           reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    TRUE            reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    FALSE           reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NONE            reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    STRING          reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    TRIPLE_STRING   reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NUMBER          reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    F_NUMBER        reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    BIN_NUMBER      reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    HEX_NUMBER      reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    OCT_NUMBER      reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_PARENTHESIS   reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_SQB           reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_CB            reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEDENT          reduce using rule 39 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)


state 234

    (54) for_stmt -> FOR targets IN expressions COLON else_block .

    ENDMARKER       reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    DEF             reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    IF              reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    CLASS           reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    FOR             reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    WHILE           reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    PASS            reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    BREAK           reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    CONTINUE        reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    IDENTIFIER      reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    RETURN          reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    DEL             reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    GLOBAL          reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    NOT             reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    PLUS            reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    MINUS           reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    TRUE            reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    FALSE           reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    NONE            reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    STRING          reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    TRIPLE_STRING   reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    NUMBER          reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    F_NUMBER        reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    BIN_NUMBER      reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    HEX_NUMBER      reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    OCT_NUMBER      reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    L_PARENTHESIS   reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    L_SQB           reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    L_CB            reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)
    DEDENT          reduce using rule 54 (for_stmt -> FOR targets IN expressions COLON else_block .)


state 235

    (55) for_stmt -> FOR targets IN expressions COLON block .

    ENDMARKER       reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    DEF             reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    IF              reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    CLASS           reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    FOR             reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    WHILE           reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    PASS            reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    BREAK           reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    CONTINUE        reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    IDENTIFIER      reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    RETURN          reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    DEL             reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    GLOBAL          reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    NOT             reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    PLUS            reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    MINUS           reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    TRUE            reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    FALSE           reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    NONE            reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    STRING          reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    TRIPLE_STRING   reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    NUMBER          reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    F_NUMBER        reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    BIN_NUMBER      reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    HEX_NUMBER      reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    OCT_NUMBER      reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    L_PARENTHESIS   reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    L_SQB           reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    L_CB            reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)
    DEDENT          reduce using rule 55 (for_stmt -> FOR targets IN expressions COLON block .)


state 236

    (109) slice -> expression COLON expression COLON . expression
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    IDENTIFIER      shift and go to state 83
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 242
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 237

    (41) function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .

    ENDMARKER       reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    DEF             reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    IF              reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    CLASS           reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    FOR             reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    WHILE           reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    PASS            reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    BREAK           reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    CONTINUE        reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    IDENTIFIER      reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    RETURN          reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    DEL             reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    GLOBAL          reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    NOT             reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    PLUS            reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    MINUS           reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    TRUE            reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    FALSE           reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    NONE            reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    STRING          reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    TRIPLE_STRING   reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    NUMBER          reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    F_NUMBER        reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    BIN_NUMBER      reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    HEX_NUMBER      reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    OCT_NUMBER      reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    L_PARENTHESIS   reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    L_SQB           reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    L_CB            reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    DEDENT          reduce using rule 41 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)


state 238

    (48) elif_stmt -> ELIF expression COLON . block elif_stmt
    (49) elif_stmt -> ELIF expression COLON . block else_block
    (50) elif_stmt -> ELIF expression COLON . block
    (36) block -> . NEWLINE INDENT statements DEDENT
    (37) block -> . simple_stmts
    (7) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (8) simple_stmts -> . simple_stmt NEWLINE
    (9) simple_stmt -> . assignment
    (10) simple_stmt -> . expressions
    (11) simple_stmt -> . return_stmt
    (12) simple_stmt -> . PASS
    (13) simple_stmt -> . del_stmt
    (14) simple_stmt -> . BREAK
    (15) simple_stmt -> . CONTINUE
    (16) simple_stmt -> . global_stmt
    (22) assignment -> . IDENTIFIER augmentation_assignment expressions
    (56) expressions -> . expressions COMMA expression
    (57) expressions -> . expression
    (31) return_stmt -> . RETURN expressions
    (33) del_stmt -> . DEL namelist
    (32) global_stmt -> . GLOBAL namelist
    (58) expression -> . disjunction IF disjunction ELSE expression
    (59) expression -> . disjunction
    (60) disjunction -> . conjunction OR disjunction
    (61) disjunction -> . conjunction
    (62) conjunction -> . inversion AND inversion
    (63) conjunction -> . inversion
    (64) inversion -> . NOT inversion
    (65) inversion -> . comparison
    (66) comparison -> . bitwise_or compare_op_list
    (67) comparison -> . bitwise_or
    (80) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (81) bitwise_or -> . bitwise_xor
    (82) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (83) bitwise_xor -> . bitwise_and
    (84) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (85) bitwise_and -> . shift_expr
    (86) shift_expr -> . shift_expr L_SHIFT sum
    (87) shift_expr -> . shift_expr R_SHIFT sum
    (88) shift_expr -> . sum
    (89) sum -> . sum PLUS term
    (90) sum -> . sum MINUS term
    (91) sum -> . term
    (92) term -> . term STAR factor
    (93) term -> . term SLASH factor
    (94) term -> . term DOUBLE_SLASH factor
    (95) term -> . term PERCENT factor
    (96) term -> . factor
    (97) factor -> . PLUS factor
    (98) factor -> . MINUS factor
    (99) factor -> . power
    (100) power -> . primary DOUBLE_STAR factor
    (101) power -> . primary
    (102) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (103) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (104) primary -> . primary L_SQB slices R_SQB
    (105) primary -> . primary DOT IDENTIFIER
    (106) primary -> . atomic
    (116) atomic -> . IDENTIFIER
    (117) atomic -> . TRUE
    (118) atomic -> . FALSE
    (119) atomic -> . NONE
    (120) atomic -> . strings
    (121) atomic -> . number
    (122) atomic -> . tuple
    (123) atomic -> . list
    (124) atomic -> . dict
    (125) atomic -> . set
    (132) strings -> . STRING
    (133) strings -> . TRIPLE_STRING
    (126) number -> . NUMBER
    (127) number -> . F_NUMBER
    (128) number -> . BIN_NUMBER
    (129) number -> . HEX_NUMBER
    (130) number -> . OCT_NUMBER
    (136) tuple -> . L_PARENTHESIS expressions R_PARENTHESIS
    (137) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (134) list -> . L_SQB expressions R_SQB
    (135) list -> . L_SQB R_SQB
    (139) dict -> . L_CB kvpairs R_CB
    (140) dict -> . L_CB R_CB
    (138) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 190
    PASS            shift and go to state 24
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 29
    DEL             shift and go to state 30
    GLOBAL          shift and go to state 31
    NOT             shift and go to state 35
    PLUS            shift and go to state 42
    MINUS           shift and go to state 44
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NONE            shift and go to state 52
    STRING          shift and go to state 59
    TRIPLE_STRING   shift and go to state 60
    NUMBER          shift and go to state 61
    F_NUMBER        shift and go to state 62
    BIN_NUMBER      shift and go to state 63
    HEX_NUMBER      shift and go to state 64
    OCT_NUMBER      shift and go to state 65
    L_PARENTHESIS   shift and go to state 15
    L_SQB           shift and go to state 48
    L_CB            shift and go to state 66

    expression                     shift and go to state 17
    block                          shift and go to state 243
    simple_stmts                   shift and go to state 191
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 22
    expressions                    shift and go to state 20
    return_stmt                    shift and go to state 23
    del_stmt                       shift and go to state 25
    global_stmt                    shift and go to state 28
    disjunction                    shift and go to state 32
    conjunction                    shift and go to state 33
    inversion                      shift and go to state 34
    comparison                     shift and go to state 36
    bitwise_or                     shift and go to state 37
    bitwise_xor                    shift and go to state 38
    bitwise_and                    shift and go to state 39
    shift_expr                     shift and go to state 40
    sum                            shift and go to state 41
    term                           shift and go to state 43
    factor                         shift and go to state 45
    power                          shift and go to state 46
    primary                        shift and go to state 47
    atomic                         shift and go to state 49
    strings                        shift and go to state 53
    number                         shift and go to state 54
    tuple                          shift and go to state 55
    list                           shift and go to state 56
    dict                           shift and go to state 57
    set                            shift and go to state 58

state 239

    (51) else_block -> ELSE COLON block .

    ENDMARKER       reduce using rule 51 (else_block -> ELSE COLON block .)
    DEF             reduce using rule 51 (else_block -> ELSE COLON block .)
    IF              reduce using rule 51 (else_block -> ELSE COLON block .)
    CLASS           reduce using rule 51 (else_block -> ELSE COLON block .)
    FOR             reduce using rule 51 (else_block -> ELSE COLON block .)
    WHILE           reduce using rule 51 (else_block -> ELSE COLON block .)
    PASS            reduce using rule 51 (else_block -> ELSE COLON block .)
    BREAK           reduce using rule 51 (else_block -> ELSE COLON block .)
    CONTINUE        reduce using rule 51 (else_block -> ELSE COLON block .)
    IDENTIFIER      reduce using rule 51 (else_block -> ELSE COLON block .)
    RETURN          reduce using rule 51 (else_block -> ELSE COLON block .)
    DEL             reduce using rule 51 (else_block -> ELSE COLON block .)
    GLOBAL          reduce using rule 51 (else_block -> ELSE COLON block .)
    NOT             reduce using rule 51 (else_block -> ELSE COLON block .)
    PLUS            reduce using rule 51 (else_block -> ELSE COLON block .)
    MINUS           reduce using rule 51 (else_block -> ELSE COLON block .)
    TRUE            reduce using rule 51 (else_block -> ELSE COLON block .)
    FALSE           reduce using rule 51 (else_block -> ELSE COLON block .)
    NONE            reduce using rule 51 (else_block -> ELSE COLON block .)
    STRING          reduce using rule 51 (else_block -> ELSE COLON block .)
    TRIPLE_STRING   reduce using rule 51 (else_block -> ELSE COLON block .)
    NUMBER          reduce using rule 51 (else_block -> ELSE COLON block .)
    F_NUMBER        reduce using rule 51 (else_block -> ELSE COLON block .)
    BIN_NUMBER      reduce using rule 51 (else_block -> ELSE COLON block .)
    HEX_NUMBER      reduce using rule 51 (else_block -> ELSE COLON block .)
    OCT_NUMBER      reduce using rule 51 (else_block -> ELSE COLON block .)
    L_PARENTHESIS   reduce using rule 51 (else_block -> ELSE COLON block .)
    L_SQB           reduce using rule 51 (else_block -> ELSE COLON block .)
    L_CB            reduce using rule 51 (else_block -> ELSE COLON block .)
    DEDENT          reduce using rule 51 (else_block -> ELSE COLON block .)


state 240

    (36) block -> NEWLINE INDENT statements DEDENT .

    ELIF            reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    ELSE            reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    ENDMARKER       reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    DEF             reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    IF              reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    CLASS           reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    FOR             reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    WHILE           reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    PASS            reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    BREAK           reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    CONTINUE        reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    IDENTIFIER      reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    RETURN          reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    DEL             reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    GLOBAL          reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    NOT             reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    PLUS            reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    MINUS           reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    TRUE            reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    FALSE           reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    NONE            reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    STRING          reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    TRIPLE_STRING   reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    NUMBER          reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    F_NUMBER        reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    BIN_NUMBER      reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    HEX_NUMBER      reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    OCT_NUMBER      reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    L_PARENTHESIS   reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    L_SQB           reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    L_CB            reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)
    DEDENT          reduce using rule 36 (block -> NEWLINE INDENT statements DEDENT .)


state 241

    (38) class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .

    ENDMARKER       reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    DEF             reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    IF              reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    CLASS           reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    FOR             reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    WHILE           reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    PASS            reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    BREAK           reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    CONTINUE        reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    IDENTIFIER      reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    RETURN          reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    DEL             reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    GLOBAL          reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    NOT             reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    PLUS            reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    MINUS           reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    TRUE            reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    FALSE           reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    NONE            reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    STRING          reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    TRIPLE_STRING   reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    NUMBER          reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    F_NUMBER        reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    BIN_NUMBER      reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    HEX_NUMBER      reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    OCT_NUMBER      reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    L_PARENTHESIS   reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    L_SQB           reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    L_CB            reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    DEDENT          reduce using rule 38 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)


state 242

    (109) slice -> expression COLON expression COLON expression .

    R_SQB           reduce using rule 109 (slice -> expression COLON expression COLON expression .)
    COMMA           reduce using rule 109 (slice -> expression COLON expression COLON expression .)


state 243

    (48) elif_stmt -> ELIF expression COLON block . elif_stmt
    (49) elif_stmt -> ELIF expression COLON block . else_block
    (50) elif_stmt -> ELIF expression COLON block .
    (48) elif_stmt -> . ELIF expression COLON block elif_stmt
    (49) elif_stmt -> . ELIF expression COLON block else_block
    (50) elif_stmt -> . ELIF expression COLON block
    (51) else_block -> . ELSE COLON block

    ENDMARKER       reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    DEF             reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    IF              reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    CLASS           reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    FOR             reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    WHILE           reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    PASS            reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    BREAK           reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    CONTINUE        reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    IDENTIFIER      reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    RETURN          reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    DEL             reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    GLOBAL          reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    NOT             reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    PLUS            reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    MINUS           reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    TRUE            reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    FALSE           reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    NONE            reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    STRING          reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    TRIPLE_STRING   reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    NUMBER          reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    F_NUMBER        reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    BIN_NUMBER      reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    HEX_NUMBER      reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    OCT_NUMBER      reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    L_PARENTHESIS   reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    L_SQB           reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    L_CB            reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    DEDENT          reduce using rule 50 (elif_stmt -> ELIF expression COLON block .)
    ELIF            shift and go to state 216
    ELSE            shift and go to state 217

    elif_stmt                      shift and go to state 244
    else_block                     shift and go to state 245

state 244

    (48) elif_stmt -> ELIF expression COLON block elif_stmt .

    ENDMARKER       reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    DEF             reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    IF              reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    CLASS           reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    FOR             reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    WHILE           reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    PASS            reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    BREAK           reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    CONTINUE        reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    IDENTIFIER      reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    RETURN          reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    DEL             reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    GLOBAL          reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    NOT             reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    PLUS            reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    MINUS           reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    TRUE            reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    FALSE           reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    NONE            reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    STRING          reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    TRIPLE_STRING   reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    NUMBER          reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    F_NUMBER        reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    BIN_NUMBER      reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    HEX_NUMBER      reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    OCT_NUMBER      reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    L_PARENTHESIS   reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    L_SQB           reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    L_CB            reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    DEDENT          reduce using rule 48 (elif_stmt -> ELIF expression COLON block elif_stmt .)


state 245

    (49) elif_stmt -> ELIF expression COLON block else_block .

    ENDMARKER       reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    DEF             reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    IF              reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    CLASS           reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    FOR             reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    WHILE           reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    PASS            reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    BREAK           reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    CONTINUE        reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    IDENTIFIER      reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    RETURN          reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    DEL             reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    GLOBAL          reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    NOT             reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    PLUS            reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    MINUS           reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    TRUE            reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    FALSE           reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    NONE            reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    STRING          reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    TRIPLE_STRING   reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    NUMBER          reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    F_NUMBER        reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    BIN_NUMBER      reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    HEX_NUMBER      reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    OCT_NUMBER      reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    L_PARENTHESIS   reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    L_SQB           reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    L_CB            reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)
    DEDENT          reduce using rule 49 (elif_stmt -> ELIF expression COLON block else_block .)

