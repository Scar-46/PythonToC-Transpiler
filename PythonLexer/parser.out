Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    WHITESPACE

Grammar

Rule 0     S' -> file
Rule 1     file -> statements ENDMARKER
Rule 2     file -> ENDMARKER
Rule 3     statements -> statements statement
Rule 4     statements -> statements NEWLINE
Rule 5     statements -> statement
Rule 6     statement -> compound_stmt
Rule 7     statement -> simple_stmts
Rule 8     simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE
Rule 9     simple_stmts -> simple_stmt NEWLINE
Rule 10    simple_stmts -> simple_stmt
Rule 11    simple_stmt -> assignment
Rule 12    simple_stmt -> expressions
Rule 13    simple_stmt -> return_stmt
Rule 14    simple_stmt -> PASS
Rule 15    simple_stmt -> del_stmt
Rule 16    simple_stmt -> BREAK
Rule 17    simple_stmt -> CONTINUE
Rule 18    simple_stmt -> global_stmt
Rule 19    compound_stmt -> function_def
Rule 20    compound_stmt -> if_stmt
Rule 21    compound_stmt -> class_def
Rule 22    compound_stmt -> for_stmt
Rule 23    compound_stmt -> while_stmt
Rule 24    assignment -> targets augmentation_assignment expressions
Rule 25    assignment -> targets ASSIGNMENT assignment
Rule 26    assignment -> target ASSIGNMENT expressions
Rule 27    augmentation_assignment -> ADDITION_ASSIGNMENT
Rule 28    augmentation_assignment -> SUBTRACTION_ASSIGNMENT
Rule 29    augmentation_assignment -> MULTIPLICATION_ASSIGNMENT
Rule 30    augmentation_assignment -> DIVISION_ASSIGNMENT
Rule 31    augmentation_assignment -> MODULO_ASSIGNMENT
Rule 32    augmentation_assignment -> EXPONENTIATION_ASSIGNMENT
Rule 33    augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT
Rule 34    return_stmt -> RETURN expressions
Rule 35    global_stmt -> GLOBAL namelist
Rule 36    del_stmt -> DEL namelist
Rule 37    namelist -> namelist COMMA IDENTIFIER
Rule 38    namelist -> IDENTIFIER
Rule 39    block -> NEWLINE INDENT statements DEDENT
Rule 40    block -> simple_stmts
Rule 41    class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
Rule 42    class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
Rule 43    class_def -> CLASS IDENTIFIER COLON block
Rule 44    function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
Rule 45    function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
Rule 46    parameters -> parameters COMMA IDENTIFIER
Rule 47    parameters -> IDENTIFIER
Rule 48    if_stmt -> IF expression COLON block elif_stmt
Rule 49    if_stmt -> IF expression COLON block else_block
Rule 50    if_stmt -> IF expression COLON block
Rule 51    elif_stmt -> ELIF expression COLON block elif_stmt
Rule 52    elif_stmt -> ELIF expression COLON block else_block
Rule 53    elif_stmt -> ELIF expression COLON block
Rule 54    else_block -> ELSE COLON block
Rule 55    while_stmt -> WHILE expression COLON block else_block
Rule 56    while_stmt -> WHILE expression COLON block
Rule 57    for_stmt -> FOR targets IN expressions COLON else_block
Rule 58    for_stmt -> FOR targets IN expressions COLON block
Rule 59    expressions -> expressions COMMA expression
Rule 60    expressions -> expression
Rule 61    expression -> disjunction IF disjunction ELSE expression
Rule 62    expression -> disjunction
Rule 63    disjunction -> conjunction OR disjunction
Rule 64    disjunction -> conjunction
Rule 65    conjunction -> inversion AND inversion
Rule 66    conjunction -> inversion
Rule 67    inversion -> NOT inversion
Rule 68    inversion -> comparison
Rule 69    comparison -> bitwise_or compare_op_list
Rule 70    comparison -> bitwise_or
Rule 71    compare_op_list -> compare_op_list compare_op
Rule 72    compare_op_list -> compare_op
Rule 73    compare_op -> EQUALITY bitwise_or
Rule 74    compare_op -> INEQUALITY bitwise_or
Rule 75    compare_op -> GREATER_EQUAL bitwise_or
Rule 76    compare_op -> LESSER_EQUAL bitwise_or
Rule 77    compare_op -> GREATER bitwise_or
Rule 78    compare_op -> LESSER bitwise_or
Rule 79    compare_op -> NOT IN bitwise_or
Rule 80    compare_op -> IS NOT bitwise_or
Rule 81    compare_op -> IN bitwise_or
Rule 82    compare_op -> IS bitwise_or
Rule 83    bitwise_or -> bitwise_or PIPE bitwise_xor
Rule 84    bitwise_or -> bitwise_xor
Rule 85    bitwise_xor -> bitwise_xor CARET bitwise_and
Rule 86    bitwise_xor -> bitwise_and
Rule 87    bitwise_and -> bitwise_and AMPERSAND shift_expr
Rule 88    bitwise_and -> shift_expr
Rule 89    shift_expr -> shift_expr L_SHIFT sum
Rule 90    shift_expr -> shift_expr R_SHIFT sum
Rule 91    shift_expr -> sum
Rule 92    sum -> sum PLUS term
Rule 93    sum -> sum MINUS term
Rule 94    sum -> term
Rule 95    term -> term STAR factor
Rule 96    term -> term SLASH factor
Rule 97    term -> term DOUBLE_SLASH factor
Rule 98    term -> term PERCENT factor
Rule 99    term -> factor
Rule 100   factor -> PLUS factor
Rule 101   factor -> MINUS factor
Rule 102   factor -> power
Rule 103   power -> primary DOUBLE_STAR factor
Rule 104   power -> primary
Rule 105   primary -> primary L_PARENTHESIS arguments R_PARENTHESIS
Rule 106   primary -> L_PARENTHESIS expression R_PARENTHESIS
Rule 107   primary -> primary L_PARENTHESIS R_PARENTHESIS
Rule 108   primary -> primary L_SQB slices R_SQB
Rule 109   primary -> primary DOT IDENTIFIER
Rule 110   primary -> atomic
Rule 111   slices -> slices COMMA slice
Rule 112   slices -> slice
Rule 113   slice -> expression COLON expression COLON expression
Rule 114   slice -> expression COLON expression
Rule 115   slice -> expression COLON
Rule 116   slice -> COLON expression
Rule 117   slice -> COLON COLON
Rule 118   slice -> COLON
Rule 119   slice -> expression
Rule 120   atomic -> IDENTIFIER
Rule 121   atomic -> TRUE
Rule 122   atomic -> FALSE
Rule 123   atomic -> NONE
Rule 124   atomic -> strings
Rule 125   atomic -> number
Rule 126   atomic -> tuple
Rule 127   atomic -> list
Rule 128   atomic -> dict
Rule 129   atomic -> set
Rule 130   number -> NUMBER
Rule 131   number -> F_NUMBER
Rule 132   number -> BIN_NUMBER
Rule 133   number -> HEX_NUMBER
Rule 134   number -> OCT_NUMBER
Rule 135   arguments -> expressions
Rule 136   strings -> STRING
Rule 137   strings -> TRIPLE_STRING
Rule 138   list -> L_SQB expressions R_SQB
Rule 139   list -> L_SQB R_SQB
Rule 140   tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
Rule 141   tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS
Rule 142   tuple -> L_PARENTHESIS R_PARENTHESIS
Rule 143   set -> L_CB expressions R_CB
Rule 144   dict -> L_CB kvpairs R_CB
Rule 145   dict -> L_CB R_CB
Rule 146   kvpairs -> kvpair COMMA kvpairs
Rule 147   kvpairs -> kvpair COMMA
Rule 148   kvpairs -> kvpair
Rule 149   kvpair -> expression COLON expression
Rule 150   targets -> targets COMMA target
Rule 151   targets -> target
Rule 152   target -> target_primary DOT IDENTIFIER
Rule 153   target -> target_primary L_SQB slices R_SQB
Rule 154   target -> target_atomic
Rule 155   target_primary -> target_primary DOT IDENTIFIER
Rule 156   target_primary -> target_primary L_SQB slices R_SQB
Rule 157   target_primary -> target_primary L_PARENTHESIS R_PARENTHESIS
Rule 158   target_primary -> target_primary L_PARENTHESIS arguments R_PARENTHESIS
Rule 159   target_primary -> target_atomic
Rule 160   target_atomic -> IDENTIFIER
Rule 161   target_atomic -> L_SQB target_primary R_SQB
Rule 162   target_atomic -> L_PARENTHESIS targets R_PARENTHESIS
Rule 163   empty -> <empty>

Terminals, with rules where they appear

ADDITION_ASSIGNMENT  : 27
AMPERSAND            : 87
AND                  : 65
AS                   : 
ASSIGNMENT           : 25 26
BIN_NUMBER           : 132
BREAK                : 16
CARET                : 85
CLASS                : 41 42 43
COLON                : 41 42 43 44 45 48 49 50 51 52 53 54 55 56 57 58 113 113 114 115 116 117 117 118 149
COMMA                : 37 46 59 111 140 141 146 147 150
CONTINUE             : 17
DEDENT               : 39
DEF                  : 44 45
DEL                  : 36
DIVISION_ASSIGNMENT  : 30
DOT                  : 109 152 155
DOUBLE_SLASH         : 97
DOUBLE_STAR          : 103
ELIF                 : 51 52 53
ELSE                 : 54 61
ENDMARKER            : 1 2
EQUALITY             : 73
EXPONENTIATION_ASSIGNMENT : 32
FALSE                : 122
FLOOR_DIVISION_ASSIGNMENT : 33
FOR                  : 57 58
F_NUMBER             : 131
GLOBAL               : 35
GREATER              : 77
GREATER_EQUAL        : 75
HEX_NUMBER           : 133
IDENTIFIER           : 37 38 41 42 43 44 45 46 47 109 120 152 155 160
IF                   : 48 49 50 61
IN                   : 57 58 79 81
INDENT               : 39
INEQUALITY           : 74
IS                   : 80 82
LESSER               : 78
LESSER_EQUAL         : 76
L_CB                 : 143 144 145
L_PARENTHESIS        : 41 42 44 45 105 106 107 140 141 142 157 158 162
L_SHIFT              : 89
L_SQB                : 108 138 139 153 156 161
MINUS                : 93 101
MODULO_ASSIGNMENT    : 31
MULTIPLICATION_ASSIGNMENT : 29
NEWLINE              : 4 8 9 39
NONE                 : 123
NOT                  : 67 79 80
NUMBER               : 130
OCT_NUMBER           : 134
OR                   : 63
PASS                 : 14
PERCENT              : 98
PIPE                 : 83
PLUS                 : 92 100
RETURN               : 34
R_CB                 : 143 144 145
R_PARENTHESIS        : 41 42 44 45 105 106 107 140 141 142 157 158 162
R_SHIFT              : 90
R_SQB                : 108 138 139 153 156 161
SEMICOLON            : 8
SLASH                : 96
STAR                 : 95
STRING               : 136
SUBTRACTION_ASSIGNMENT : 28
TRIPLE_STRING        : 137
TRUE                 : 121
WHILE                : 55 56
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

arguments            : 41 105 158
assignment           : 11 25
atomic               : 110
augmentation_assignment : 24
bitwise_and          : 85 86 87
bitwise_or           : 69 70 73 74 75 76 77 78 79 80 81 82 83
bitwise_xor          : 83 84 85
block                : 41 42 43 44 45 48 49 50 51 52 53 54 55 56 58
class_def            : 21
compare_op           : 71 72
compare_op_list      : 69 71
comparison           : 68
compound_stmt        : 6
conjunction          : 63 64
del_stmt             : 15
dict                 : 128
disjunction          : 61 61 62 63
elif_stmt            : 48 51
else_block           : 49 52 55 57
empty                : 
expression           : 48 49 50 51 52 53 55 56 59 60 61 106 113 113 113 114 114 115 116 119 140 141 149 149
expressions          : 12 24 26 34 57 58 59 135 138 140 143
factor               : 95 96 97 98 99 100 101 103
file                 : 0
for_stmt             : 22
function_def         : 19
global_stmt          : 18
if_stmt              : 20
inversion            : 65 65 66 67
kvpair               : 146 147 148
kvpairs              : 144 146
list                 : 127
namelist             : 35 36 37
number               : 125
parameters           : 44 46
power                : 102
primary              : 103 104 105 107 108 109
return_stmt          : 13
set                  : 129
shift_expr           : 87 88 89 90
simple_stmt          : 8 9 10
simple_stmts         : 7 8 40
slice                : 111 112
slices               : 108 111 153 156
statement            : 3 5
statements           : 1 3 4 39
strings              : 124
sum                  : 89 90 91 92 93
target               : 26 150 151
target_atomic        : 154 159
target_primary       : 152 153 155 156 157 158 161
targets              : 24 25 57 58 150 162
term                 : 92 93 94 95 96 97 98
tuple                : 126
while_stmt           : 23

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . statements ENDMARKER
    (2) file -> . ENDMARKER
    (3) statements -> . statements statement
    (4) statements -> . statements NEWLINE
    (5) statements -> . statement
    (6) statement -> . compound_stmt
    (7) statement -> . simple_stmts
    (19) compound_stmt -> . function_def
    (20) compound_stmt -> . if_stmt
    (21) compound_stmt -> . class_def
    (22) compound_stmt -> . for_stmt
    (23) compound_stmt -> . while_stmt
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (44) function_def -> . DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (45) function_def -> . DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (48) if_stmt -> . IF expression COLON block elif_stmt
    (49) if_stmt -> . IF expression COLON block else_block
    (50) if_stmt -> . IF expression COLON block
    (41) class_def -> . CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (42) class_def -> . CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (43) class_def -> . CLASS IDENTIFIER COLON block
    (57) for_stmt -> . FOR targets IN expressions COLON else_block
    (58) for_stmt -> . FOR targets IN expressions COLON block
    (55) while_stmt -> . WHILE expression COLON block else_block
    (56) while_stmt -> . WHILE expression COLON block
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    ENDMARKER       shift and go to state 3
    DEF             shift and go to state 13
    IF              shift and go to state 16
    CLASS           shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 22
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    file                           shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 4
    compound_stmt                  shift and go to state 5
    simple_stmts                   shift and go to state 6
    function_def                   shift and go to state 7
    if_stmt                        shift and go to state 8
    class_def                      shift and go to state 9
    for_stmt                       shift and go to state 10
    while_stmt                     shift and go to state 11
    simple_stmt                    shift and go to state 12
    expression                     shift and go to state 17
    targets                        shift and go to state 20
    expressions                    shift and go to state 21
    assignment                     shift and go to state 23
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    target                         shift and go to state 30
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 1

    (0) S' -> file .



state 2

    (1) file -> statements . ENDMARKER
    (3) statements -> statements . statement
    (4) statements -> statements . NEWLINE
    (6) statement -> . compound_stmt
    (7) statement -> . simple_stmts
    (19) compound_stmt -> . function_def
    (20) compound_stmt -> . if_stmt
    (21) compound_stmt -> . class_def
    (22) compound_stmt -> . for_stmt
    (23) compound_stmt -> . while_stmt
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (44) function_def -> . DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (45) function_def -> . DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (48) if_stmt -> . IF expression COLON block elif_stmt
    (49) if_stmt -> . IF expression COLON block else_block
    (50) if_stmt -> . IF expression COLON block
    (41) class_def -> . CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (42) class_def -> . CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (43) class_def -> . CLASS IDENTIFIER COLON block
    (57) for_stmt -> . FOR targets IN expressions COLON else_block
    (58) for_stmt -> . FOR targets IN expressions COLON block
    (55) while_stmt -> . WHILE expression COLON block else_block
    (56) while_stmt -> . WHILE expression COLON block
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    ENDMARKER       shift and go to state 71
    NEWLINE         shift and go to state 73
    DEF             shift and go to state 13
    IF              shift and go to state 16
    CLASS           shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 22
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    statement                      shift and go to state 72
    compound_stmt                  shift and go to state 5
    simple_stmts                   shift and go to state 6
    function_def                   shift and go to state 7
    if_stmt                        shift and go to state 8
    class_def                      shift and go to state 9
    for_stmt                       shift and go to state 10
    while_stmt                     shift and go to state 11
    simple_stmt                    shift and go to state 12
    expression                     shift and go to state 17
    targets                        shift and go to state 20
    expressions                    shift and go to state 21
    assignment                     shift and go to state 23
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    target                         shift and go to state 30
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 3

    (2) file -> ENDMARKER .

    $end            reduce using rule 2 (file -> ENDMARKER .)


state 4

    (5) statements -> statement .

    ENDMARKER       reduce using rule 5 (statements -> statement .)
    NEWLINE         reduce using rule 5 (statements -> statement .)
    DEF             reduce using rule 5 (statements -> statement .)
    IF              reduce using rule 5 (statements -> statement .)
    CLASS           reduce using rule 5 (statements -> statement .)
    FOR             reduce using rule 5 (statements -> statement .)
    WHILE           reduce using rule 5 (statements -> statement .)
    PASS            reduce using rule 5 (statements -> statement .)
    BREAK           reduce using rule 5 (statements -> statement .)
    CONTINUE        reduce using rule 5 (statements -> statement .)
    RETURN          reduce using rule 5 (statements -> statement .)
    DEL             reduce using rule 5 (statements -> statement .)
    GLOBAL          reduce using rule 5 (statements -> statement .)
    IDENTIFIER      reduce using rule 5 (statements -> statement .)
    L_SQB           reduce using rule 5 (statements -> statement .)
    L_PARENTHESIS   reduce using rule 5 (statements -> statement .)
    NOT             reduce using rule 5 (statements -> statement .)
    PLUS            reduce using rule 5 (statements -> statement .)
    MINUS           reduce using rule 5 (statements -> statement .)
    TRUE            reduce using rule 5 (statements -> statement .)
    FALSE           reduce using rule 5 (statements -> statement .)
    NONE            reduce using rule 5 (statements -> statement .)
    STRING          reduce using rule 5 (statements -> statement .)
    TRIPLE_STRING   reduce using rule 5 (statements -> statement .)
    NUMBER          reduce using rule 5 (statements -> statement .)
    F_NUMBER        reduce using rule 5 (statements -> statement .)
    BIN_NUMBER      reduce using rule 5 (statements -> statement .)
    HEX_NUMBER      reduce using rule 5 (statements -> statement .)
    OCT_NUMBER      reduce using rule 5 (statements -> statement .)
    L_CB            reduce using rule 5 (statements -> statement .)
    DEDENT          reduce using rule 5 (statements -> statement .)


state 5

    (6) statement -> compound_stmt .

    ENDMARKER       reduce using rule 6 (statement -> compound_stmt .)
    NEWLINE         reduce using rule 6 (statement -> compound_stmt .)
    DEF             reduce using rule 6 (statement -> compound_stmt .)
    IF              reduce using rule 6 (statement -> compound_stmt .)
    CLASS           reduce using rule 6 (statement -> compound_stmt .)
    FOR             reduce using rule 6 (statement -> compound_stmt .)
    WHILE           reduce using rule 6 (statement -> compound_stmt .)
    PASS            reduce using rule 6 (statement -> compound_stmt .)
    BREAK           reduce using rule 6 (statement -> compound_stmt .)
    CONTINUE        reduce using rule 6 (statement -> compound_stmt .)
    RETURN          reduce using rule 6 (statement -> compound_stmt .)
    DEL             reduce using rule 6 (statement -> compound_stmt .)
    GLOBAL          reduce using rule 6 (statement -> compound_stmt .)
    IDENTIFIER      reduce using rule 6 (statement -> compound_stmt .)
    L_SQB           reduce using rule 6 (statement -> compound_stmt .)
    L_PARENTHESIS   reduce using rule 6 (statement -> compound_stmt .)
    NOT             reduce using rule 6 (statement -> compound_stmt .)
    PLUS            reduce using rule 6 (statement -> compound_stmt .)
    MINUS           reduce using rule 6 (statement -> compound_stmt .)
    TRUE            reduce using rule 6 (statement -> compound_stmt .)
    FALSE           reduce using rule 6 (statement -> compound_stmt .)
    NONE            reduce using rule 6 (statement -> compound_stmt .)
    STRING          reduce using rule 6 (statement -> compound_stmt .)
    TRIPLE_STRING   reduce using rule 6 (statement -> compound_stmt .)
    NUMBER          reduce using rule 6 (statement -> compound_stmt .)
    F_NUMBER        reduce using rule 6 (statement -> compound_stmt .)
    BIN_NUMBER      reduce using rule 6 (statement -> compound_stmt .)
    HEX_NUMBER      reduce using rule 6 (statement -> compound_stmt .)
    OCT_NUMBER      reduce using rule 6 (statement -> compound_stmt .)
    L_CB            reduce using rule 6 (statement -> compound_stmt .)
    DEDENT          reduce using rule 6 (statement -> compound_stmt .)


state 6

    (7) statement -> simple_stmts .
    (8) simple_stmts -> simple_stmts . SEMICOLON simple_stmt NEWLINE

    ENDMARKER       reduce using rule 7 (statement -> simple_stmts .)
    NEWLINE         reduce using rule 7 (statement -> simple_stmts .)
    DEF             reduce using rule 7 (statement -> simple_stmts .)
    IF              reduce using rule 7 (statement -> simple_stmts .)
    CLASS           reduce using rule 7 (statement -> simple_stmts .)
    FOR             reduce using rule 7 (statement -> simple_stmts .)
    WHILE           reduce using rule 7 (statement -> simple_stmts .)
    PASS            reduce using rule 7 (statement -> simple_stmts .)
    BREAK           reduce using rule 7 (statement -> simple_stmts .)
    CONTINUE        reduce using rule 7 (statement -> simple_stmts .)
    RETURN          reduce using rule 7 (statement -> simple_stmts .)
    DEL             reduce using rule 7 (statement -> simple_stmts .)
    GLOBAL          reduce using rule 7 (statement -> simple_stmts .)
    IDENTIFIER      reduce using rule 7 (statement -> simple_stmts .)
    L_SQB           reduce using rule 7 (statement -> simple_stmts .)
    L_PARENTHESIS   reduce using rule 7 (statement -> simple_stmts .)
    NOT             reduce using rule 7 (statement -> simple_stmts .)
    PLUS            reduce using rule 7 (statement -> simple_stmts .)
    MINUS           reduce using rule 7 (statement -> simple_stmts .)
    TRUE            reduce using rule 7 (statement -> simple_stmts .)
    FALSE           reduce using rule 7 (statement -> simple_stmts .)
    NONE            reduce using rule 7 (statement -> simple_stmts .)
    STRING          reduce using rule 7 (statement -> simple_stmts .)
    TRIPLE_STRING   reduce using rule 7 (statement -> simple_stmts .)
    NUMBER          reduce using rule 7 (statement -> simple_stmts .)
    F_NUMBER        reduce using rule 7 (statement -> simple_stmts .)
    BIN_NUMBER      reduce using rule 7 (statement -> simple_stmts .)
    HEX_NUMBER      reduce using rule 7 (statement -> simple_stmts .)
    OCT_NUMBER      reduce using rule 7 (statement -> simple_stmts .)
    L_CB            reduce using rule 7 (statement -> simple_stmts .)
    DEDENT          reduce using rule 7 (statement -> simple_stmts .)
    SEMICOLON       shift and go to state 74


state 7

    (19) compound_stmt -> function_def .

    ENDMARKER       reduce using rule 19 (compound_stmt -> function_def .)
    NEWLINE         reduce using rule 19 (compound_stmt -> function_def .)
    DEF             reduce using rule 19 (compound_stmt -> function_def .)
    IF              reduce using rule 19 (compound_stmt -> function_def .)
    CLASS           reduce using rule 19 (compound_stmt -> function_def .)
    FOR             reduce using rule 19 (compound_stmt -> function_def .)
    WHILE           reduce using rule 19 (compound_stmt -> function_def .)
    PASS            reduce using rule 19 (compound_stmt -> function_def .)
    BREAK           reduce using rule 19 (compound_stmt -> function_def .)
    CONTINUE        reduce using rule 19 (compound_stmt -> function_def .)
    RETURN          reduce using rule 19 (compound_stmt -> function_def .)
    DEL             reduce using rule 19 (compound_stmt -> function_def .)
    GLOBAL          reduce using rule 19 (compound_stmt -> function_def .)
    IDENTIFIER      reduce using rule 19 (compound_stmt -> function_def .)
    L_SQB           reduce using rule 19 (compound_stmt -> function_def .)
    L_PARENTHESIS   reduce using rule 19 (compound_stmt -> function_def .)
    NOT             reduce using rule 19 (compound_stmt -> function_def .)
    PLUS            reduce using rule 19 (compound_stmt -> function_def .)
    MINUS           reduce using rule 19 (compound_stmt -> function_def .)
    TRUE            reduce using rule 19 (compound_stmt -> function_def .)
    FALSE           reduce using rule 19 (compound_stmt -> function_def .)
    NONE            reduce using rule 19 (compound_stmt -> function_def .)
    STRING          reduce using rule 19 (compound_stmt -> function_def .)
    TRIPLE_STRING   reduce using rule 19 (compound_stmt -> function_def .)
    NUMBER          reduce using rule 19 (compound_stmt -> function_def .)
    F_NUMBER        reduce using rule 19 (compound_stmt -> function_def .)
    BIN_NUMBER      reduce using rule 19 (compound_stmt -> function_def .)
    HEX_NUMBER      reduce using rule 19 (compound_stmt -> function_def .)
    OCT_NUMBER      reduce using rule 19 (compound_stmt -> function_def .)
    L_CB            reduce using rule 19 (compound_stmt -> function_def .)
    DEDENT          reduce using rule 19 (compound_stmt -> function_def .)


state 8

    (20) compound_stmt -> if_stmt .

    ENDMARKER       reduce using rule 20 (compound_stmt -> if_stmt .)
    NEWLINE         reduce using rule 20 (compound_stmt -> if_stmt .)
    DEF             reduce using rule 20 (compound_stmt -> if_stmt .)
    IF              reduce using rule 20 (compound_stmt -> if_stmt .)
    CLASS           reduce using rule 20 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 20 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 20 (compound_stmt -> if_stmt .)
    PASS            reduce using rule 20 (compound_stmt -> if_stmt .)
    BREAK           reduce using rule 20 (compound_stmt -> if_stmt .)
    CONTINUE        reduce using rule 20 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 20 (compound_stmt -> if_stmt .)
    DEL             reduce using rule 20 (compound_stmt -> if_stmt .)
    GLOBAL          reduce using rule 20 (compound_stmt -> if_stmt .)
    IDENTIFIER      reduce using rule 20 (compound_stmt -> if_stmt .)
    L_SQB           reduce using rule 20 (compound_stmt -> if_stmt .)
    L_PARENTHESIS   reduce using rule 20 (compound_stmt -> if_stmt .)
    NOT             reduce using rule 20 (compound_stmt -> if_stmt .)
    PLUS            reduce using rule 20 (compound_stmt -> if_stmt .)
    MINUS           reduce using rule 20 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 20 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 20 (compound_stmt -> if_stmt .)
    NONE            reduce using rule 20 (compound_stmt -> if_stmt .)
    STRING          reduce using rule 20 (compound_stmt -> if_stmt .)
    TRIPLE_STRING   reduce using rule 20 (compound_stmt -> if_stmt .)
    NUMBER          reduce using rule 20 (compound_stmt -> if_stmt .)
    F_NUMBER        reduce using rule 20 (compound_stmt -> if_stmt .)
    BIN_NUMBER      reduce using rule 20 (compound_stmt -> if_stmt .)
    HEX_NUMBER      reduce using rule 20 (compound_stmt -> if_stmt .)
    OCT_NUMBER      reduce using rule 20 (compound_stmt -> if_stmt .)
    L_CB            reduce using rule 20 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 20 (compound_stmt -> if_stmt .)


state 9

    (21) compound_stmt -> class_def .

    ENDMARKER       reduce using rule 21 (compound_stmt -> class_def .)
    NEWLINE         reduce using rule 21 (compound_stmt -> class_def .)
    DEF             reduce using rule 21 (compound_stmt -> class_def .)
    IF              reduce using rule 21 (compound_stmt -> class_def .)
    CLASS           reduce using rule 21 (compound_stmt -> class_def .)
    FOR             reduce using rule 21 (compound_stmt -> class_def .)
    WHILE           reduce using rule 21 (compound_stmt -> class_def .)
    PASS            reduce using rule 21 (compound_stmt -> class_def .)
    BREAK           reduce using rule 21 (compound_stmt -> class_def .)
    CONTINUE        reduce using rule 21 (compound_stmt -> class_def .)
    RETURN          reduce using rule 21 (compound_stmt -> class_def .)
    DEL             reduce using rule 21 (compound_stmt -> class_def .)
    GLOBAL          reduce using rule 21 (compound_stmt -> class_def .)
    IDENTIFIER      reduce using rule 21 (compound_stmt -> class_def .)
    L_SQB           reduce using rule 21 (compound_stmt -> class_def .)
    L_PARENTHESIS   reduce using rule 21 (compound_stmt -> class_def .)
    NOT             reduce using rule 21 (compound_stmt -> class_def .)
    PLUS            reduce using rule 21 (compound_stmt -> class_def .)
    MINUS           reduce using rule 21 (compound_stmt -> class_def .)
    TRUE            reduce using rule 21 (compound_stmt -> class_def .)
    FALSE           reduce using rule 21 (compound_stmt -> class_def .)
    NONE            reduce using rule 21 (compound_stmt -> class_def .)
    STRING          reduce using rule 21 (compound_stmt -> class_def .)
    TRIPLE_STRING   reduce using rule 21 (compound_stmt -> class_def .)
    NUMBER          reduce using rule 21 (compound_stmt -> class_def .)
    F_NUMBER        reduce using rule 21 (compound_stmt -> class_def .)
    BIN_NUMBER      reduce using rule 21 (compound_stmt -> class_def .)
    HEX_NUMBER      reduce using rule 21 (compound_stmt -> class_def .)
    OCT_NUMBER      reduce using rule 21 (compound_stmt -> class_def .)
    L_CB            reduce using rule 21 (compound_stmt -> class_def .)
    DEDENT          reduce using rule 21 (compound_stmt -> class_def .)


state 10

    (22) compound_stmt -> for_stmt .

    ENDMARKER       reduce using rule 22 (compound_stmt -> for_stmt .)
    NEWLINE         reduce using rule 22 (compound_stmt -> for_stmt .)
    DEF             reduce using rule 22 (compound_stmt -> for_stmt .)
    IF              reduce using rule 22 (compound_stmt -> for_stmt .)
    CLASS           reduce using rule 22 (compound_stmt -> for_stmt .)
    FOR             reduce using rule 22 (compound_stmt -> for_stmt .)
    WHILE           reduce using rule 22 (compound_stmt -> for_stmt .)
    PASS            reduce using rule 22 (compound_stmt -> for_stmt .)
    BREAK           reduce using rule 22 (compound_stmt -> for_stmt .)
    CONTINUE        reduce using rule 22 (compound_stmt -> for_stmt .)
    RETURN          reduce using rule 22 (compound_stmt -> for_stmt .)
    DEL             reduce using rule 22 (compound_stmt -> for_stmt .)
    GLOBAL          reduce using rule 22 (compound_stmt -> for_stmt .)
    IDENTIFIER      reduce using rule 22 (compound_stmt -> for_stmt .)
    L_SQB           reduce using rule 22 (compound_stmt -> for_stmt .)
    L_PARENTHESIS   reduce using rule 22 (compound_stmt -> for_stmt .)
    NOT             reduce using rule 22 (compound_stmt -> for_stmt .)
    PLUS            reduce using rule 22 (compound_stmt -> for_stmt .)
    MINUS           reduce using rule 22 (compound_stmt -> for_stmt .)
    TRUE            reduce using rule 22 (compound_stmt -> for_stmt .)
    FALSE           reduce using rule 22 (compound_stmt -> for_stmt .)
    NONE            reduce using rule 22 (compound_stmt -> for_stmt .)
    STRING          reduce using rule 22 (compound_stmt -> for_stmt .)
    TRIPLE_STRING   reduce using rule 22 (compound_stmt -> for_stmt .)
    NUMBER          reduce using rule 22 (compound_stmt -> for_stmt .)
    F_NUMBER        reduce using rule 22 (compound_stmt -> for_stmt .)
    BIN_NUMBER      reduce using rule 22 (compound_stmt -> for_stmt .)
    HEX_NUMBER      reduce using rule 22 (compound_stmt -> for_stmt .)
    OCT_NUMBER      reduce using rule 22 (compound_stmt -> for_stmt .)
    L_CB            reduce using rule 22 (compound_stmt -> for_stmt .)
    DEDENT          reduce using rule 22 (compound_stmt -> for_stmt .)


state 11

    (23) compound_stmt -> while_stmt .

    ENDMARKER       reduce using rule 23 (compound_stmt -> while_stmt .)
    NEWLINE         reduce using rule 23 (compound_stmt -> while_stmt .)
    DEF             reduce using rule 23 (compound_stmt -> while_stmt .)
    IF              reduce using rule 23 (compound_stmt -> while_stmt .)
    CLASS           reduce using rule 23 (compound_stmt -> while_stmt .)
    FOR             reduce using rule 23 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 23 (compound_stmt -> while_stmt .)
    PASS            reduce using rule 23 (compound_stmt -> while_stmt .)
    BREAK           reduce using rule 23 (compound_stmt -> while_stmt .)
    CONTINUE        reduce using rule 23 (compound_stmt -> while_stmt .)
    RETURN          reduce using rule 23 (compound_stmt -> while_stmt .)
    DEL             reduce using rule 23 (compound_stmt -> while_stmt .)
    GLOBAL          reduce using rule 23 (compound_stmt -> while_stmt .)
    IDENTIFIER      reduce using rule 23 (compound_stmt -> while_stmt .)
    L_SQB           reduce using rule 23 (compound_stmt -> while_stmt .)
    L_PARENTHESIS   reduce using rule 23 (compound_stmt -> while_stmt .)
    NOT             reduce using rule 23 (compound_stmt -> while_stmt .)
    PLUS            reduce using rule 23 (compound_stmt -> while_stmt .)
    MINUS           reduce using rule 23 (compound_stmt -> while_stmt .)
    TRUE            reduce using rule 23 (compound_stmt -> while_stmt .)
    FALSE           reduce using rule 23 (compound_stmt -> while_stmt .)
    NONE            reduce using rule 23 (compound_stmt -> while_stmt .)
    STRING          reduce using rule 23 (compound_stmt -> while_stmt .)
    TRIPLE_STRING   reduce using rule 23 (compound_stmt -> while_stmt .)
    NUMBER          reduce using rule 23 (compound_stmt -> while_stmt .)
    F_NUMBER        reduce using rule 23 (compound_stmt -> while_stmt .)
    BIN_NUMBER      reduce using rule 23 (compound_stmt -> while_stmt .)
    HEX_NUMBER      reduce using rule 23 (compound_stmt -> while_stmt .)
    OCT_NUMBER      reduce using rule 23 (compound_stmt -> while_stmt .)
    L_CB            reduce using rule 23 (compound_stmt -> while_stmt .)
    DEDENT          reduce using rule 23 (compound_stmt -> while_stmt .)


state 12

    (9) simple_stmts -> simple_stmt . NEWLINE
    (10) simple_stmts -> simple_stmt .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 75
    SEMICOLON       reduce using rule 10 (simple_stmts -> simple_stmt .)
    ENDMARKER       reduce using rule 10 (simple_stmts -> simple_stmt .)
    DEF             reduce using rule 10 (simple_stmts -> simple_stmt .)
    IF              reduce using rule 10 (simple_stmts -> simple_stmt .)
    CLASS           reduce using rule 10 (simple_stmts -> simple_stmt .)
    FOR             reduce using rule 10 (simple_stmts -> simple_stmt .)
    WHILE           reduce using rule 10 (simple_stmts -> simple_stmt .)
    PASS            reduce using rule 10 (simple_stmts -> simple_stmt .)
    BREAK           reduce using rule 10 (simple_stmts -> simple_stmt .)
    CONTINUE        reduce using rule 10 (simple_stmts -> simple_stmt .)
    RETURN          reduce using rule 10 (simple_stmts -> simple_stmt .)
    DEL             reduce using rule 10 (simple_stmts -> simple_stmt .)
    GLOBAL          reduce using rule 10 (simple_stmts -> simple_stmt .)
    IDENTIFIER      reduce using rule 10 (simple_stmts -> simple_stmt .)
    L_SQB           reduce using rule 10 (simple_stmts -> simple_stmt .)
    L_PARENTHESIS   reduce using rule 10 (simple_stmts -> simple_stmt .)
    NOT             reduce using rule 10 (simple_stmts -> simple_stmt .)
    PLUS            reduce using rule 10 (simple_stmts -> simple_stmt .)
    MINUS           reduce using rule 10 (simple_stmts -> simple_stmt .)
    TRUE            reduce using rule 10 (simple_stmts -> simple_stmt .)
    FALSE           reduce using rule 10 (simple_stmts -> simple_stmt .)
    NONE            reduce using rule 10 (simple_stmts -> simple_stmt .)
    STRING          reduce using rule 10 (simple_stmts -> simple_stmt .)
    TRIPLE_STRING   reduce using rule 10 (simple_stmts -> simple_stmt .)
    NUMBER          reduce using rule 10 (simple_stmts -> simple_stmt .)
    F_NUMBER        reduce using rule 10 (simple_stmts -> simple_stmt .)
    BIN_NUMBER      reduce using rule 10 (simple_stmts -> simple_stmt .)
    HEX_NUMBER      reduce using rule 10 (simple_stmts -> simple_stmt .)
    OCT_NUMBER      reduce using rule 10 (simple_stmts -> simple_stmt .)
    L_CB            reduce using rule 10 (simple_stmts -> simple_stmt .)
    ELIF            reduce using rule 10 (simple_stmts -> simple_stmt .)
    ELSE            reduce using rule 10 (simple_stmts -> simple_stmt .)
    DEDENT          reduce using rule 10 (simple_stmts -> simple_stmt .)

  ! NEWLINE         [ reduce using rule 10 (simple_stmts -> simple_stmt .) ]


state 13

    (44) function_def -> DEF . IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (45) function_def -> DEF . IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block

    IDENTIFIER      shift and go to state 76


state 14

    (160) target_atomic -> IDENTIFIER .
    (120) atomic -> IDENTIFIER .

  ! reduce/reduce conflict for L_PARENTHESIS resolved using rule 120 (atomic -> IDENTIFIER .)
  ! reduce/reduce conflict for L_SQB resolved using rule 120 (atomic -> IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 120 (atomic -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 120 (atomic -> IDENTIFIER .)
  ! reduce/reduce conflict for R_PARENTHESIS resolved using rule 120 (atomic -> IDENTIFIER .)
  ! reduce/reduce conflict for R_SQB resolved using rule 120 (atomic -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 160 (target_atomic -> IDENTIFIER .)
    ADDITION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    SUBTRACTION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    MULTIPLICATION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    DIVISION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    MODULO_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    EXPONENTIATION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    FLOOR_DIVISION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    DOUBLE_STAR     reduce using rule 120 (atomic -> IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 120 (atomic -> IDENTIFIER .)
    L_SQB           reduce using rule 120 (atomic -> IDENTIFIER .)
    DOT             reduce using rule 120 (atomic -> IDENTIFIER .)
    STAR            reduce using rule 120 (atomic -> IDENTIFIER .)
    SLASH           reduce using rule 120 (atomic -> IDENTIFIER .)
    DOUBLE_SLASH    reduce using rule 120 (atomic -> IDENTIFIER .)
    PERCENT         reduce using rule 120 (atomic -> IDENTIFIER .)
    PLUS            reduce using rule 120 (atomic -> IDENTIFIER .)
    MINUS           reduce using rule 120 (atomic -> IDENTIFIER .)
    L_SHIFT         reduce using rule 120 (atomic -> IDENTIFIER .)
    R_SHIFT         reduce using rule 120 (atomic -> IDENTIFIER .)
    AMPERSAND       reduce using rule 120 (atomic -> IDENTIFIER .)
    CARET           reduce using rule 120 (atomic -> IDENTIFIER .)
    PIPE            reduce using rule 120 (atomic -> IDENTIFIER .)
    EQUALITY        reduce using rule 120 (atomic -> IDENTIFIER .)
    INEQUALITY      reduce using rule 120 (atomic -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 120 (atomic -> IDENTIFIER .)
    LESSER_EQUAL    reduce using rule 120 (atomic -> IDENTIFIER .)
    GREATER         reduce using rule 120 (atomic -> IDENTIFIER .)
    LESSER          reduce using rule 120 (atomic -> IDENTIFIER .)
    NOT             reduce using rule 120 (atomic -> IDENTIFIER .)
    IS              reduce using rule 120 (atomic -> IDENTIFIER .)
    IN              reduce using rule 120 (atomic -> IDENTIFIER .)
    AND             reduce using rule 120 (atomic -> IDENTIFIER .)
    OR              reduce using rule 120 (atomic -> IDENTIFIER .)
    IF              reduce using rule 120 (atomic -> IDENTIFIER .)
    COMMA           reduce using rule 120 (atomic -> IDENTIFIER .)
    NEWLINE         reduce using rule 120 (atomic -> IDENTIFIER .)
    SEMICOLON       reduce using rule 120 (atomic -> IDENTIFIER .)
    ENDMARKER       reduce using rule 120 (atomic -> IDENTIFIER .)
    DEF             reduce using rule 120 (atomic -> IDENTIFIER .)
    CLASS           reduce using rule 120 (atomic -> IDENTIFIER .)
    FOR             reduce using rule 120 (atomic -> IDENTIFIER .)
    WHILE           reduce using rule 120 (atomic -> IDENTIFIER .)
    PASS            reduce using rule 120 (atomic -> IDENTIFIER .)
    BREAK           reduce using rule 120 (atomic -> IDENTIFIER .)
    CONTINUE        reduce using rule 120 (atomic -> IDENTIFIER .)
    RETURN          reduce using rule 120 (atomic -> IDENTIFIER .)
    DEL             reduce using rule 120 (atomic -> IDENTIFIER .)
    GLOBAL          reduce using rule 120 (atomic -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 120 (atomic -> IDENTIFIER .)
    TRUE            reduce using rule 120 (atomic -> IDENTIFIER .)
    FALSE           reduce using rule 120 (atomic -> IDENTIFIER .)
    NONE            reduce using rule 120 (atomic -> IDENTIFIER .)
    STRING          reduce using rule 120 (atomic -> IDENTIFIER .)
    TRIPLE_STRING   reduce using rule 120 (atomic -> IDENTIFIER .)
    NUMBER          reduce using rule 120 (atomic -> IDENTIFIER .)
    F_NUMBER        reduce using rule 120 (atomic -> IDENTIFIER .)
    BIN_NUMBER      reduce using rule 120 (atomic -> IDENTIFIER .)
    HEX_NUMBER      reduce using rule 120 (atomic -> IDENTIFIER .)
    OCT_NUMBER      reduce using rule 120 (atomic -> IDENTIFIER .)
    L_CB            reduce using rule 120 (atomic -> IDENTIFIER .)
    R_PARENTHESIS   reduce using rule 120 (atomic -> IDENTIFIER .)
    R_SQB           reduce using rule 120 (atomic -> IDENTIFIER .)
    ELIF            reduce using rule 120 (atomic -> IDENTIFIER .)
    ELSE            reduce using rule 120 (atomic -> IDENTIFIER .)
    DEDENT          reduce using rule 120 (atomic -> IDENTIFIER .)

  ! COMMA           [ reduce using rule 160 (target_atomic -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 160 (target_atomic -> IDENTIFIER .) ]
  ! L_SQB           [ reduce using rule 160 (target_atomic -> IDENTIFIER .) ]
  ! L_PARENTHESIS   [ reduce using rule 160 (target_atomic -> IDENTIFIER .) ]
  ! R_PARENTHESIS   [ reduce using rule 160 (target_atomic -> IDENTIFIER .) ]
  ! R_SQB           [ reduce using rule 160 (target_atomic -> IDENTIFIER .) ]


state 15

    (162) target_atomic -> L_PARENTHESIS . targets R_PARENTHESIS
    (106) primary -> L_PARENTHESIS . expression R_PARENTHESIS
    (140) tuple -> L_PARENTHESIS . expression COMMA expressions R_PARENTHESIS
    (141) tuple -> L_PARENTHESIS . expression COMMA R_PARENTHESIS
    (142) tuple -> L_PARENTHESIS . R_PARENTHESIS
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_PARENTHESIS   shift and go to state 78
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    targets                        shift and go to state 77
    expression                     shift and go to state 79
    target                         shift and go to state 80
    disjunction                    shift and go to state 37
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 16

    (48) if_stmt -> IF . expression COLON block elif_stmt
    (49) if_stmt -> IF . expression COLON block else_block
    (50) if_stmt -> IF . expression COLON block
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 81
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 17

    (60) expressions -> expression .

    COMMA           reduce using rule 60 (expressions -> expression .)
    NEWLINE         reduce using rule 60 (expressions -> expression .)
    SEMICOLON       reduce using rule 60 (expressions -> expression .)
    ENDMARKER       reduce using rule 60 (expressions -> expression .)
    DEF             reduce using rule 60 (expressions -> expression .)
    IF              reduce using rule 60 (expressions -> expression .)
    CLASS           reduce using rule 60 (expressions -> expression .)
    FOR             reduce using rule 60 (expressions -> expression .)
    WHILE           reduce using rule 60 (expressions -> expression .)
    PASS            reduce using rule 60 (expressions -> expression .)
    BREAK           reduce using rule 60 (expressions -> expression .)
    CONTINUE        reduce using rule 60 (expressions -> expression .)
    RETURN          reduce using rule 60 (expressions -> expression .)
    DEL             reduce using rule 60 (expressions -> expression .)
    GLOBAL          reduce using rule 60 (expressions -> expression .)
    IDENTIFIER      reduce using rule 60 (expressions -> expression .)
    L_SQB           reduce using rule 60 (expressions -> expression .)
    L_PARENTHESIS   reduce using rule 60 (expressions -> expression .)
    NOT             reduce using rule 60 (expressions -> expression .)
    PLUS            reduce using rule 60 (expressions -> expression .)
    MINUS           reduce using rule 60 (expressions -> expression .)
    TRUE            reduce using rule 60 (expressions -> expression .)
    FALSE           reduce using rule 60 (expressions -> expression .)
    NONE            reduce using rule 60 (expressions -> expression .)
    STRING          reduce using rule 60 (expressions -> expression .)
    TRIPLE_STRING   reduce using rule 60 (expressions -> expression .)
    NUMBER          reduce using rule 60 (expressions -> expression .)
    F_NUMBER        reduce using rule 60 (expressions -> expression .)
    BIN_NUMBER      reduce using rule 60 (expressions -> expression .)
    HEX_NUMBER      reduce using rule 60 (expressions -> expression .)
    OCT_NUMBER      reduce using rule 60 (expressions -> expression .)
    L_CB            reduce using rule 60 (expressions -> expression .)
    ELIF            reduce using rule 60 (expressions -> expression .)
    ELSE            reduce using rule 60 (expressions -> expression .)
    DEDENT          reduce using rule 60 (expressions -> expression .)
    R_SQB           reduce using rule 60 (expressions -> expression .)
    R_PARENTHESIS   reduce using rule 60 (expressions -> expression .)
    COLON           reduce using rule 60 (expressions -> expression .)


state 18

    (41) class_def -> CLASS . IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (42) class_def -> CLASS . IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (43) class_def -> CLASS . IDENTIFIER COLON block

    IDENTIFIER      shift and go to state 85


state 19

    (57) for_stmt -> FOR . targets IN expressions COLON else_block
    (58) for_stmt -> FOR . targets IN expressions COLON block
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS

    IDENTIFIER      shift and go to state 87
    L_SQB           shift and go to state 88
    L_PARENTHESIS   shift and go to state 89

    targets                        shift and go to state 86
    target                         shift and go to state 80
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36

state 20

    (24) assignment -> targets . augmentation_assignment expressions
    (25) assignment -> targets . ASSIGNMENT assignment
    (150) targets -> targets . COMMA target
    (27) augmentation_assignment -> . ADDITION_ASSIGNMENT
    (28) augmentation_assignment -> . SUBTRACTION_ASSIGNMENT
    (29) augmentation_assignment -> . MULTIPLICATION_ASSIGNMENT
    (30) augmentation_assignment -> . DIVISION_ASSIGNMENT
    (31) augmentation_assignment -> . MODULO_ASSIGNMENT
    (32) augmentation_assignment -> . EXPONENTIATION_ASSIGNMENT
    (33) augmentation_assignment -> . FLOOR_DIVISION_ASSIGNMENT

    ASSIGNMENT      shift and go to state 91
    COMMA           shift and go to state 92
    ADDITION_ASSIGNMENT shift and go to state 93
    SUBTRACTION_ASSIGNMENT shift and go to state 94
    MULTIPLICATION_ASSIGNMENT shift and go to state 95
    DIVISION_ASSIGNMENT shift and go to state 96
    MODULO_ASSIGNMENT shift and go to state 97
    EXPONENTIATION_ASSIGNMENT shift and go to state 98
    FLOOR_DIVISION_ASSIGNMENT shift and go to state 99

    augmentation_assignment        shift and go to state 90

state 21

    (12) simple_stmt -> expressions .
    (59) expressions -> expressions . COMMA expression

    NEWLINE         reduce using rule 12 (simple_stmt -> expressions .)
    SEMICOLON       reduce using rule 12 (simple_stmt -> expressions .)
    ENDMARKER       reduce using rule 12 (simple_stmt -> expressions .)
    DEF             reduce using rule 12 (simple_stmt -> expressions .)
    IF              reduce using rule 12 (simple_stmt -> expressions .)
    CLASS           reduce using rule 12 (simple_stmt -> expressions .)
    FOR             reduce using rule 12 (simple_stmt -> expressions .)
    WHILE           reduce using rule 12 (simple_stmt -> expressions .)
    PASS            reduce using rule 12 (simple_stmt -> expressions .)
    BREAK           reduce using rule 12 (simple_stmt -> expressions .)
    CONTINUE        reduce using rule 12 (simple_stmt -> expressions .)
    RETURN          reduce using rule 12 (simple_stmt -> expressions .)
    DEL             reduce using rule 12 (simple_stmt -> expressions .)
    GLOBAL          reduce using rule 12 (simple_stmt -> expressions .)
    IDENTIFIER      reduce using rule 12 (simple_stmt -> expressions .)
    L_SQB           reduce using rule 12 (simple_stmt -> expressions .)
    L_PARENTHESIS   reduce using rule 12 (simple_stmt -> expressions .)
    NOT             reduce using rule 12 (simple_stmt -> expressions .)
    PLUS            reduce using rule 12 (simple_stmt -> expressions .)
    MINUS           reduce using rule 12 (simple_stmt -> expressions .)
    TRUE            reduce using rule 12 (simple_stmt -> expressions .)
    FALSE           reduce using rule 12 (simple_stmt -> expressions .)
    NONE            reduce using rule 12 (simple_stmt -> expressions .)
    STRING          reduce using rule 12 (simple_stmt -> expressions .)
    TRIPLE_STRING   reduce using rule 12 (simple_stmt -> expressions .)
    NUMBER          reduce using rule 12 (simple_stmt -> expressions .)
    F_NUMBER        reduce using rule 12 (simple_stmt -> expressions .)
    BIN_NUMBER      reduce using rule 12 (simple_stmt -> expressions .)
    HEX_NUMBER      reduce using rule 12 (simple_stmt -> expressions .)
    OCT_NUMBER      reduce using rule 12 (simple_stmt -> expressions .)
    L_CB            reduce using rule 12 (simple_stmt -> expressions .)
    ELIF            reduce using rule 12 (simple_stmt -> expressions .)
    ELSE            reduce using rule 12 (simple_stmt -> expressions .)
    DEDENT          reduce using rule 12 (simple_stmt -> expressions .)
    COMMA           shift and go to state 100


state 22

    (55) while_stmt -> WHILE . expression COLON block else_block
    (56) while_stmt -> WHILE . expression COLON block
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 101
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 23

    (11) simple_stmt -> assignment .

    NEWLINE         reduce using rule 11 (simple_stmt -> assignment .)
    SEMICOLON       reduce using rule 11 (simple_stmt -> assignment .)
    ENDMARKER       reduce using rule 11 (simple_stmt -> assignment .)
    DEF             reduce using rule 11 (simple_stmt -> assignment .)
    IF              reduce using rule 11 (simple_stmt -> assignment .)
    CLASS           reduce using rule 11 (simple_stmt -> assignment .)
    FOR             reduce using rule 11 (simple_stmt -> assignment .)
    WHILE           reduce using rule 11 (simple_stmt -> assignment .)
    PASS            reduce using rule 11 (simple_stmt -> assignment .)
    BREAK           reduce using rule 11 (simple_stmt -> assignment .)
    CONTINUE        reduce using rule 11 (simple_stmt -> assignment .)
    RETURN          reduce using rule 11 (simple_stmt -> assignment .)
    DEL             reduce using rule 11 (simple_stmt -> assignment .)
    GLOBAL          reduce using rule 11 (simple_stmt -> assignment .)
    IDENTIFIER      reduce using rule 11 (simple_stmt -> assignment .)
    L_SQB           reduce using rule 11 (simple_stmt -> assignment .)
    L_PARENTHESIS   reduce using rule 11 (simple_stmt -> assignment .)
    NOT             reduce using rule 11 (simple_stmt -> assignment .)
    PLUS            reduce using rule 11 (simple_stmt -> assignment .)
    MINUS           reduce using rule 11 (simple_stmt -> assignment .)
    TRUE            reduce using rule 11 (simple_stmt -> assignment .)
    FALSE           reduce using rule 11 (simple_stmt -> assignment .)
    NONE            reduce using rule 11 (simple_stmt -> assignment .)
    STRING          reduce using rule 11 (simple_stmt -> assignment .)
    TRIPLE_STRING   reduce using rule 11 (simple_stmt -> assignment .)
    NUMBER          reduce using rule 11 (simple_stmt -> assignment .)
    F_NUMBER        reduce using rule 11 (simple_stmt -> assignment .)
    BIN_NUMBER      reduce using rule 11 (simple_stmt -> assignment .)
    HEX_NUMBER      reduce using rule 11 (simple_stmt -> assignment .)
    OCT_NUMBER      reduce using rule 11 (simple_stmt -> assignment .)
    L_CB            reduce using rule 11 (simple_stmt -> assignment .)
    ELIF            reduce using rule 11 (simple_stmt -> assignment .)
    ELSE            reduce using rule 11 (simple_stmt -> assignment .)
    DEDENT          reduce using rule 11 (simple_stmt -> assignment .)


state 24

    (13) simple_stmt -> return_stmt .

    NEWLINE         reduce using rule 13 (simple_stmt -> return_stmt .)
    SEMICOLON       reduce using rule 13 (simple_stmt -> return_stmt .)
    ENDMARKER       reduce using rule 13 (simple_stmt -> return_stmt .)
    DEF             reduce using rule 13 (simple_stmt -> return_stmt .)
    IF              reduce using rule 13 (simple_stmt -> return_stmt .)
    CLASS           reduce using rule 13 (simple_stmt -> return_stmt .)
    FOR             reduce using rule 13 (simple_stmt -> return_stmt .)
    WHILE           reduce using rule 13 (simple_stmt -> return_stmt .)
    PASS            reduce using rule 13 (simple_stmt -> return_stmt .)
    BREAK           reduce using rule 13 (simple_stmt -> return_stmt .)
    CONTINUE        reduce using rule 13 (simple_stmt -> return_stmt .)
    RETURN          reduce using rule 13 (simple_stmt -> return_stmt .)
    DEL             reduce using rule 13 (simple_stmt -> return_stmt .)
    GLOBAL          reduce using rule 13 (simple_stmt -> return_stmt .)
    IDENTIFIER      reduce using rule 13 (simple_stmt -> return_stmt .)
    L_SQB           reduce using rule 13 (simple_stmt -> return_stmt .)
    L_PARENTHESIS   reduce using rule 13 (simple_stmt -> return_stmt .)
    NOT             reduce using rule 13 (simple_stmt -> return_stmt .)
    PLUS            reduce using rule 13 (simple_stmt -> return_stmt .)
    MINUS           reduce using rule 13 (simple_stmt -> return_stmt .)
    TRUE            reduce using rule 13 (simple_stmt -> return_stmt .)
    FALSE           reduce using rule 13 (simple_stmt -> return_stmt .)
    NONE            reduce using rule 13 (simple_stmt -> return_stmt .)
    STRING          reduce using rule 13 (simple_stmt -> return_stmt .)
    TRIPLE_STRING   reduce using rule 13 (simple_stmt -> return_stmt .)
    NUMBER          reduce using rule 13 (simple_stmt -> return_stmt .)
    F_NUMBER        reduce using rule 13 (simple_stmt -> return_stmt .)
    BIN_NUMBER      reduce using rule 13 (simple_stmt -> return_stmt .)
    HEX_NUMBER      reduce using rule 13 (simple_stmt -> return_stmt .)
    OCT_NUMBER      reduce using rule 13 (simple_stmt -> return_stmt .)
    L_CB            reduce using rule 13 (simple_stmt -> return_stmt .)
    ELIF            reduce using rule 13 (simple_stmt -> return_stmt .)
    ELSE            reduce using rule 13 (simple_stmt -> return_stmt .)
    DEDENT          reduce using rule 13 (simple_stmt -> return_stmt .)


state 25

    (14) simple_stmt -> PASS .

    NEWLINE         reduce using rule 14 (simple_stmt -> PASS .)
    SEMICOLON       reduce using rule 14 (simple_stmt -> PASS .)
    ENDMARKER       reduce using rule 14 (simple_stmt -> PASS .)
    DEF             reduce using rule 14 (simple_stmt -> PASS .)
    IF              reduce using rule 14 (simple_stmt -> PASS .)
    CLASS           reduce using rule 14 (simple_stmt -> PASS .)
    FOR             reduce using rule 14 (simple_stmt -> PASS .)
    WHILE           reduce using rule 14 (simple_stmt -> PASS .)
    PASS            reduce using rule 14 (simple_stmt -> PASS .)
    BREAK           reduce using rule 14 (simple_stmt -> PASS .)
    CONTINUE        reduce using rule 14 (simple_stmt -> PASS .)
    RETURN          reduce using rule 14 (simple_stmt -> PASS .)
    DEL             reduce using rule 14 (simple_stmt -> PASS .)
    GLOBAL          reduce using rule 14 (simple_stmt -> PASS .)
    IDENTIFIER      reduce using rule 14 (simple_stmt -> PASS .)
    L_SQB           reduce using rule 14 (simple_stmt -> PASS .)
    L_PARENTHESIS   reduce using rule 14 (simple_stmt -> PASS .)
    NOT             reduce using rule 14 (simple_stmt -> PASS .)
    PLUS            reduce using rule 14 (simple_stmt -> PASS .)
    MINUS           reduce using rule 14 (simple_stmt -> PASS .)
    TRUE            reduce using rule 14 (simple_stmt -> PASS .)
    FALSE           reduce using rule 14 (simple_stmt -> PASS .)
    NONE            reduce using rule 14 (simple_stmt -> PASS .)
    STRING          reduce using rule 14 (simple_stmt -> PASS .)
    TRIPLE_STRING   reduce using rule 14 (simple_stmt -> PASS .)
    NUMBER          reduce using rule 14 (simple_stmt -> PASS .)
    F_NUMBER        reduce using rule 14 (simple_stmt -> PASS .)
    BIN_NUMBER      reduce using rule 14 (simple_stmt -> PASS .)
    HEX_NUMBER      reduce using rule 14 (simple_stmt -> PASS .)
    OCT_NUMBER      reduce using rule 14 (simple_stmt -> PASS .)
    L_CB            reduce using rule 14 (simple_stmt -> PASS .)
    ELIF            reduce using rule 14 (simple_stmt -> PASS .)
    ELSE            reduce using rule 14 (simple_stmt -> PASS .)
    DEDENT          reduce using rule 14 (simple_stmt -> PASS .)


state 26

    (15) simple_stmt -> del_stmt .

    NEWLINE         reduce using rule 15 (simple_stmt -> del_stmt .)
    SEMICOLON       reduce using rule 15 (simple_stmt -> del_stmt .)
    ENDMARKER       reduce using rule 15 (simple_stmt -> del_stmt .)
    DEF             reduce using rule 15 (simple_stmt -> del_stmt .)
    IF              reduce using rule 15 (simple_stmt -> del_stmt .)
    CLASS           reduce using rule 15 (simple_stmt -> del_stmt .)
    FOR             reduce using rule 15 (simple_stmt -> del_stmt .)
    WHILE           reduce using rule 15 (simple_stmt -> del_stmt .)
    PASS            reduce using rule 15 (simple_stmt -> del_stmt .)
    BREAK           reduce using rule 15 (simple_stmt -> del_stmt .)
    CONTINUE        reduce using rule 15 (simple_stmt -> del_stmt .)
    RETURN          reduce using rule 15 (simple_stmt -> del_stmt .)
    DEL             reduce using rule 15 (simple_stmt -> del_stmt .)
    GLOBAL          reduce using rule 15 (simple_stmt -> del_stmt .)
    IDENTIFIER      reduce using rule 15 (simple_stmt -> del_stmt .)
    L_SQB           reduce using rule 15 (simple_stmt -> del_stmt .)
    L_PARENTHESIS   reduce using rule 15 (simple_stmt -> del_stmt .)
    NOT             reduce using rule 15 (simple_stmt -> del_stmt .)
    PLUS            reduce using rule 15 (simple_stmt -> del_stmt .)
    MINUS           reduce using rule 15 (simple_stmt -> del_stmt .)
    TRUE            reduce using rule 15 (simple_stmt -> del_stmt .)
    FALSE           reduce using rule 15 (simple_stmt -> del_stmt .)
    NONE            reduce using rule 15 (simple_stmt -> del_stmt .)
    STRING          reduce using rule 15 (simple_stmt -> del_stmt .)
    TRIPLE_STRING   reduce using rule 15 (simple_stmt -> del_stmt .)
    NUMBER          reduce using rule 15 (simple_stmt -> del_stmt .)
    F_NUMBER        reduce using rule 15 (simple_stmt -> del_stmt .)
    BIN_NUMBER      reduce using rule 15 (simple_stmt -> del_stmt .)
    HEX_NUMBER      reduce using rule 15 (simple_stmt -> del_stmt .)
    OCT_NUMBER      reduce using rule 15 (simple_stmt -> del_stmt .)
    L_CB            reduce using rule 15 (simple_stmt -> del_stmt .)
    ELIF            reduce using rule 15 (simple_stmt -> del_stmt .)
    ELSE            reduce using rule 15 (simple_stmt -> del_stmt .)
    DEDENT          reduce using rule 15 (simple_stmt -> del_stmt .)


state 27

    (16) simple_stmt -> BREAK .

    NEWLINE         reduce using rule 16 (simple_stmt -> BREAK .)
    SEMICOLON       reduce using rule 16 (simple_stmt -> BREAK .)
    ENDMARKER       reduce using rule 16 (simple_stmt -> BREAK .)
    DEF             reduce using rule 16 (simple_stmt -> BREAK .)
    IF              reduce using rule 16 (simple_stmt -> BREAK .)
    CLASS           reduce using rule 16 (simple_stmt -> BREAK .)
    FOR             reduce using rule 16 (simple_stmt -> BREAK .)
    WHILE           reduce using rule 16 (simple_stmt -> BREAK .)
    PASS            reduce using rule 16 (simple_stmt -> BREAK .)
    BREAK           reduce using rule 16 (simple_stmt -> BREAK .)
    CONTINUE        reduce using rule 16 (simple_stmt -> BREAK .)
    RETURN          reduce using rule 16 (simple_stmt -> BREAK .)
    DEL             reduce using rule 16 (simple_stmt -> BREAK .)
    GLOBAL          reduce using rule 16 (simple_stmt -> BREAK .)
    IDENTIFIER      reduce using rule 16 (simple_stmt -> BREAK .)
    L_SQB           reduce using rule 16 (simple_stmt -> BREAK .)
    L_PARENTHESIS   reduce using rule 16 (simple_stmt -> BREAK .)
    NOT             reduce using rule 16 (simple_stmt -> BREAK .)
    PLUS            reduce using rule 16 (simple_stmt -> BREAK .)
    MINUS           reduce using rule 16 (simple_stmt -> BREAK .)
    TRUE            reduce using rule 16 (simple_stmt -> BREAK .)
    FALSE           reduce using rule 16 (simple_stmt -> BREAK .)
    NONE            reduce using rule 16 (simple_stmt -> BREAK .)
    STRING          reduce using rule 16 (simple_stmt -> BREAK .)
    TRIPLE_STRING   reduce using rule 16 (simple_stmt -> BREAK .)
    NUMBER          reduce using rule 16 (simple_stmt -> BREAK .)
    F_NUMBER        reduce using rule 16 (simple_stmt -> BREAK .)
    BIN_NUMBER      reduce using rule 16 (simple_stmt -> BREAK .)
    HEX_NUMBER      reduce using rule 16 (simple_stmt -> BREAK .)
    OCT_NUMBER      reduce using rule 16 (simple_stmt -> BREAK .)
    L_CB            reduce using rule 16 (simple_stmt -> BREAK .)
    ELIF            reduce using rule 16 (simple_stmt -> BREAK .)
    ELSE            reduce using rule 16 (simple_stmt -> BREAK .)
    DEDENT          reduce using rule 16 (simple_stmt -> BREAK .)


state 28

    (17) simple_stmt -> CONTINUE .

    NEWLINE         reduce using rule 17 (simple_stmt -> CONTINUE .)
    SEMICOLON       reduce using rule 17 (simple_stmt -> CONTINUE .)
    ENDMARKER       reduce using rule 17 (simple_stmt -> CONTINUE .)
    DEF             reduce using rule 17 (simple_stmt -> CONTINUE .)
    IF              reduce using rule 17 (simple_stmt -> CONTINUE .)
    CLASS           reduce using rule 17 (simple_stmt -> CONTINUE .)
    FOR             reduce using rule 17 (simple_stmt -> CONTINUE .)
    WHILE           reduce using rule 17 (simple_stmt -> CONTINUE .)
    PASS            reduce using rule 17 (simple_stmt -> CONTINUE .)
    BREAK           reduce using rule 17 (simple_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 17 (simple_stmt -> CONTINUE .)
    RETURN          reduce using rule 17 (simple_stmt -> CONTINUE .)
    DEL             reduce using rule 17 (simple_stmt -> CONTINUE .)
    GLOBAL          reduce using rule 17 (simple_stmt -> CONTINUE .)
    IDENTIFIER      reduce using rule 17 (simple_stmt -> CONTINUE .)
    L_SQB           reduce using rule 17 (simple_stmt -> CONTINUE .)
    L_PARENTHESIS   reduce using rule 17 (simple_stmt -> CONTINUE .)
    NOT             reduce using rule 17 (simple_stmt -> CONTINUE .)
    PLUS            reduce using rule 17 (simple_stmt -> CONTINUE .)
    MINUS           reduce using rule 17 (simple_stmt -> CONTINUE .)
    TRUE            reduce using rule 17 (simple_stmt -> CONTINUE .)
    FALSE           reduce using rule 17 (simple_stmt -> CONTINUE .)
    NONE            reduce using rule 17 (simple_stmt -> CONTINUE .)
    STRING          reduce using rule 17 (simple_stmt -> CONTINUE .)
    TRIPLE_STRING   reduce using rule 17 (simple_stmt -> CONTINUE .)
    NUMBER          reduce using rule 17 (simple_stmt -> CONTINUE .)
    F_NUMBER        reduce using rule 17 (simple_stmt -> CONTINUE .)
    BIN_NUMBER      reduce using rule 17 (simple_stmt -> CONTINUE .)
    HEX_NUMBER      reduce using rule 17 (simple_stmt -> CONTINUE .)
    OCT_NUMBER      reduce using rule 17 (simple_stmt -> CONTINUE .)
    L_CB            reduce using rule 17 (simple_stmt -> CONTINUE .)
    ELIF            reduce using rule 17 (simple_stmt -> CONTINUE .)
    ELSE            reduce using rule 17 (simple_stmt -> CONTINUE .)
    DEDENT          reduce using rule 17 (simple_stmt -> CONTINUE .)


state 29

    (18) simple_stmt -> global_stmt .

    NEWLINE         reduce using rule 18 (simple_stmt -> global_stmt .)
    SEMICOLON       reduce using rule 18 (simple_stmt -> global_stmt .)
    ENDMARKER       reduce using rule 18 (simple_stmt -> global_stmt .)
    DEF             reduce using rule 18 (simple_stmt -> global_stmt .)
    IF              reduce using rule 18 (simple_stmt -> global_stmt .)
    CLASS           reduce using rule 18 (simple_stmt -> global_stmt .)
    FOR             reduce using rule 18 (simple_stmt -> global_stmt .)
    WHILE           reduce using rule 18 (simple_stmt -> global_stmt .)
    PASS            reduce using rule 18 (simple_stmt -> global_stmt .)
    BREAK           reduce using rule 18 (simple_stmt -> global_stmt .)
    CONTINUE        reduce using rule 18 (simple_stmt -> global_stmt .)
    RETURN          reduce using rule 18 (simple_stmt -> global_stmt .)
    DEL             reduce using rule 18 (simple_stmt -> global_stmt .)
    GLOBAL          reduce using rule 18 (simple_stmt -> global_stmt .)
    IDENTIFIER      reduce using rule 18 (simple_stmt -> global_stmt .)
    L_SQB           reduce using rule 18 (simple_stmt -> global_stmt .)
    L_PARENTHESIS   reduce using rule 18 (simple_stmt -> global_stmt .)
    NOT             reduce using rule 18 (simple_stmt -> global_stmt .)
    PLUS            reduce using rule 18 (simple_stmt -> global_stmt .)
    MINUS           reduce using rule 18 (simple_stmt -> global_stmt .)
    TRUE            reduce using rule 18 (simple_stmt -> global_stmt .)
    FALSE           reduce using rule 18 (simple_stmt -> global_stmt .)
    NONE            reduce using rule 18 (simple_stmt -> global_stmt .)
    STRING          reduce using rule 18 (simple_stmt -> global_stmt .)
    TRIPLE_STRING   reduce using rule 18 (simple_stmt -> global_stmt .)
    NUMBER          reduce using rule 18 (simple_stmt -> global_stmt .)
    F_NUMBER        reduce using rule 18 (simple_stmt -> global_stmt .)
    BIN_NUMBER      reduce using rule 18 (simple_stmt -> global_stmt .)
    HEX_NUMBER      reduce using rule 18 (simple_stmt -> global_stmt .)
    OCT_NUMBER      reduce using rule 18 (simple_stmt -> global_stmt .)
    L_CB            reduce using rule 18 (simple_stmt -> global_stmt .)
    ELIF            reduce using rule 18 (simple_stmt -> global_stmt .)
    ELSE            reduce using rule 18 (simple_stmt -> global_stmt .)
    DEDENT          reduce using rule 18 (simple_stmt -> global_stmt .)


state 30

    (26) assignment -> target . ASSIGNMENT expressions
    (151) targets -> target .

  ! shift/reduce conflict for ASSIGNMENT resolved as shift
    ASSIGNMENT      shift and go to state 102
    COMMA           reduce using rule 151 (targets -> target .)
    ADDITION_ASSIGNMENT reduce using rule 151 (targets -> target .)
    SUBTRACTION_ASSIGNMENT reduce using rule 151 (targets -> target .)
    MULTIPLICATION_ASSIGNMENT reduce using rule 151 (targets -> target .)
    DIVISION_ASSIGNMENT reduce using rule 151 (targets -> target .)
    MODULO_ASSIGNMENT reduce using rule 151 (targets -> target .)
    EXPONENTIATION_ASSIGNMENT reduce using rule 151 (targets -> target .)
    FLOOR_DIVISION_ASSIGNMENT reduce using rule 151 (targets -> target .)

  ! ASSIGNMENT      [ reduce using rule 151 (targets -> target .) ]


state 31

    (34) return_stmt -> RETURN . expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expressions                    shift and go to state 103
    expression                     shift and go to state 17
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 32

    (36) del_stmt -> DEL . namelist
    (37) namelist -> . namelist COMMA IDENTIFIER
    (38) namelist -> . IDENTIFIER

    IDENTIFIER      shift and go to state 105

    namelist                       shift and go to state 104

state 33

    (35) global_stmt -> GLOBAL . namelist
    (37) namelist -> . namelist COMMA IDENTIFIER
    (38) namelist -> . IDENTIFIER

    IDENTIFIER      shift and go to state 105

    namelist                       shift and go to state 106

state 34

    (152) target -> target_primary . DOT IDENTIFIER
    (153) target -> target_primary . L_SQB slices R_SQB
    (155) target_primary -> target_primary . DOT IDENTIFIER
    (156) target_primary -> target_primary . L_SQB slices R_SQB
    (157) target_primary -> target_primary . L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> target_primary . L_PARENTHESIS arguments R_PARENTHESIS

    DOT             shift and go to state 107
    L_SQB           shift and go to state 108
    L_PARENTHESIS   shift and go to state 109


state 35

    (161) target_atomic -> L_SQB . target_primary R_SQB
    (138) list -> L_SQB . expressions R_SQB
    (139) list -> L_SQB . R_SQB
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_SQB           shift and go to state 111
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    target_primary                 shift and go to state 110
    expressions                    shift and go to state 112
    target_atomic                  shift and go to state 113
    expression                     shift and go to state 17
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 36

    (154) target -> target_atomic .
    (159) target_primary -> target_atomic .

    ASSIGNMENT      reduce using rule 154 (target -> target_atomic .)
    COMMA           reduce using rule 154 (target -> target_atomic .)
    ADDITION_ASSIGNMENT reduce using rule 154 (target -> target_atomic .)
    SUBTRACTION_ASSIGNMENT reduce using rule 154 (target -> target_atomic .)
    MULTIPLICATION_ASSIGNMENT reduce using rule 154 (target -> target_atomic .)
    DIVISION_ASSIGNMENT reduce using rule 154 (target -> target_atomic .)
    MODULO_ASSIGNMENT reduce using rule 154 (target -> target_atomic .)
    EXPONENTIATION_ASSIGNMENT reduce using rule 154 (target -> target_atomic .)
    FLOOR_DIVISION_ASSIGNMENT reduce using rule 154 (target -> target_atomic .)
    R_PARENTHESIS   reduce using rule 154 (target -> target_atomic .)
    IN              reduce using rule 154 (target -> target_atomic .)
    DOT             reduce using rule 159 (target_primary -> target_atomic .)
    L_SQB           reduce using rule 159 (target_primary -> target_atomic .)
    L_PARENTHESIS   reduce using rule 159 (target_primary -> target_atomic .)


state 37

    (61) expression -> disjunction . IF disjunction ELSE expression
    (62) expression -> disjunction .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 114
    COMMA           reduce using rule 62 (expression -> disjunction .)
    NEWLINE         reduce using rule 62 (expression -> disjunction .)
    SEMICOLON       reduce using rule 62 (expression -> disjunction .)
    ENDMARKER       reduce using rule 62 (expression -> disjunction .)
    DEF             reduce using rule 62 (expression -> disjunction .)
    CLASS           reduce using rule 62 (expression -> disjunction .)
    FOR             reduce using rule 62 (expression -> disjunction .)
    WHILE           reduce using rule 62 (expression -> disjunction .)
    PASS            reduce using rule 62 (expression -> disjunction .)
    BREAK           reduce using rule 62 (expression -> disjunction .)
    CONTINUE        reduce using rule 62 (expression -> disjunction .)
    RETURN          reduce using rule 62 (expression -> disjunction .)
    DEL             reduce using rule 62 (expression -> disjunction .)
    GLOBAL          reduce using rule 62 (expression -> disjunction .)
    IDENTIFIER      reduce using rule 62 (expression -> disjunction .)
    L_SQB           reduce using rule 62 (expression -> disjunction .)
    L_PARENTHESIS   reduce using rule 62 (expression -> disjunction .)
    NOT             reduce using rule 62 (expression -> disjunction .)
    PLUS            reduce using rule 62 (expression -> disjunction .)
    MINUS           reduce using rule 62 (expression -> disjunction .)
    TRUE            reduce using rule 62 (expression -> disjunction .)
    FALSE           reduce using rule 62 (expression -> disjunction .)
    NONE            reduce using rule 62 (expression -> disjunction .)
    STRING          reduce using rule 62 (expression -> disjunction .)
    TRIPLE_STRING   reduce using rule 62 (expression -> disjunction .)
    NUMBER          reduce using rule 62 (expression -> disjunction .)
    F_NUMBER        reduce using rule 62 (expression -> disjunction .)
    BIN_NUMBER      reduce using rule 62 (expression -> disjunction .)
    HEX_NUMBER      reduce using rule 62 (expression -> disjunction .)
    OCT_NUMBER      reduce using rule 62 (expression -> disjunction .)
    L_CB            reduce using rule 62 (expression -> disjunction .)
    R_PARENTHESIS   reduce using rule 62 (expression -> disjunction .)
    COLON           reduce using rule 62 (expression -> disjunction .)
    ELIF            reduce using rule 62 (expression -> disjunction .)
    ELSE            reduce using rule 62 (expression -> disjunction .)
    DEDENT          reduce using rule 62 (expression -> disjunction .)
    R_SQB           reduce using rule 62 (expression -> disjunction .)
    R_CB            reduce using rule 62 (expression -> disjunction .)

  ! IF              [ reduce using rule 62 (expression -> disjunction .) ]


state 38

    (63) disjunction -> conjunction . OR disjunction
    (64) disjunction -> conjunction .

    OR              shift and go to state 115
    IF              reduce using rule 64 (disjunction -> conjunction .)
    COMMA           reduce using rule 64 (disjunction -> conjunction .)
    NEWLINE         reduce using rule 64 (disjunction -> conjunction .)
    SEMICOLON       reduce using rule 64 (disjunction -> conjunction .)
    ENDMARKER       reduce using rule 64 (disjunction -> conjunction .)
    DEF             reduce using rule 64 (disjunction -> conjunction .)
    CLASS           reduce using rule 64 (disjunction -> conjunction .)
    FOR             reduce using rule 64 (disjunction -> conjunction .)
    WHILE           reduce using rule 64 (disjunction -> conjunction .)
    PASS            reduce using rule 64 (disjunction -> conjunction .)
    BREAK           reduce using rule 64 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 64 (disjunction -> conjunction .)
    RETURN          reduce using rule 64 (disjunction -> conjunction .)
    DEL             reduce using rule 64 (disjunction -> conjunction .)
    GLOBAL          reduce using rule 64 (disjunction -> conjunction .)
    IDENTIFIER      reduce using rule 64 (disjunction -> conjunction .)
    L_SQB           reduce using rule 64 (disjunction -> conjunction .)
    L_PARENTHESIS   reduce using rule 64 (disjunction -> conjunction .)
    NOT             reduce using rule 64 (disjunction -> conjunction .)
    PLUS            reduce using rule 64 (disjunction -> conjunction .)
    MINUS           reduce using rule 64 (disjunction -> conjunction .)
    TRUE            reduce using rule 64 (disjunction -> conjunction .)
    FALSE           reduce using rule 64 (disjunction -> conjunction .)
    NONE            reduce using rule 64 (disjunction -> conjunction .)
    STRING          reduce using rule 64 (disjunction -> conjunction .)
    TRIPLE_STRING   reduce using rule 64 (disjunction -> conjunction .)
    NUMBER          reduce using rule 64 (disjunction -> conjunction .)
    F_NUMBER        reduce using rule 64 (disjunction -> conjunction .)
    BIN_NUMBER      reduce using rule 64 (disjunction -> conjunction .)
    HEX_NUMBER      reduce using rule 64 (disjunction -> conjunction .)
    OCT_NUMBER      reduce using rule 64 (disjunction -> conjunction .)
    L_CB            reduce using rule 64 (disjunction -> conjunction .)
    R_PARENTHESIS   reduce using rule 64 (disjunction -> conjunction .)
    COLON           reduce using rule 64 (disjunction -> conjunction .)
    ELIF            reduce using rule 64 (disjunction -> conjunction .)
    ELSE            reduce using rule 64 (disjunction -> conjunction .)
    DEDENT          reduce using rule 64 (disjunction -> conjunction .)
    R_SQB           reduce using rule 64 (disjunction -> conjunction .)
    R_CB            reduce using rule 64 (disjunction -> conjunction .)


state 39

    (65) conjunction -> inversion . AND inversion
    (66) conjunction -> inversion .

    AND             shift and go to state 116
    OR              reduce using rule 66 (conjunction -> inversion .)
    IF              reduce using rule 66 (conjunction -> inversion .)
    COMMA           reduce using rule 66 (conjunction -> inversion .)
    NEWLINE         reduce using rule 66 (conjunction -> inversion .)
    SEMICOLON       reduce using rule 66 (conjunction -> inversion .)
    ENDMARKER       reduce using rule 66 (conjunction -> inversion .)
    DEF             reduce using rule 66 (conjunction -> inversion .)
    CLASS           reduce using rule 66 (conjunction -> inversion .)
    FOR             reduce using rule 66 (conjunction -> inversion .)
    WHILE           reduce using rule 66 (conjunction -> inversion .)
    PASS            reduce using rule 66 (conjunction -> inversion .)
    BREAK           reduce using rule 66 (conjunction -> inversion .)
    CONTINUE        reduce using rule 66 (conjunction -> inversion .)
    RETURN          reduce using rule 66 (conjunction -> inversion .)
    DEL             reduce using rule 66 (conjunction -> inversion .)
    GLOBAL          reduce using rule 66 (conjunction -> inversion .)
    IDENTIFIER      reduce using rule 66 (conjunction -> inversion .)
    L_SQB           reduce using rule 66 (conjunction -> inversion .)
    L_PARENTHESIS   reduce using rule 66 (conjunction -> inversion .)
    NOT             reduce using rule 66 (conjunction -> inversion .)
    PLUS            reduce using rule 66 (conjunction -> inversion .)
    MINUS           reduce using rule 66 (conjunction -> inversion .)
    TRUE            reduce using rule 66 (conjunction -> inversion .)
    FALSE           reduce using rule 66 (conjunction -> inversion .)
    NONE            reduce using rule 66 (conjunction -> inversion .)
    STRING          reduce using rule 66 (conjunction -> inversion .)
    TRIPLE_STRING   reduce using rule 66 (conjunction -> inversion .)
    NUMBER          reduce using rule 66 (conjunction -> inversion .)
    F_NUMBER        reduce using rule 66 (conjunction -> inversion .)
    BIN_NUMBER      reduce using rule 66 (conjunction -> inversion .)
    HEX_NUMBER      reduce using rule 66 (conjunction -> inversion .)
    OCT_NUMBER      reduce using rule 66 (conjunction -> inversion .)
    L_CB            reduce using rule 66 (conjunction -> inversion .)
    R_PARENTHESIS   reduce using rule 66 (conjunction -> inversion .)
    COLON           reduce using rule 66 (conjunction -> inversion .)
    ELIF            reduce using rule 66 (conjunction -> inversion .)
    ELSE            reduce using rule 66 (conjunction -> inversion .)
    DEDENT          reduce using rule 66 (conjunction -> inversion .)
    R_SQB           reduce using rule 66 (conjunction -> inversion .)
    R_CB            reduce using rule 66 (conjunction -> inversion .)


state 40

    (67) inversion -> NOT . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    inversion                      shift and go to state 117
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 41

    (68) inversion -> comparison .

    AND             reduce using rule 68 (inversion -> comparison .)
    OR              reduce using rule 68 (inversion -> comparison .)
    IF              reduce using rule 68 (inversion -> comparison .)
    COMMA           reduce using rule 68 (inversion -> comparison .)
    NEWLINE         reduce using rule 68 (inversion -> comparison .)
    SEMICOLON       reduce using rule 68 (inversion -> comparison .)
    ENDMARKER       reduce using rule 68 (inversion -> comparison .)
    DEF             reduce using rule 68 (inversion -> comparison .)
    CLASS           reduce using rule 68 (inversion -> comparison .)
    FOR             reduce using rule 68 (inversion -> comparison .)
    WHILE           reduce using rule 68 (inversion -> comparison .)
    PASS            reduce using rule 68 (inversion -> comparison .)
    BREAK           reduce using rule 68 (inversion -> comparison .)
    CONTINUE        reduce using rule 68 (inversion -> comparison .)
    RETURN          reduce using rule 68 (inversion -> comparison .)
    DEL             reduce using rule 68 (inversion -> comparison .)
    GLOBAL          reduce using rule 68 (inversion -> comparison .)
    IDENTIFIER      reduce using rule 68 (inversion -> comparison .)
    L_SQB           reduce using rule 68 (inversion -> comparison .)
    L_PARENTHESIS   reduce using rule 68 (inversion -> comparison .)
    NOT             reduce using rule 68 (inversion -> comparison .)
    PLUS            reduce using rule 68 (inversion -> comparison .)
    MINUS           reduce using rule 68 (inversion -> comparison .)
    TRUE            reduce using rule 68 (inversion -> comparison .)
    FALSE           reduce using rule 68 (inversion -> comparison .)
    NONE            reduce using rule 68 (inversion -> comparison .)
    STRING          reduce using rule 68 (inversion -> comparison .)
    TRIPLE_STRING   reduce using rule 68 (inversion -> comparison .)
    NUMBER          reduce using rule 68 (inversion -> comparison .)
    F_NUMBER        reduce using rule 68 (inversion -> comparison .)
    BIN_NUMBER      reduce using rule 68 (inversion -> comparison .)
    HEX_NUMBER      reduce using rule 68 (inversion -> comparison .)
    OCT_NUMBER      reduce using rule 68 (inversion -> comparison .)
    L_CB            reduce using rule 68 (inversion -> comparison .)
    R_PARENTHESIS   reduce using rule 68 (inversion -> comparison .)
    COLON           reduce using rule 68 (inversion -> comparison .)
    ELIF            reduce using rule 68 (inversion -> comparison .)
    ELSE            reduce using rule 68 (inversion -> comparison .)
    DEDENT          reduce using rule 68 (inversion -> comparison .)
    R_SQB           reduce using rule 68 (inversion -> comparison .)
    R_CB            reduce using rule 68 (inversion -> comparison .)


state 42

    (69) comparison -> bitwise_or . compare_op_list
    (70) comparison -> bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor
    (71) compare_op_list -> . compare_op_list compare_op
    (72) compare_op_list -> . compare_op
    (73) compare_op -> . EQUALITY bitwise_or
    (74) compare_op -> . INEQUALITY bitwise_or
    (75) compare_op -> . GREATER_EQUAL bitwise_or
    (76) compare_op -> . LESSER_EQUAL bitwise_or
    (77) compare_op -> . GREATER bitwise_or
    (78) compare_op -> . LESSER bitwise_or
    (79) compare_op -> . NOT IN bitwise_or
    (80) compare_op -> . IS NOT bitwise_or
    (81) compare_op -> . IN bitwise_or
    (82) compare_op -> . IS bitwise_or

  ! shift/reduce conflict for NOT resolved as shift
    AND             reduce using rule 70 (comparison -> bitwise_or .)
    OR              reduce using rule 70 (comparison -> bitwise_or .)
    IF              reduce using rule 70 (comparison -> bitwise_or .)
    COMMA           reduce using rule 70 (comparison -> bitwise_or .)
    NEWLINE         reduce using rule 70 (comparison -> bitwise_or .)
    SEMICOLON       reduce using rule 70 (comparison -> bitwise_or .)
    ENDMARKER       reduce using rule 70 (comparison -> bitwise_or .)
    DEF             reduce using rule 70 (comparison -> bitwise_or .)
    CLASS           reduce using rule 70 (comparison -> bitwise_or .)
    FOR             reduce using rule 70 (comparison -> bitwise_or .)
    WHILE           reduce using rule 70 (comparison -> bitwise_or .)
    PASS            reduce using rule 70 (comparison -> bitwise_or .)
    BREAK           reduce using rule 70 (comparison -> bitwise_or .)
    CONTINUE        reduce using rule 70 (comparison -> bitwise_or .)
    RETURN          reduce using rule 70 (comparison -> bitwise_or .)
    DEL             reduce using rule 70 (comparison -> bitwise_or .)
    GLOBAL          reduce using rule 70 (comparison -> bitwise_or .)
    IDENTIFIER      reduce using rule 70 (comparison -> bitwise_or .)
    L_SQB           reduce using rule 70 (comparison -> bitwise_or .)
    L_PARENTHESIS   reduce using rule 70 (comparison -> bitwise_or .)
    PLUS            reduce using rule 70 (comparison -> bitwise_or .)
    MINUS           reduce using rule 70 (comparison -> bitwise_or .)
    TRUE            reduce using rule 70 (comparison -> bitwise_or .)
    FALSE           reduce using rule 70 (comparison -> bitwise_or .)
    NONE            reduce using rule 70 (comparison -> bitwise_or .)
    STRING          reduce using rule 70 (comparison -> bitwise_or .)
    TRIPLE_STRING   reduce using rule 70 (comparison -> bitwise_or .)
    NUMBER          reduce using rule 70 (comparison -> bitwise_or .)
    F_NUMBER        reduce using rule 70 (comparison -> bitwise_or .)
    BIN_NUMBER      reduce using rule 70 (comparison -> bitwise_or .)
    HEX_NUMBER      reduce using rule 70 (comparison -> bitwise_or .)
    OCT_NUMBER      reduce using rule 70 (comparison -> bitwise_or .)
    L_CB            reduce using rule 70 (comparison -> bitwise_or .)
    R_PARENTHESIS   reduce using rule 70 (comparison -> bitwise_or .)
    COLON           reduce using rule 70 (comparison -> bitwise_or .)
    ELIF            reduce using rule 70 (comparison -> bitwise_or .)
    ELSE            reduce using rule 70 (comparison -> bitwise_or .)
    DEDENT          reduce using rule 70 (comparison -> bitwise_or .)
    R_SQB           reduce using rule 70 (comparison -> bitwise_or .)
    R_CB            reduce using rule 70 (comparison -> bitwise_or .)
    PIPE            shift and go to state 119
    EQUALITY        shift and go to state 121
    INEQUALITY      shift and go to state 122
    GREATER_EQUAL   shift and go to state 123
    LESSER_EQUAL    shift and go to state 124
    GREATER         shift and go to state 125
    LESSER          shift and go to state 126
    NOT             shift and go to state 127
    IS              shift and go to state 129
    IN              shift and go to state 128

  ! NOT             [ reduce using rule 70 (comparison -> bitwise_or .) ]

    compare_op_list                shift and go to state 118
    compare_op                     shift and go to state 120

state 43

    (84) bitwise_or -> bitwise_xor .
    (85) bitwise_xor -> bitwise_xor . CARET bitwise_and

    PIPE            reduce using rule 84 (bitwise_or -> bitwise_xor .)
    EQUALITY        reduce using rule 84 (bitwise_or -> bitwise_xor .)
    INEQUALITY      reduce using rule 84 (bitwise_or -> bitwise_xor .)
    GREATER_EQUAL   reduce using rule 84 (bitwise_or -> bitwise_xor .)
    LESSER_EQUAL    reduce using rule 84 (bitwise_or -> bitwise_xor .)
    GREATER         reduce using rule 84 (bitwise_or -> bitwise_xor .)
    LESSER          reduce using rule 84 (bitwise_or -> bitwise_xor .)
    NOT             reduce using rule 84 (bitwise_or -> bitwise_xor .)
    IS              reduce using rule 84 (bitwise_or -> bitwise_xor .)
    IN              reduce using rule 84 (bitwise_or -> bitwise_xor .)
    AND             reduce using rule 84 (bitwise_or -> bitwise_xor .)
    OR              reduce using rule 84 (bitwise_or -> bitwise_xor .)
    IF              reduce using rule 84 (bitwise_or -> bitwise_xor .)
    COMMA           reduce using rule 84 (bitwise_or -> bitwise_xor .)
    NEWLINE         reduce using rule 84 (bitwise_or -> bitwise_xor .)
    SEMICOLON       reduce using rule 84 (bitwise_or -> bitwise_xor .)
    ENDMARKER       reduce using rule 84 (bitwise_or -> bitwise_xor .)
    DEF             reduce using rule 84 (bitwise_or -> bitwise_xor .)
    CLASS           reduce using rule 84 (bitwise_or -> bitwise_xor .)
    FOR             reduce using rule 84 (bitwise_or -> bitwise_xor .)
    WHILE           reduce using rule 84 (bitwise_or -> bitwise_xor .)
    PASS            reduce using rule 84 (bitwise_or -> bitwise_xor .)
    BREAK           reduce using rule 84 (bitwise_or -> bitwise_xor .)
    CONTINUE        reduce using rule 84 (bitwise_or -> bitwise_xor .)
    RETURN          reduce using rule 84 (bitwise_or -> bitwise_xor .)
    DEL             reduce using rule 84 (bitwise_or -> bitwise_xor .)
    GLOBAL          reduce using rule 84 (bitwise_or -> bitwise_xor .)
    IDENTIFIER      reduce using rule 84 (bitwise_or -> bitwise_xor .)
    L_SQB           reduce using rule 84 (bitwise_or -> bitwise_xor .)
    L_PARENTHESIS   reduce using rule 84 (bitwise_or -> bitwise_xor .)
    PLUS            reduce using rule 84 (bitwise_or -> bitwise_xor .)
    MINUS           reduce using rule 84 (bitwise_or -> bitwise_xor .)
    TRUE            reduce using rule 84 (bitwise_or -> bitwise_xor .)
    FALSE           reduce using rule 84 (bitwise_or -> bitwise_xor .)
    NONE            reduce using rule 84 (bitwise_or -> bitwise_xor .)
    STRING          reduce using rule 84 (bitwise_or -> bitwise_xor .)
    TRIPLE_STRING   reduce using rule 84 (bitwise_or -> bitwise_xor .)
    NUMBER          reduce using rule 84 (bitwise_or -> bitwise_xor .)
    F_NUMBER        reduce using rule 84 (bitwise_or -> bitwise_xor .)
    BIN_NUMBER      reduce using rule 84 (bitwise_or -> bitwise_xor .)
    HEX_NUMBER      reduce using rule 84 (bitwise_or -> bitwise_xor .)
    OCT_NUMBER      reduce using rule 84 (bitwise_or -> bitwise_xor .)
    L_CB            reduce using rule 84 (bitwise_or -> bitwise_xor .)
    R_PARENTHESIS   reduce using rule 84 (bitwise_or -> bitwise_xor .)
    COLON           reduce using rule 84 (bitwise_or -> bitwise_xor .)
    ELIF            reduce using rule 84 (bitwise_or -> bitwise_xor .)
    ELSE            reduce using rule 84 (bitwise_or -> bitwise_xor .)
    DEDENT          reduce using rule 84 (bitwise_or -> bitwise_xor .)
    R_SQB           reduce using rule 84 (bitwise_or -> bitwise_xor .)
    R_CB            reduce using rule 84 (bitwise_or -> bitwise_xor .)
    CARET           shift and go to state 130


state 44

    (86) bitwise_xor -> bitwise_and .
    (87) bitwise_and -> bitwise_and . AMPERSAND shift_expr

    CARET           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    PIPE            reduce using rule 86 (bitwise_xor -> bitwise_and .)
    EQUALITY        reduce using rule 86 (bitwise_xor -> bitwise_and .)
    INEQUALITY      reduce using rule 86 (bitwise_xor -> bitwise_and .)
    GREATER_EQUAL   reduce using rule 86 (bitwise_xor -> bitwise_and .)
    LESSER_EQUAL    reduce using rule 86 (bitwise_xor -> bitwise_and .)
    GREATER         reduce using rule 86 (bitwise_xor -> bitwise_and .)
    LESSER          reduce using rule 86 (bitwise_xor -> bitwise_and .)
    NOT             reduce using rule 86 (bitwise_xor -> bitwise_and .)
    IS              reduce using rule 86 (bitwise_xor -> bitwise_and .)
    IN              reduce using rule 86 (bitwise_xor -> bitwise_and .)
    AND             reduce using rule 86 (bitwise_xor -> bitwise_and .)
    OR              reduce using rule 86 (bitwise_xor -> bitwise_and .)
    IF              reduce using rule 86 (bitwise_xor -> bitwise_and .)
    COMMA           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    NEWLINE         reduce using rule 86 (bitwise_xor -> bitwise_and .)
    SEMICOLON       reduce using rule 86 (bitwise_xor -> bitwise_and .)
    ENDMARKER       reduce using rule 86 (bitwise_xor -> bitwise_and .)
    DEF             reduce using rule 86 (bitwise_xor -> bitwise_and .)
    CLASS           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    FOR             reduce using rule 86 (bitwise_xor -> bitwise_and .)
    WHILE           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    PASS            reduce using rule 86 (bitwise_xor -> bitwise_and .)
    BREAK           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    CONTINUE        reduce using rule 86 (bitwise_xor -> bitwise_and .)
    RETURN          reduce using rule 86 (bitwise_xor -> bitwise_and .)
    DEL             reduce using rule 86 (bitwise_xor -> bitwise_and .)
    GLOBAL          reduce using rule 86 (bitwise_xor -> bitwise_and .)
    IDENTIFIER      reduce using rule 86 (bitwise_xor -> bitwise_and .)
    L_SQB           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    L_PARENTHESIS   reduce using rule 86 (bitwise_xor -> bitwise_and .)
    PLUS            reduce using rule 86 (bitwise_xor -> bitwise_and .)
    MINUS           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    TRUE            reduce using rule 86 (bitwise_xor -> bitwise_and .)
    FALSE           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    NONE            reduce using rule 86 (bitwise_xor -> bitwise_and .)
    STRING          reduce using rule 86 (bitwise_xor -> bitwise_and .)
    TRIPLE_STRING   reduce using rule 86 (bitwise_xor -> bitwise_and .)
    NUMBER          reduce using rule 86 (bitwise_xor -> bitwise_and .)
    F_NUMBER        reduce using rule 86 (bitwise_xor -> bitwise_and .)
    BIN_NUMBER      reduce using rule 86 (bitwise_xor -> bitwise_and .)
    HEX_NUMBER      reduce using rule 86 (bitwise_xor -> bitwise_and .)
    OCT_NUMBER      reduce using rule 86 (bitwise_xor -> bitwise_and .)
    L_CB            reduce using rule 86 (bitwise_xor -> bitwise_and .)
    R_PARENTHESIS   reduce using rule 86 (bitwise_xor -> bitwise_and .)
    COLON           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    ELIF            reduce using rule 86 (bitwise_xor -> bitwise_and .)
    ELSE            reduce using rule 86 (bitwise_xor -> bitwise_and .)
    DEDENT          reduce using rule 86 (bitwise_xor -> bitwise_and .)
    R_SQB           reduce using rule 86 (bitwise_xor -> bitwise_and .)
    R_CB            reduce using rule 86 (bitwise_xor -> bitwise_and .)
    AMPERSAND       shift and go to state 131


state 45

    (88) bitwise_and -> shift_expr .
    (89) shift_expr -> shift_expr . L_SHIFT sum
    (90) shift_expr -> shift_expr . R_SHIFT sum

    AMPERSAND       reduce using rule 88 (bitwise_and -> shift_expr .)
    CARET           reduce using rule 88 (bitwise_and -> shift_expr .)
    PIPE            reduce using rule 88 (bitwise_and -> shift_expr .)
    EQUALITY        reduce using rule 88 (bitwise_and -> shift_expr .)
    INEQUALITY      reduce using rule 88 (bitwise_and -> shift_expr .)
    GREATER_EQUAL   reduce using rule 88 (bitwise_and -> shift_expr .)
    LESSER_EQUAL    reduce using rule 88 (bitwise_and -> shift_expr .)
    GREATER         reduce using rule 88 (bitwise_and -> shift_expr .)
    LESSER          reduce using rule 88 (bitwise_and -> shift_expr .)
    NOT             reduce using rule 88 (bitwise_and -> shift_expr .)
    IS              reduce using rule 88 (bitwise_and -> shift_expr .)
    IN              reduce using rule 88 (bitwise_and -> shift_expr .)
    AND             reduce using rule 88 (bitwise_and -> shift_expr .)
    OR              reduce using rule 88 (bitwise_and -> shift_expr .)
    IF              reduce using rule 88 (bitwise_and -> shift_expr .)
    COMMA           reduce using rule 88 (bitwise_and -> shift_expr .)
    NEWLINE         reduce using rule 88 (bitwise_and -> shift_expr .)
    SEMICOLON       reduce using rule 88 (bitwise_and -> shift_expr .)
    ENDMARKER       reduce using rule 88 (bitwise_and -> shift_expr .)
    DEF             reduce using rule 88 (bitwise_and -> shift_expr .)
    CLASS           reduce using rule 88 (bitwise_and -> shift_expr .)
    FOR             reduce using rule 88 (bitwise_and -> shift_expr .)
    WHILE           reduce using rule 88 (bitwise_and -> shift_expr .)
    PASS            reduce using rule 88 (bitwise_and -> shift_expr .)
    BREAK           reduce using rule 88 (bitwise_and -> shift_expr .)
    CONTINUE        reduce using rule 88 (bitwise_and -> shift_expr .)
    RETURN          reduce using rule 88 (bitwise_and -> shift_expr .)
    DEL             reduce using rule 88 (bitwise_and -> shift_expr .)
    GLOBAL          reduce using rule 88 (bitwise_and -> shift_expr .)
    IDENTIFIER      reduce using rule 88 (bitwise_and -> shift_expr .)
    L_SQB           reduce using rule 88 (bitwise_and -> shift_expr .)
    L_PARENTHESIS   reduce using rule 88 (bitwise_and -> shift_expr .)
    PLUS            reduce using rule 88 (bitwise_and -> shift_expr .)
    MINUS           reduce using rule 88 (bitwise_and -> shift_expr .)
    TRUE            reduce using rule 88 (bitwise_and -> shift_expr .)
    FALSE           reduce using rule 88 (bitwise_and -> shift_expr .)
    NONE            reduce using rule 88 (bitwise_and -> shift_expr .)
    STRING          reduce using rule 88 (bitwise_and -> shift_expr .)
    TRIPLE_STRING   reduce using rule 88 (bitwise_and -> shift_expr .)
    NUMBER          reduce using rule 88 (bitwise_and -> shift_expr .)
    F_NUMBER        reduce using rule 88 (bitwise_and -> shift_expr .)
    BIN_NUMBER      reduce using rule 88 (bitwise_and -> shift_expr .)
    HEX_NUMBER      reduce using rule 88 (bitwise_and -> shift_expr .)
    OCT_NUMBER      reduce using rule 88 (bitwise_and -> shift_expr .)
    L_CB            reduce using rule 88 (bitwise_and -> shift_expr .)
    R_PARENTHESIS   reduce using rule 88 (bitwise_and -> shift_expr .)
    COLON           reduce using rule 88 (bitwise_and -> shift_expr .)
    ELIF            reduce using rule 88 (bitwise_and -> shift_expr .)
    ELSE            reduce using rule 88 (bitwise_and -> shift_expr .)
    DEDENT          reduce using rule 88 (bitwise_and -> shift_expr .)
    R_SQB           reduce using rule 88 (bitwise_and -> shift_expr .)
    R_CB            reduce using rule 88 (bitwise_and -> shift_expr .)
    L_SHIFT         shift and go to state 132
    R_SHIFT         shift and go to state 133


state 46

    (91) shift_expr -> sum .
    (92) sum -> sum . PLUS term
    (93) sum -> sum . MINUS term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    L_SHIFT         reduce using rule 91 (shift_expr -> sum .)
    R_SHIFT         reduce using rule 91 (shift_expr -> sum .)
    AMPERSAND       reduce using rule 91 (shift_expr -> sum .)
    CARET           reduce using rule 91 (shift_expr -> sum .)
    PIPE            reduce using rule 91 (shift_expr -> sum .)
    EQUALITY        reduce using rule 91 (shift_expr -> sum .)
    INEQUALITY      reduce using rule 91 (shift_expr -> sum .)
    GREATER_EQUAL   reduce using rule 91 (shift_expr -> sum .)
    LESSER_EQUAL    reduce using rule 91 (shift_expr -> sum .)
    GREATER         reduce using rule 91 (shift_expr -> sum .)
    LESSER          reduce using rule 91 (shift_expr -> sum .)
    NOT             reduce using rule 91 (shift_expr -> sum .)
    IS              reduce using rule 91 (shift_expr -> sum .)
    IN              reduce using rule 91 (shift_expr -> sum .)
    AND             reduce using rule 91 (shift_expr -> sum .)
    OR              reduce using rule 91 (shift_expr -> sum .)
    IF              reduce using rule 91 (shift_expr -> sum .)
    COMMA           reduce using rule 91 (shift_expr -> sum .)
    NEWLINE         reduce using rule 91 (shift_expr -> sum .)
    SEMICOLON       reduce using rule 91 (shift_expr -> sum .)
    ENDMARKER       reduce using rule 91 (shift_expr -> sum .)
    DEF             reduce using rule 91 (shift_expr -> sum .)
    CLASS           reduce using rule 91 (shift_expr -> sum .)
    FOR             reduce using rule 91 (shift_expr -> sum .)
    WHILE           reduce using rule 91 (shift_expr -> sum .)
    PASS            reduce using rule 91 (shift_expr -> sum .)
    BREAK           reduce using rule 91 (shift_expr -> sum .)
    CONTINUE        reduce using rule 91 (shift_expr -> sum .)
    RETURN          reduce using rule 91 (shift_expr -> sum .)
    DEL             reduce using rule 91 (shift_expr -> sum .)
    GLOBAL          reduce using rule 91 (shift_expr -> sum .)
    IDENTIFIER      reduce using rule 91 (shift_expr -> sum .)
    L_SQB           reduce using rule 91 (shift_expr -> sum .)
    L_PARENTHESIS   reduce using rule 91 (shift_expr -> sum .)
    TRUE            reduce using rule 91 (shift_expr -> sum .)
    FALSE           reduce using rule 91 (shift_expr -> sum .)
    NONE            reduce using rule 91 (shift_expr -> sum .)
    STRING          reduce using rule 91 (shift_expr -> sum .)
    TRIPLE_STRING   reduce using rule 91 (shift_expr -> sum .)
    NUMBER          reduce using rule 91 (shift_expr -> sum .)
    F_NUMBER        reduce using rule 91 (shift_expr -> sum .)
    BIN_NUMBER      reduce using rule 91 (shift_expr -> sum .)
    HEX_NUMBER      reduce using rule 91 (shift_expr -> sum .)
    OCT_NUMBER      reduce using rule 91 (shift_expr -> sum .)
    L_CB            reduce using rule 91 (shift_expr -> sum .)
    R_PARENTHESIS   reduce using rule 91 (shift_expr -> sum .)
    COLON           reduce using rule 91 (shift_expr -> sum .)
    ELIF            reduce using rule 91 (shift_expr -> sum .)
    ELSE            reduce using rule 91 (shift_expr -> sum .)
    DEDENT          reduce using rule 91 (shift_expr -> sum .)
    R_SQB           reduce using rule 91 (shift_expr -> sum .)
    R_CB            reduce using rule 91 (shift_expr -> sum .)
    PLUS            shift and go to state 134
    MINUS           shift and go to state 135

  ! PLUS            [ reduce using rule 91 (shift_expr -> sum .) ]
  ! MINUS           [ reduce using rule 91 (shift_expr -> sum .) ]


state 47

    (100) factor -> PLUS . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    factor                         shift and go to state 136
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 48

    (94) sum -> term .
    (95) term -> term . STAR factor
    (96) term -> term . SLASH factor
    (97) term -> term . DOUBLE_SLASH factor
    (98) term -> term . PERCENT factor

    PLUS            reduce using rule 94 (sum -> term .)
    MINUS           reduce using rule 94 (sum -> term .)
    L_SHIFT         reduce using rule 94 (sum -> term .)
    R_SHIFT         reduce using rule 94 (sum -> term .)
    AMPERSAND       reduce using rule 94 (sum -> term .)
    CARET           reduce using rule 94 (sum -> term .)
    PIPE            reduce using rule 94 (sum -> term .)
    EQUALITY        reduce using rule 94 (sum -> term .)
    INEQUALITY      reduce using rule 94 (sum -> term .)
    GREATER_EQUAL   reduce using rule 94 (sum -> term .)
    LESSER_EQUAL    reduce using rule 94 (sum -> term .)
    GREATER         reduce using rule 94 (sum -> term .)
    LESSER          reduce using rule 94 (sum -> term .)
    NOT             reduce using rule 94 (sum -> term .)
    IS              reduce using rule 94 (sum -> term .)
    IN              reduce using rule 94 (sum -> term .)
    AND             reduce using rule 94 (sum -> term .)
    OR              reduce using rule 94 (sum -> term .)
    IF              reduce using rule 94 (sum -> term .)
    COMMA           reduce using rule 94 (sum -> term .)
    NEWLINE         reduce using rule 94 (sum -> term .)
    SEMICOLON       reduce using rule 94 (sum -> term .)
    ENDMARKER       reduce using rule 94 (sum -> term .)
    DEF             reduce using rule 94 (sum -> term .)
    CLASS           reduce using rule 94 (sum -> term .)
    FOR             reduce using rule 94 (sum -> term .)
    WHILE           reduce using rule 94 (sum -> term .)
    PASS            reduce using rule 94 (sum -> term .)
    BREAK           reduce using rule 94 (sum -> term .)
    CONTINUE        reduce using rule 94 (sum -> term .)
    RETURN          reduce using rule 94 (sum -> term .)
    DEL             reduce using rule 94 (sum -> term .)
    GLOBAL          reduce using rule 94 (sum -> term .)
    IDENTIFIER      reduce using rule 94 (sum -> term .)
    L_SQB           reduce using rule 94 (sum -> term .)
    L_PARENTHESIS   reduce using rule 94 (sum -> term .)
    TRUE            reduce using rule 94 (sum -> term .)
    FALSE           reduce using rule 94 (sum -> term .)
    NONE            reduce using rule 94 (sum -> term .)
    STRING          reduce using rule 94 (sum -> term .)
    TRIPLE_STRING   reduce using rule 94 (sum -> term .)
    NUMBER          reduce using rule 94 (sum -> term .)
    F_NUMBER        reduce using rule 94 (sum -> term .)
    BIN_NUMBER      reduce using rule 94 (sum -> term .)
    HEX_NUMBER      reduce using rule 94 (sum -> term .)
    OCT_NUMBER      reduce using rule 94 (sum -> term .)
    L_CB            reduce using rule 94 (sum -> term .)
    R_PARENTHESIS   reduce using rule 94 (sum -> term .)
    COLON           reduce using rule 94 (sum -> term .)
    ELIF            reduce using rule 94 (sum -> term .)
    ELSE            reduce using rule 94 (sum -> term .)
    DEDENT          reduce using rule 94 (sum -> term .)
    R_SQB           reduce using rule 94 (sum -> term .)
    R_CB            reduce using rule 94 (sum -> term .)
    STAR            shift and go to state 137
    SLASH           shift and go to state 138
    DOUBLE_SLASH    shift and go to state 139
    PERCENT         shift and go to state 140


state 49

    (101) factor -> MINUS . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    factor                         shift and go to state 141
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 50

    (99) term -> factor .

    STAR            reduce using rule 99 (term -> factor .)
    SLASH           reduce using rule 99 (term -> factor .)
    DOUBLE_SLASH    reduce using rule 99 (term -> factor .)
    PERCENT         reduce using rule 99 (term -> factor .)
    PLUS            reduce using rule 99 (term -> factor .)
    MINUS           reduce using rule 99 (term -> factor .)
    L_SHIFT         reduce using rule 99 (term -> factor .)
    R_SHIFT         reduce using rule 99 (term -> factor .)
    AMPERSAND       reduce using rule 99 (term -> factor .)
    CARET           reduce using rule 99 (term -> factor .)
    PIPE            reduce using rule 99 (term -> factor .)
    EQUALITY        reduce using rule 99 (term -> factor .)
    INEQUALITY      reduce using rule 99 (term -> factor .)
    GREATER_EQUAL   reduce using rule 99 (term -> factor .)
    LESSER_EQUAL    reduce using rule 99 (term -> factor .)
    GREATER         reduce using rule 99 (term -> factor .)
    LESSER          reduce using rule 99 (term -> factor .)
    NOT             reduce using rule 99 (term -> factor .)
    IS              reduce using rule 99 (term -> factor .)
    IN              reduce using rule 99 (term -> factor .)
    AND             reduce using rule 99 (term -> factor .)
    OR              reduce using rule 99 (term -> factor .)
    IF              reduce using rule 99 (term -> factor .)
    COMMA           reduce using rule 99 (term -> factor .)
    NEWLINE         reduce using rule 99 (term -> factor .)
    SEMICOLON       reduce using rule 99 (term -> factor .)
    ENDMARKER       reduce using rule 99 (term -> factor .)
    DEF             reduce using rule 99 (term -> factor .)
    CLASS           reduce using rule 99 (term -> factor .)
    FOR             reduce using rule 99 (term -> factor .)
    WHILE           reduce using rule 99 (term -> factor .)
    PASS            reduce using rule 99 (term -> factor .)
    BREAK           reduce using rule 99 (term -> factor .)
    CONTINUE        reduce using rule 99 (term -> factor .)
    RETURN          reduce using rule 99 (term -> factor .)
    DEL             reduce using rule 99 (term -> factor .)
    GLOBAL          reduce using rule 99 (term -> factor .)
    IDENTIFIER      reduce using rule 99 (term -> factor .)
    L_SQB           reduce using rule 99 (term -> factor .)
    L_PARENTHESIS   reduce using rule 99 (term -> factor .)
    TRUE            reduce using rule 99 (term -> factor .)
    FALSE           reduce using rule 99 (term -> factor .)
    NONE            reduce using rule 99 (term -> factor .)
    STRING          reduce using rule 99 (term -> factor .)
    TRIPLE_STRING   reduce using rule 99 (term -> factor .)
    NUMBER          reduce using rule 99 (term -> factor .)
    F_NUMBER        reduce using rule 99 (term -> factor .)
    BIN_NUMBER      reduce using rule 99 (term -> factor .)
    HEX_NUMBER      reduce using rule 99 (term -> factor .)
    OCT_NUMBER      reduce using rule 99 (term -> factor .)
    L_CB            reduce using rule 99 (term -> factor .)
    R_PARENTHESIS   reduce using rule 99 (term -> factor .)
    COLON           reduce using rule 99 (term -> factor .)
    ELIF            reduce using rule 99 (term -> factor .)
    ELSE            reduce using rule 99 (term -> factor .)
    DEDENT          reduce using rule 99 (term -> factor .)
    R_SQB           reduce using rule 99 (term -> factor .)
    R_CB            reduce using rule 99 (term -> factor .)


state 51

    (102) factor -> power .

    STAR            reduce using rule 102 (factor -> power .)
    SLASH           reduce using rule 102 (factor -> power .)
    DOUBLE_SLASH    reduce using rule 102 (factor -> power .)
    PERCENT         reduce using rule 102 (factor -> power .)
    PLUS            reduce using rule 102 (factor -> power .)
    MINUS           reduce using rule 102 (factor -> power .)
    L_SHIFT         reduce using rule 102 (factor -> power .)
    R_SHIFT         reduce using rule 102 (factor -> power .)
    AMPERSAND       reduce using rule 102 (factor -> power .)
    CARET           reduce using rule 102 (factor -> power .)
    PIPE            reduce using rule 102 (factor -> power .)
    EQUALITY        reduce using rule 102 (factor -> power .)
    INEQUALITY      reduce using rule 102 (factor -> power .)
    GREATER_EQUAL   reduce using rule 102 (factor -> power .)
    LESSER_EQUAL    reduce using rule 102 (factor -> power .)
    GREATER         reduce using rule 102 (factor -> power .)
    LESSER          reduce using rule 102 (factor -> power .)
    NOT             reduce using rule 102 (factor -> power .)
    IS              reduce using rule 102 (factor -> power .)
    IN              reduce using rule 102 (factor -> power .)
    AND             reduce using rule 102 (factor -> power .)
    OR              reduce using rule 102 (factor -> power .)
    IF              reduce using rule 102 (factor -> power .)
    COMMA           reduce using rule 102 (factor -> power .)
    NEWLINE         reduce using rule 102 (factor -> power .)
    SEMICOLON       reduce using rule 102 (factor -> power .)
    ENDMARKER       reduce using rule 102 (factor -> power .)
    DEF             reduce using rule 102 (factor -> power .)
    CLASS           reduce using rule 102 (factor -> power .)
    FOR             reduce using rule 102 (factor -> power .)
    WHILE           reduce using rule 102 (factor -> power .)
    PASS            reduce using rule 102 (factor -> power .)
    BREAK           reduce using rule 102 (factor -> power .)
    CONTINUE        reduce using rule 102 (factor -> power .)
    RETURN          reduce using rule 102 (factor -> power .)
    DEL             reduce using rule 102 (factor -> power .)
    GLOBAL          reduce using rule 102 (factor -> power .)
    IDENTIFIER      reduce using rule 102 (factor -> power .)
    L_SQB           reduce using rule 102 (factor -> power .)
    L_PARENTHESIS   reduce using rule 102 (factor -> power .)
    TRUE            reduce using rule 102 (factor -> power .)
    FALSE           reduce using rule 102 (factor -> power .)
    NONE            reduce using rule 102 (factor -> power .)
    STRING          reduce using rule 102 (factor -> power .)
    TRIPLE_STRING   reduce using rule 102 (factor -> power .)
    NUMBER          reduce using rule 102 (factor -> power .)
    F_NUMBER        reduce using rule 102 (factor -> power .)
    BIN_NUMBER      reduce using rule 102 (factor -> power .)
    HEX_NUMBER      reduce using rule 102 (factor -> power .)
    OCT_NUMBER      reduce using rule 102 (factor -> power .)
    L_CB            reduce using rule 102 (factor -> power .)
    R_PARENTHESIS   reduce using rule 102 (factor -> power .)
    COLON           reduce using rule 102 (factor -> power .)
    ELIF            reduce using rule 102 (factor -> power .)
    ELSE            reduce using rule 102 (factor -> power .)
    DEDENT          reduce using rule 102 (factor -> power .)
    R_SQB           reduce using rule 102 (factor -> power .)
    R_CB            reduce using rule 102 (factor -> power .)


state 52

    (103) power -> primary . DOUBLE_STAR factor
    (104) power -> primary .
    (105) primary -> primary . L_PARENTHESIS arguments R_PARENTHESIS
    (107) primary -> primary . L_PARENTHESIS R_PARENTHESIS
    (108) primary -> primary . L_SQB slices R_SQB
    (109) primary -> primary . DOT IDENTIFIER

  ! shift/reduce conflict for L_PARENTHESIS resolved as shift
  ! shift/reduce conflict for L_SQB resolved as shift
    DOUBLE_STAR     shift and go to state 142
    STAR            reduce using rule 104 (power -> primary .)
    SLASH           reduce using rule 104 (power -> primary .)
    DOUBLE_SLASH    reduce using rule 104 (power -> primary .)
    PERCENT         reduce using rule 104 (power -> primary .)
    PLUS            reduce using rule 104 (power -> primary .)
    MINUS           reduce using rule 104 (power -> primary .)
    L_SHIFT         reduce using rule 104 (power -> primary .)
    R_SHIFT         reduce using rule 104 (power -> primary .)
    AMPERSAND       reduce using rule 104 (power -> primary .)
    CARET           reduce using rule 104 (power -> primary .)
    PIPE            reduce using rule 104 (power -> primary .)
    EQUALITY        reduce using rule 104 (power -> primary .)
    INEQUALITY      reduce using rule 104 (power -> primary .)
    GREATER_EQUAL   reduce using rule 104 (power -> primary .)
    LESSER_EQUAL    reduce using rule 104 (power -> primary .)
    GREATER         reduce using rule 104 (power -> primary .)
    LESSER          reduce using rule 104 (power -> primary .)
    NOT             reduce using rule 104 (power -> primary .)
    IS              reduce using rule 104 (power -> primary .)
    IN              reduce using rule 104 (power -> primary .)
    AND             reduce using rule 104 (power -> primary .)
    OR              reduce using rule 104 (power -> primary .)
    IF              reduce using rule 104 (power -> primary .)
    COMMA           reduce using rule 104 (power -> primary .)
    NEWLINE         reduce using rule 104 (power -> primary .)
    SEMICOLON       reduce using rule 104 (power -> primary .)
    ENDMARKER       reduce using rule 104 (power -> primary .)
    DEF             reduce using rule 104 (power -> primary .)
    CLASS           reduce using rule 104 (power -> primary .)
    FOR             reduce using rule 104 (power -> primary .)
    WHILE           reduce using rule 104 (power -> primary .)
    PASS            reduce using rule 104 (power -> primary .)
    BREAK           reduce using rule 104 (power -> primary .)
    CONTINUE        reduce using rule 104 (power -> primary .)
    RETURN          reduce using rule 104 (power -> primary .)
    DEL             reduce using rule 104 (power -> primary .)
    GLOBAL          reduce using rule 104 (power -> primary .)
    IDENTIFIER      reduce using rule 104 (power -> primary .)
    TRUE            reduce using rule 104 (power -> primary .)
    FALSE           reduce using rule 104 (power -> primary .)
    NONE            reduce using rule 104 (power -> primary .)
    STRING          reduce using rule 104 (power -> primary .)
    TRIPLE_STRING   reduce using rule 104 (power -> primary .)
    NUMBER          reduce using rule 104 (power -> primary .)
    F_NUMBER        reduce using rule 104 (power -> primary .)
    BIN_NUMBER      reduce using rule 104 (power -> primary .)
    HEX_NUMBER      reduce using rule 104 (power -> primary .)
    OCT_NUMBER      reduce using rule 104 (power -> primary .)
    L_CB            reduce using rule 104 (power -> primary .)
    R_PARENTHESIS   reduce using rule 104 (power -> primary .)
    COLON           reduce using rule 104 (power -> primary .)
    ELIF            reduce using rule 104 (power -> primary .)
    ELSE            reduce using rule 104 (power -> primary .)
    DEDENT          reduce using rule 104 (power -> primary .)
    R_SQB           reduce using rule 104 (power -> primary .)
    R_CB            reduce using rule 104 (power -> primary .)
    L_PARENTHESIS   shift and go to state 143
    L_SQB           shift and go to state 144
    DOT             shift and go to state 145

  ! L_SQB           [ reduce using rule 104 (power -> primary .) ]
  ! L_PARENTHESIS   [ reduce using rule 104 (power -> primary .) ]


state 53

    (110) primary -> atomic .

    DOUBLE_STAR     reduce using rule 110 (primary -> atomic .)
    L_PARENTHESIS   reduce using rule 110 (primary -> atomic .)
    L_SQB           reduce using rule 110 (primary -> atomic .)
    DOT             reduce using rule 110 (primary -> atomic .)
    STAR            reduce using rule 110 (primary -> atomic .)
    SLASH           reduce using rule 110 (primary -> atomic .)
    DOUBLE_SLASH    reduce using rule 110 (primary -> atomic .)
    PERCENT         reduce using rule 110 (primary -> atomic .)
    PLUS            reduce using rule 110 (primary -> atomic .)
    MINUS           reduce using rule 110 (primary -> atomic .)
    L_SHIFT         reduce using rule 110 (primary -> atomic .)
    R_SHIFT         reduce using rule 110 (primary -> atomic .)
    AMPERSAND       reduce using rule 110 (primary -> atomic .)
    CARET           reduce using rule 110 (primary -> atomic .)
    PIPE            reduce using rule 110 (primary -> atomic .)
    EQUALITY        reduce using rule 110 (primary -> atomic .)
    INEQUALITY      reduce using rule 110 (primary -> atomic .)
    GREATER_EQUAL   reduce using rule 110 (primary -> atomic .)
    LESSER_EQUAL    reduce using rule 110 (primary -> atomic .)
    GREATER         reduce using rule 110 (primary -> atomic .)
    LESSER          reduce using rule 110 (primary -> atomic .)
    NOT             reduce using rule 110 (primary -> atomic .)
    IS              reduce using rule 110 (primary -> atomic .)
    IN              reduce using rule 110 (primary -> atomic .)
    AND             reduce using rule 110 (primary -> atomic .)
    OR              reduce using rule 110 (primary -> atomic .)
    IF              reduce using rule 110 (primary -> atomic .)
    COMMA           reduce using rule 110 (primary -> atomic .)
    NEWLINE         reduce using rule 110 (primary -> atomic .)
    SEMICOLON       reduce using rule 110 (primary -> atomic .)
    ENDMARKER       reduce using rule 110 (primary -> atomic .)
    DEF             reduce using rule 110 (primary -> atomic .)
    CLASS           reduce using rule 110 (primary -> atomic .)
    FOR             reduce using rule 110 (primary -> atomic .)
    WHILE           reduce using rule 110 (primary -> atomic .)
    PASS            reduce using rule 110 (primary -> atomic .)
    BREAK           reduce using rule 110 (primary -> atomic .)
    CONTINUE        reduce using rule 110 (primary -> atomic .)
    RETURN          reduce using rule 110 (primary -> atomic .)
    DEL             reduce using rule 110 (primary -> atomic .)
    GLOBAL          reduce using rule 110 (primary -> atomic .)
    IDENTIFIER      reduce using rule 110 (primary -> atomic .)
    TRUE            reduce using rule 110 (primary -> atomic .)
    FALSE           reduce using rule 110 (primary -> atomic .)
    NONE            reduce using rule 110 (primary -> atomic .)
    STRING          reduce using rule 110 (primary -> atomic .)
    TRIPLE_STRING   reduce using rule 110 (primary -> atomic .)
    NUMBER          reduce using rule 110 (primary -> atomic .)
    F_NUMBER        reduce using rule 110 (primary -> atomic .)
    BIN_NUMBER      reduce using rule 110 (primary -> atomic .)
    HEX_NUMBER      reduce using rule 110 (primary -> atomic .)
    OCT_NUMBER      reduce using rule 110 (primary -> atomic .)
    L_CB            reduce using rule 110 (primary -> atomic .)
    R_PARENTHESIS   reduce using rule 110 (primary -> atomic .)
    COLON           reduce using rule 110 (primary -> atomic .)
    ELIF            reduce using rule 110 (primary -> atomic .)
    ELSE            reduce using rule 110 (primary -> atomic .)
    DEDENT          reduce using rule 110 (primary -> atomic .)
    R_SQB           reduce using rule 110 (primary -> atomic .)
    R_CB            reduce using rule 110 (primary -> atomic .)


state 54

    (121) atomic -> TRUE .

    DOUBLE_STAR     reduce using rule 121 (atomic -> TRUE .)
    L_PARENTHESIS   reduce using rule 121 (atomic -> TRUE .)
    L_SQB           reduce using rule 121 (atomic -> TRUE .)
    DOT             reduce using rule 121 (atomic -> TRUE .)
    STAR            reduce using rule 121 (atomic -> TRUE .)
    SLASH           reduce using rule 121 (atomic -> TRUE .)
    DOUBLE_SLASH    reduce using rule 121 (atomic -> TRUE .)
    PERCENT         reduce using rule 121 (atomic -> TRUE .)
    PLUS            reduce using rule 121 (atomic -> TRUE .)
    MINUS           reduce using rule 121 (atomic -> TRUE .)
    L_SHIFT         reduce using rule 121 (atomic -> TRUE .)
    R_SHIFT         reduce using rule 121 (atomic -> TRUE .)
    AMPERSAND       reduce using rule 121 (atomic -> TRUE .)
    CARET           reduce using rule 121 (atomic -> TRUE .)
    PIPE            reduce using rule 121 (atomic -> TRUE .)
    EQUALITY        reduce using rule 121 (atomic -> TRUE .)
    INEQUALITY      reduce using rule 121 (atomic -> TRUE .)
    GREATER_EQUAL   reduce using rule 121 (atomic -> TRUE .)
    LESSER_EQUAL    reduce using rule 121 (atomic -> TRUE .)
    GREATER         reduce using rule 121 (atomic -> TRUE .)
    LESSER          reduce using rule 121 (atomic -> TRUE .)
    NOT             reduce using rule 121 (atomic -> TRUE .)
    IS              reduce using rule 121 (atomic -> TRUE .)
    IN              reduce using rule 121 (atomic -> TRUE .)
    AND             reduce using rule 121 (atomic -> TRUE .)
    OR              reduce using rule 121 (atomic -> TRUE .)
    IF              reduce using rule 121 (atomic -> TRUE .)
    COMMA           reduce using rule 121 (atomic -> TRUE .)
    NEWLINE         reduce using rule 121 (atomic -> TRUE .)
    SEMICOLON       reduce using rule 121 (atomic -> TRUE .)
    ENDMARKER       reduce using rule 121 (atomic -> TRUE .)
    DEF             reduce using rule 121 (atomic -> TRUE .)
    CLASS           reduce using rule 121 (atomic -> TRUE .)
    FOR             reduce using rule 121 (atomic -> TRUE .)
    WHILE           reduce using rule 121 (atomic -> TRUE .)
    PASS            reduce using rule 121 (atomic -> TRUE .)
    BREAK           reduce using rule 121 (atomic -> TRUE .)
    CONTINUE        reduce using rule 121 (atomic -> TRUE .)
    RETURN          reduce using rule 121 (atomic -> TRUE .)
    DEL             reduce using rule 121 (atomic -> TRUE .)
    GLOBAL          reduce using rule 121 (atomic -> TRUE .)
    IDENTIFIER      reduce using rule 121 (atomic -> TRUE .)
    TRUE            reduce using rule 121 (atomic -> TRUE .)
    FALSE           reduce using rule 121 (atomic -> TRUE .)
    NONE            reduce using rule 121 (atomic -> TRUE .)
    STRING          reduce using rule 121 (atomic -> TRUE .)
    TRIPLE_STRING   reduce using rule 121 (atomic -> TRUE .)
    NUMBER          reduce using rule 121 (atomic -> TRUE .)
    F_NUMBER        reduce using rule 121 (atomic -> TRUE .)
    BIN_NUMBER      reduce using rule 121 (atomic -> TRUE .)
    HEX_NUMBER      reduce using rule 121 (atomic -> TRUE .)
    OCT_NUMBER      reduce using rule 121 (atomic -> TRUE .)
    L_CB            reduce using rule 121 (atomic -> TRUE .)
    R_PARENTHESIS   reduce using rule 121 (atomic -> TRUE .)
    COLON           reduce using rule 121 (atomic -> TRUE .)
    ELIF            reduce using rule 121 (atomic -> TRUE .)
    ELSE            reduce using rule 121 (atomic -> TRUE .)
    DEDENT          reduce using rule 121 (atomic -> TRUE .)
    R_SQB           reduce using rule 121 (atomic -> TRUE .)
    R_CB            reduce using rule 121 (atomic -> TRUE .)


state 55

    (122) atomic -> FALSE .

    DOUBLE_STAR     reduce using rule 122 (atomic -> FALSE .)
    L_PARENTHESIS   reduce using rule 122 (atomic -> FALSE .)
    L_SQB           reduce using rule 122 (atomic -> FALSE .)
    DOT             reduce using rule 122 (atomic -> FALSE .)
    STAR            reduce using rule 122 (atomic -> FALSE .)
    SLASH           reduce using rule 122 (atomic -> FALSE .)
    DOUBLE_SLASH    reduce using rule 122 (atomic -> FALSE .)
    PERCENT         reduce using rule 122 (atomic -> FALSE .)
    PLUS            reduce using rule 122 (atomic -> FALSE .)
    MINUS           reduce using rule 122 (atomic -> FALSE .)
    L_SHIFT         reduce using rule 122 (atomic -> FALSE .)
    R_SHIFT         reduce using rule 122 (atomic -> FALSE .)
    AMPERSAND       reduce using rule 122 (atomic -> FALSE .)
    CARET           reduce using rule 122 (atomic -> FALSE .)
    PIPE            reduce using rule 122 (atomic -> FALSE .)
    EQUALITY        reduce using rule 122 (atomic -> FALSE .)
    INEQUALITY      reduce using rule 122 (atomic -> FALSE .)
    GREATER_EQUAL   reduce using rule 122 (atomic -> FALSE .)
    LESSER_EQUAL    reduce using rule 122 (atomic -> FALSE .)
    GREATER         reduce using rule 122 (atomic -> FALSE .)
    LESSER          reduce using rule 122 (atomic -> FALSE .)
    NOT             reduce using rule 122 (atomic -> FALSE .)
    IS              reduce using rule 122 (atomic -> FALSE .)
    IN              reduce using rule 122 (atomic -> FALSE .)
    AND             reduce using rule 122 (atomic -> FALSE .)
    OR              reduce using rule 122 (atomic -> FALSE .)
    IF              reduce using rule 122 (atomic -> FALSE .)
    COMMA           reduce using rule 122 (atomic -> FALSE .)
    NEWLINE         reduce using rule 122 (atomic -> FALSE .)
    SEMICOLON       reduce using rule 122 (atomic -> FALSE .)
    ENDMARKER       reduce using rule 122 (atomic -> FALSE .)
    DEF             reduce using rule 122 (atomic -> FALSE .)
    CLASS           reduce using rule 122 (atomic -> FALSE .)
    FOR             reduce using rule 122 (atomic -> FALSE .)
    WHILE           reduce using rule 122 (atomic -> FALSE .)
    PASS            reduce using rule 122 (atomic -> FALSE .)
    BREAK           reduce using rule 122 (atomic -> FALSE .)
    CONTINUE        reduce using rule 122 (atomic -> FALSE .)
    RETURN          reduce using rule 122 (atomic -> FALSE .)
    DEL             reduce using rule 122 (atomic -> FALSE .)
    GLOBAL          reduce using rule 122 (atomic -> FALSE .)
    IDENTIFIER      reduce using rule 122 (atomic -> FALSE .)
    TRUE            reduce using rule 122 (atomic -> FALSE .)
    FALSE           reduce using rule 122 (atomic -> FALSE .)
    NONE            reduce using rule 122 (atomic -> FALSE .)
    STRING          reduce using rule 122 (atomic -> FALSE .)
    TRIPLE_STRING   reduce using rule 122 (atomic -> FALSE .)
    NUMBER          reduce using rule 122 (atomic -> FALSE .)
    F_NUMBER        reduce using rule 122 (atomic -> FALSE .)
    BIN_NUMBER      reduce using rule 122 (atomic -> FALSE .)
    HEX_NUMBER      reduce using rule 122 (atomic -> FALSE .)
    OCT_NUMBER      reduce using rule 122 (atomic -> FALSE .)
    L_CB            reduce using rule 122 (atomic -> FALSE .)
    R_PARENTHESIS   reduce using rule 122 (atomic -> FALSE .)
    COLON           reduce using rule 122 (atomic -> FALSE .)
    ELIF            reduce using rule 122 (atomic -> FALSE .)
    ELSE            reduce using rule 122 (atomic -> FALSE .)
    DEDENT          reduce using rule 122 (atomic -> FALSE .)
    R_SQB           reduce using rule 122 (atomic -> FALSE .)
    R_CB            reduce using rule 122 (atomic -> FALSE .)


state 56

    (123) atomic -> NONE .

    DOUBLE_STAR     reduce using rule 123 (atomic -> NONE .)
    L_PARENTHESIS   reduce using rule 123 (atomic -> NONE .)
    L_SQB           reduce using rule 123 (atomic -> NONE .)
    DOT             reduce using rule 123 (atomic -> NONE .)
    STAR            reduce using rule 123 (atomic -> NONE .)
    SLASH           reduce using rule 123 (atomic -> NONE .)
    DOUBLE_SLASH    reduce using rule 123 (atomic -> NONE .)
    PERCENT         reduce using rule 123 (atomic -> NONE .)
    PLUS            reduce using rule 123 (atomic -> NONE .)
    MINUS           reduce using rule 123 (atomic -> NONE .)
    L_SHIFT         reduce using rule 123 (atomic -> NONE .)
    R_SHIFT         reduce using rule 123 (atomic -> NONE .)
    AMPERSAND       reduce using rule 123 (atomic -> NONE .)
    CARET           reduce using rule 123 (atomic -> NONE .)
    PIPE            reduce using rule 123 (atomic -> NONE .)
    EQUALITY        reduce using rule 123 (atomic -> NONE .)
    INEQUALITY      reduce using rule 123 (atomic -> NONE .)
    GREATER_EQUAL   reduce using rule 123 (atomic -> NONE .)
    LESSER_EQUAL    reduce using rule 123 (atomic -> NONE .)
    GREATER         reduce using rule 123 (atomic -> NONE .)
    LESSER          reduce using rule 123 (atomic -> NONE .)
    NOT             reduce using rule 123 (atomic -> NONE .)
    IS              reduce using rule 123 (atomic -> NONE .)
    IN              reduce using rule 123 (atomic -> NONE .)
    AND             reduce using rule 123 (atomic -> NONE .)
    OR              reduce using rule 123 (atomic -> NONE .)
    IF              reduce using rule 123 (atomic -> NONE .)
    COMMA           reduce using rule 123 (atomic -> NONE .)
    NEWLINE         reduce using rule 123 (atomic -> NONE .)
    SEMICOLON       reduce using rule 123 (atomic -> NONE .)
    ENDMARKER       reduce using rule 123 (atomic -> NONE .)
    DEF             reduce using rule 123 (atomic -> NONE .)
    CLASS           reduce using rule 123 (atomic -> NONE .)
    FOR             reduce using rule 123 (atomic -> NONE .)
    WHILE           reduce using rule 123 (atomic -> NONE .)
    PASS            reduce using rule 123 (atomic -> NONE .)
    BREAK           reduce using rule 123 (atomic -> NONE .)
    CONTINUE        reduce using rule 123 (atomic -> NONE .)
    RETURN          reduce using rule 123 (atomic -> NONE .)
    DEL             reduce using rule 123 (atomic -> NONE .)
    GLOBAL          reduce using rule 123 (atomic -> NONE .)
    IDENTIFIER      reduce using rule 123 (atomic -> NONE .)
    TRUE            reduce using rule 123 (atomic -> NONE .)
    FALSE           reduce using rule 123 (atomic -> NONE .)
    NONE            reduce using rule 123 (atomic -> NONE .)
    STRING          reduce using rule 123 (atomic -> NONE .)
    TRIPLE_STRING   reduce using rule 123 (atomic -> NONE .)
    NUMBER          reduce using rule 123 (atomic -> NONE .)
    F_NUMBER        reduce using rule 123 (atomic -> NONE .)
    BIN_NUMBER      reduce using rule 123 (atomic -> NONE .)
    HEX_NUMBER      reduce using rule 123 (atomic -> NONE .)
    OCT_NUMBER      reduce using rule 123 (atomic -> NONE .)
    L_CB            reduce using rule 123 (atomic -> NONE .)
    R_PARENTHESIS   reduce using rule 123 (atomic -> NONE .)
    COLON           reduce using rule 123 (atomic -> NONE .)
    ELIF            reduce using rule 123 (atomic -> NONE .)
    ELSE            reduce using rule 123 (atomic -> NONE .)
    DEDENT          reduce using rule 123 (atomic -> NONE .)
    R_SQB           reduce using rule 123 (atomic -> NONE .)
    R_CB            reduce using rule 123 (atomic -> NONE .)


state 57

    (124) atomic -> strings .

    DOUBLE_STAR     reduce using rule 124 (atomic -> strings .)
    L_PARENTHESIS   reduce using rule 124 (atomic -> strings .)
    L_SQB           reduce using rule 124 (atomic -> strings .)
    DOT             reduce using rule 124 (atomic -> strings .)
    STAR            reduce using rule 124 (atomic -> strings .)
    SLASH           reduce using rule 124 (atomic -> strings .)
    DOUBLE_SLASH    reduce using rule 124 (atomic -> strings .)
    PERCENT         reduce using rule 124 (atomic -> strings .)
    PLUS            reduce using rule 124 (atomic -> strings .)
    MINUS           reduce using rule 124 (atomic -> strings .)
    L_SHIFT         reduce using rule 124 (atomic -> strings .)
    R_SHIFT         reduce using rule 124 (atomic -> strings .)
    AMPERSAND       reduce using rule 124 (atomic -> strings .)
    CARET           reduce using rule 124 (atomic -> strings .)
    PIPE            reduce using rule 124 (atomic -> strings .)
    EQUALITY        reduce using rule 124 (atomic -> strings .)
    INEQUALITY      reduce using rule 124 (atomic -> strings .)
    GREATER_EQUAL   reduce using rule 124 (atomic -> strings .)
    LESSER_EQUAL    reduce using rule 124 (atomic -> strings .)
    GREATER         reduce using rule 124 (atomic -> strings .)
    LESSER          reduce using rule 124 (atomic -> strings .)
    NOT             reduce using rule 124 (atomic -> strings .)
    IS              reduce using rule 124 (atomic -> strings .)
    IN              reduce using rule 124 (atomic -> strings .)
    AND             reduce using rule 124 (atomic -> strings .)
    OR              reduce using rule 124 (atomic -> strings .)
    IF              reduce using rule 124 (atomic -> strings .)
    COMMA           reduce using rule 124 (atomic -> strings .)
    NEWLINE         reduce using rule 124 (atomic -> strings .)
    SEMICOLON       reduce using rule 124 (atomic -> strings .)
    ENDMARKER       reduce using rule 124 (atomic -> strings .)
    DEF             reduce using rule 124 (atomic -> strings .)
    CLASS           reduce using rule 124 (atomic -> strings .)
    FOR             reduce using rule 124 (atomic -> strings .)
    WHILE           reduce using rule 124 (atomic -> strings .)
    PASS            reduce using rule 124 (atomic -> strings .)
    BREAK           reduce using rule 124 (atomic -> strings .)
    CONTINUE        reduce using rule 124 (atomic -> strings .)
    RETURN          reduce using rule 124 (atomic -> strings .)
    DEL             reduce using rule 124 (atomic -> strings .)
    GLOBAL          reduce using rule 124 (atomic -> strings .)
    IDENTIFIER      reduce using rule 124 (atomic -> strings .)
    TRUE            reduce using rule 124 (atomic -> strings .)
    FALSE           reduce using rule 124 (atomic -> strings .)
    NONE            reduce using rule 124 (atomic -> strings .)
    STRING          reduce using rule 124 (atomic -> strings .)
    TRIPLE_STRING   reduce using rule 124 (atomic -> strings .)
    NUMBER          reduce using rule 124 (atomic -> strings .)
    F_NUMBER        reduce using rule 124 (atomic -> strings .)
    BIN_NUMBER      reduce using rule 124 (atomic -> strings .)
    HEX_NUMBER      reduce using rule 124 (atomic -> strings .)
    OCT_NUMBER      reduce using rule 124 (atomic -> strings .)
    L_CB            reduce using rule 124 (atomic -> strings .)
    R_PARENTHESIS   reduce using rule 124 (atomic -> strings .)
    COLON           reduce using rule 124 (atomic -> strings .)
    ELIF            reduce using rule 124 (atomic -> strings .)
    ELSE            reduce using rule 124 (atomic -> strings .)
    DEDENT          reduce using rule 124 (atomic -> strings .)
    R_SQB           reduce using rule 124 (atomic -> strings .)
    R_CB            reduce using rule 124 (atomic -> strings .)


state 58

    (125) atomic -> number .

    DOUBLE_STAR     reduce using rule 125 (atomic -> number .)
    L_PARENTHESIS   reduce using rule 125 (atomic -> number .)
    L_SQB           reduce using rule 125 (atomic -> number .)
    DOT             reduce using rule 125 (atomic -> number .)
    STAR            reduce using rule 125 (atomic -> number .)
    SLASH           reduce using rule 125 (atomic -> number .)
    DOUBLE_SLASH    reduce using rule 125 (atomic -> number .)
    PERCENT         reduce using rule 125 (atomic -> number .)
    PLUS            reduce using rule 125 (atomic -> number .)
    MINUS           reduce using rule 125 (atomic -> number .)
    L_SHIFT         reduce using rule 125 (atomic -> number .)
    R_SHIFT         reduce using rule 125 (atomic -> number .)
    AMPERSAND       reduce using rule 125 (atomic -> number .)
    CARET           reduce using rule 125 (atomic -> number .)
    PIPE            reduce using rule 125 (atomic -> number .)
    EQUALITY        reduce using rule 125 (atomic -> number .)
    INEQUALITY      reduce using rule 125 (atomic -> number .)
    GREATER_EQUAL   reduce using rule 125 (atomic -> number .)
    LESSER_EQUAL    reduce using rule 125 (atomic -> number .)
    GREATER         reduce using rule 125 (atomic -> number .)
    LESSER          reduce using rule 125 (atomic -> number .)
    NOT             reduce using rule 125 (atomic -> number .)
    IS              reduce using rule 125 (atomic -> number .)
    IN              reduce using rule 125 (atomic -> number .)
    AND             reduce using rule 125 (atomic -> number .)
    OR              reduce using rule 125 (atomic -> number .)
    IF              reduce using rule 125 (atomic -> number .)
    COMMA           reduce using rule 125 (atomic -> number .)
    NEWLINE         reduce using rule 125 (atomic -> number .)
    SEMICOLON       reduce using rule 125 (atomic -> number .)
    ENDMARKER       reduce using rule 125 (atomic -> number .)
    DEF             reduce using rule 125 (atomic -> number .)
    CLASS           reduce using rule 125 (atomic -> number .)
    FOR             reduce using rule 125 (atomic -> number .)
    WHILE           reduce using rule 125 (atomic -> number .)
    PASS            reduce using rule 125 (atomic -> number .)
    BREAK           reduce using rule 125 (atomic -> number .)
    CONTINUE        reduce using rule 125 (atomic -> number .)
    RETURN          reduce using rule 125 (atomic -> number .)
    DEL             reduce using rule 125 (atomic -> number .)
    GLOBAL          reduce using rule 125 (atomic -> number .)
    IDENTIFIER      reduce using rule 125 (atomic -> number .)
    TRUE            reduce using rule 125 (atomic -> number .)
    FALSE           reduce using rule 125 (atomic -> number .)
    NONE            reduce using rule 125 (atomic -> number .)
    STRING          reduce using rule 125 (atomic -> number .)
    TRIPLE_STRING   reduce using rule 125 (atomic -> number .)
    NUMBER          reduce using rule 125 (atomic -> number .)
    F_NUMBER        reduce using rule 125 (atomic -> number .)
    BIN_NUMBER      reduce using rule 125 (atomic -> number .)
    HEX_NUMBER      reduce using rule 125 (atomic -> number .)
    OCT_NUMBER      reduce using rule 125 (atomic -> number .)
    L_CB            reduce using rule 125 (atomic -> number .)
    R_PARENTHESIS   reduce using rule 125 (atomic -> number .)
    COLON           reduce using rule 125 (atomic -> number .)
    ELIF            reduce using rule 125 (atomic -> number .)
    ELSE            reduce using rule 125 (atomic -> number .)
    DEDENT          reduce using rule 125 (atomic -> number .)
    R_SQB           reduce using rule 125 (atomic -> number .)
    R_CB            reduce using rule 125 (atomic -> number .)


state 59

    (126) atomic -> tuple .

    DOUBLE_STAR     reduce using rule 126 (atomic -> tuple .)
    L_PARENTHESIS   reduce using rule 126 (atomic -> tuple .)
    L_SQB           reduce using rule 126 (atomic -> tuple .)
    DOT             reduce using rule 126 (atomic -> tuple .)
    STAR            reduce using rule 126 (atomic -> tuple .)
    SLASH           reduce using rule 126 (atomic -> tuple .)
    DOUBLE_SLASH    reduce using rule 126 (atomic -> tuple .)
    PERCENT         reduce using rule 126 (atomic -> tuple .)
    PLUS            reduce using rule 126 (atomic -> tuple .)
    MINUS           reduce using rule 126 (atomic -> tuple .)
    L_SHIFT         reduce using rule 126 (atomic -> tuple .)
    R_SHIFT         reduce using rule 126 (atomic -> tuple .)
    AMPERSAND       reduce using rule 126 (atomic -> tuple .)
    CARET           reduce using rule 126 (atomic -> tuple .)
    PIPE            reduce using rule 126 (atomic -> tuple .)
    EQUALITY        reduce using rule 126 (atomic -> tuple .)
    INEQUALITY      reduce using rule 126 (atomic -> tuple .)
    GREATER_EQUAL   reduce using rule 126 (atomic -> tuple .)
    LESSER_EQUAL    reduce using rule 126 (atomic -> tuple .)
    GREATER         reduce using rule 126 (atomic -> tuple .)
    LESSER          reduce using rule 126 (atomic -> tuple .)
    NOT             reduce using rule 126 (atomic -> tuple .)
    IS              reduce using rule 126 (atomic -> tuple .)
    IN              reduce using rule 126 (atomic -> tuple .)
    AND             reduce using rule 126 (atomic -> tuple .)
    OR              reduce using rule 126 (atomic -> tuple .)
    IF              reduce using rule 126 (atomic -> tuple .)
    COMMA           reduce using rule 126 (atomic -> tuple .)
    NEWLINE         reduce using rule 126 (atomic -> tuple .)
    SEMICOLON       reduce using rule 126 (atomic -> tuple .)
    ENDMARKER       reduce using rule 126 (atomic -> tuple .)
    DEF             reduce using rule 126 (atomic -> tuple .)
    CLASS           reduce using rule 126 (atomic -> tuple .)
    FOR             reduce using rule 126 (atomic -> tuple .)
    WHILE           reduce using rule 126 (atomic -> tuple .)
    PASS            reduce using rule 126 (atomic -> tuple .)
    BREAK           reduce using rule 126 (atomic -> tuple .)
    CONTINUE        reduce using rule 126 (atomic -> tuple .)
    RETURN          reduce using rule 126 (atomic -> tuple .)
    DEL             reduce using rule 126 (atomic -> tuple .)
    GLOBAL          reduce using rule 126 (atomic -> tuple .)
    IDENTIFIER      reduce using rule 126 (atomic -> tuple .)
    TRUE            reduce using rule 126 (atomic -> tuple .)
    FALSE           reduce using rule 126 (atomic -> tuple .)
    NONE            reduce using rule 126 (atomic -> tuple .)
    STRING          reduce using rule 126 (atomic -> tuple .)
    TRIPLE_STRING   reduce using rule 126 (atomic -> tuple .)
    NUMBER          reduce using rule 126 (atomic -> tuple .)
    F_NUMBER        reduce using rule 126 (atomic -> tuple .)
    BIN_NUMBER      reduce using rule 126 (atomic -> tuple .)
    HEX_NUMBER      reduce using rule 126 (atomic -> tuple .)
    OCT_NUMBER      reduce using rule 126 (atomic -> tuple .)
    L_CB            reduce using rule 126 (atomic -> tuple .)
    R_PARENTHESIS   reduce using rule 126 (atomic -> tuple .)
    COLON           reduce using rule 126 (atomic -> tuple .)
    ELIF            reduce using rule 126 (atomic -> tuple .)
    ELSE            reduce using rule 126 (atomic -> tuple .)
    DEDENT          reduce using rule 126 (atomic -> tuple .)
    R_SQB           reduce using rule 126 (atomic -> tuple .)
    R_CB            reduce using rule 126 (atomic -> tuple .)


state 60

    (127) atomic -> list .

    DOUBLE_STAR     reduce using rule 127 (atomic -> list .)
    L_PARENTHESIS   reduce using rule 127 (atomic -> list .)
    L_SQB           reduce using rule 127 (atomic -> list .)
    DOT             reduce using rule 127 (atomic -> list .)
    STAR            reduce using rule 127 (atomic -> list .)
    SLASH           reduce using rule 127 (atomic -> list .)
    DOUBLE_SLASH    reduce using rule 127 (atomic -> list .)
    PERCENT         reduce using rule 127 (atomic -> list .)
    PLUS            reduce using rule 127 (atomic -> list .)
    MINUS           reduce using rule 127 (atomic -> list .)
    L_SHIFT         reduce using rule 127 (atomic -> list .)
    R_SHIFT         reduce using rule 127 (atomic -> list .)
    AMPERSAND       reduce using rule 127 (atomic -> list .)
    CARET           reduce using rule 127 (atomic -> list .)
    PIPE            reduce using rule 127 (atomic -> list .)
    EQUALITY        reduce using rule 127 (atomic -> list .)
    INEQUALITY      reduce using rule 127 (atomic -> list .)
    GREATER_EQUAL   reduce using rule 127 (atomic -> list .)
    LESSER_EQUAL    reduce using rule 127 (atomic -> list .)
    GREATER         reduce using rule 127 (atomic -> list .)
    LESSER          reduce using rule 127 (atomic -> list .)
    NOT             reduce using rule 127 (atomic -> list .)
    IS              reduce using rule 127 (atomic -> list .)
    IN              reduce using rule 127 (atomic -> list .)
    AND             reduce using rule 127 (atomic -> list .)
    OR              reduce using rule 127 (atomic -> list .)
    IF              reduce using rule 127 (atomic -> list .)
    COMMA           reduce using rule 127 (atomic -> list .)
    NEWLINE         reduce using rule 127 (atomic -> list .)
    SEMICOLON       reduce using rule 127 (atomic -> list .)
    ENDMARKER       reduce using rule 127 (atomic -> list .)
    DEF             reduce using rule 127 (atomic -> list .)
    CLASS           reduce using rule 127 (atomic -> list .)
    FOR             reduce using rule 127 (atomic -> list .)
    WHILE           reduce using rule 127 (atomic -> list .)
    PASS            reduce using rule 127 (atomic -> list .)
    BREAK           reduce using rule 127 (atomic -> list .)
    CONTINUE        reduce using rule 127 (atomic -> list .)
    RETURN          reduce using rule 127 (atomic -> list .)
    DEL             reduce using rule 127 (atomic -> list .)
    GLOBAL          reduce using rule 127 (atomic -> list .)
    IDENTIFIER      reduce using rule 127 (atomic -> list .)
    TRUE            reduce using rule 127 (atomic -> list .)
    FALSE           reduce using rule 127 (atomic -> list .)
    NONE            reduce using rule 127 (atomic -> list .)
    STRING          reduce using rule 127 (atomic -> list .)
    TRIPLE_STRING   reduce using rule 127 (atomic -> list .)
    NUMBER          reduce using rule 127 (atomic -> list .)
    F_NUMBER        reduce using rule 127 (atomic -> list .)
    BIN_NUMBER      reduce using rule 127 (atomic -> list .)
    HEX_NUMBER      reduce using rule 127 (atomic -> list .)
    OCT_NUMBER      reduce using rule 127 (atomic -> list .)
    L_CB            reduce using rule 127 (atomic -> list .)
    R_PARENTHESIS   reduce using rule 127 (atomic -> list .)
    COLON           reduce using rule 127 (atomic -> list .)
    ELIF            reduce using rule 127 (atomic -> list .)
    ELSE            reduce using rule 127 (atomic -> list .)
    DEDENT          reduce using rule 127 (atomic -> list .)
    R_SQB           reduce using rule 127 (atomic -> list .)
    R_CB            reduce using rule 127 (atomic -> list .)


state 61

    (128) atomic -> dict .

    DOUBLE_STAR     reduce using rule 128 (atomic -> dict .)
    L_PARENTHESIS   reduce using rule 128 (atomic -> dict .)
    L_SQB           reduce using rule 128 (atomic -> dict .)
    DOT             reduce using rule 128 (atomic -> dict .)
    STAR            reduce using rule 128 (atomic -> dict .)
    SLASH           reduce using rule 128 (atomic -> dict .)
    DOUBLE_SLASH    reduce using rule 128 (atomic -> dict .)
    PERCENT         reduce using rule 128 (atomic -> dict .)
    PLUS            reduce using rule 128 (atomic -> dict .)
    MINUS           reduce using rule 128 (atomic -> dict .)
    L_SHIFT         reduce using rule 128 (atomic -> dict .)
    R_SHIFT         reduce using rule 128 (atomic -> dict .)
    AMPERSAND       reduce using rule 128 (atomic -> dict .)
    CARET           reduce using rule 128 (atomic -> dict .)
    PIPE            reduce using rule 128 (atomic -> dict .)
    EQUALITY        reduce using rule 128 (atomic -> dict .)
    INEQUALITY      reduce using rule 128 (atomic -> dict .)
    GREATER_EQUAL   reduce using rule 128 (atomic -> dict .)
    LESSER_EQUAL    reduce using rule 128 (atomic -> dict .)
    GREATER         reduce using rule 128 (atomic -> dict .)
    LESSER          reduce using rule 128 (atomic -> dict .)
    NOT             reduce using rule 128 (atomic -> dict .)
    IS              reduce using rule 128 (atomic -> dict .)
    IN              reduce using rule 128 (atomic -> dict .)
    AND             reduce using rule 128 (atomic -> dict .)
    OR              reduce using rule 128 (atomic -> dict .)
    IF              reduce using rule 128 (atomic -> dict .)
    COMMA           reduce using rule 128 (atomic -> dict .)
    NEWLINE         reduce using rule 128 (atomic -> dict .)
    SEMICOLON       reduce using rule 128 (atomic -> dict .)
    ENDMARKER       reduce using rule 128 (atomic -> dict .)
    DEF             reduce using rule 128 (atomic -> dict .)
    CLASS           reduce using rule 128 (atomic -> dict .)
    FOR             reduce using rule 128 (atomic -> dict .)
    WHILE           reduce using rule 128 (atomic -> dict .)
    PASS            reduce using rule 128 (atomic -> dict .)
    BREAK           reduce using rule 128 (atomic -> dict .)
    CONTINUE        reduce using rule 128 (atomic -> dict .)
    RETURN          reduce using rule 128 (atomic -> dict .)
    DEL             reduce using rule 128 (atomic -> dict .)
    GLOBAL          reduce using rule 128 (atomic -> dict .)
    IDENTIFIER      reduce using rule 128 (atomic -> dict .)
    TRUE            reduce using rule 128 (atomic -> dict .)
    FALSE           reduce using rule 128 (atomic -> dict .)
    NONE            reduce using rule 128 (atomic -> dict .)
    STRING          reduce using rule 128 (atomic -> dict .)
    TRIPLE_STRING   reduce using rule 128 (atomic -> dict .)
    NUMBER          reduce using rule 128 (atomic -> dict .)
    F_NUMBER        reduce using rule 128 (atomic -> dict .)
    BIN_NUMBER      reduce using rule 128 (atomic -> dict .)
    HEX_NUMBER      reduce using rule 128 (atomic -> dict .)
    OCT_NUMBER      reduce using rule 128 (atomic -> dict .)
    L_CB            reduce using rule 128 (atomic -> dict .)
    R_PARENTHESIS   reduce using rule 128 (atomic -> dict .)
    COLON           reduce using rule 128 (atomic -> dict .)
    ELIF            reduce using rule 128 (atomic -> dict .)
    ELSE            reduce using rule 128 (atomic -> dict .)
    DEDENT          reduce using rule 128 (atomic -> dict .)
    R_SQB           reduce using rule 128 (atomic -> dict .)
    R_CB            reduce using rule 128 (atomic -> dict .)


state 62

    (129) atomic -> set .

    DOUBLE_STAR     reduce using rule 129 (atomic -> set .)
    L_PARENTHESIS   reduce using rule 129 (atomic -> set .)
    L_SQB           reduce using rule 129 (atomic -> set .)
    DOT             reduce using rule 129 (atomic -> set .)
    STAR            reduce using rule 129 (atomic -> set .)
    SLASH           reduce using rule 129 (atomic -> set .)
    DOUBLE_SLASH    reduce using rule 129 (atomic -> set .)
    PERCENT         reduce using rule 129 (atomic -> set .)
    PLUS            reduce using rule 129 (atomic -> set .)
    MINUS           reduce using rule 129 (atomic -> set .)
    L_SHIFT         reduce using rule 129 (atomic -> set .)
    R_SHIFT         reduce using rule 129 (atomic -> set .)
    AMPERSAND       reduce using rule 129 (atomic -> set .)
    CARET           reduce using rule 129 (atomic -> set .)
    PIPE            reduce using rule 129 (atomic -> set .)
    EQUALITY        reduce using rule 129 (atomic -> set .)
    INEQUALITY      reduce using rule 129 (atomic -> set .)
    GREATER_EQUAL   reduce using rule 129 (atomic -> set .)
    LESSER_EQUAL    reduce using rule 129 (atomic -> set .)
    GREATER         reduce using rule 129 (atomic -> set .)
    LESSER          reduce using rule 129 (atomic -> set .)
    NOT             reduce using rule 129 (atomic -> set .)
    IS              reduce using rule 129 (atomic -> set .)
    IN              reduce using rule 129 (atomic -> set .)
    AND             reduce using rule 129 (atomic -> set .)
    OR              reduce using rule 129 (atomic -> set .)
    IF              reduce using rule 129 (atomic -> set .)
    COMMA           reduce using rule 129 (atomic -> set .)
    NEWLINE         reduce using rule 129 (atomic -> set .)
    SEMICOLON       reduce using rule 129 (atomic -> set .)
    ENDMARKER       reduce using rule 129 (atomic -> set .)
    DEF             reduce using rule 129 (atomic -> set .)
    CLASS           reduce using rule 129 (atomic -> set .)
    FOR             reduce using rule 129 (atomic -> set .)
    WHILE           reduce using rule 129 (atomic -> set .)
    PASS            reduce using rule 129 (atomic -> set .)
    BREAK           reduce using rule 129 (atomic -> set .)
    CONTINUE        reduce using rule 129 (atomic -> set .)
    RETURN          reduce using rule 129 (atomic -> set .)
    DEL             reduce using rule 129 (atomic -> set .)
    GLOBAL          reduce using rule 129 (atomic -> set .)
    IDENTIFIER      reduce using rule 129 (atomic -> set .)
    TRUE            reduce using rule 129 (atomic -> set .)
    FALSE           reduce using rule 129 (atomic -> set .)
    NONE            reduce using rule 129 (atomic -> set .)
    STRING          reduce using rule 129 (atomic -> set .)
    TRIPLE_STRING   reduce using rule 129 (atomic -> set .)
    NUMBER          reduce using rule 129 (atomic -> set .)
    F_NUMBER        reduce using rule 129 (atomic -> set .)
    BIN_NUMBER      reduce using rule 129 (atomic -> set .)
    HEX_NUMBER      reduce using rule 129 (atomic -> set .)
    OCT_NUMBER      reduce using rule 129 (atomic -> set .)
    L_CB            reduce using rule 129 (atomic -> set .)
    R_PARENTHESIS   reduce using rule 129 (atomic -> set .)
    COLON           reduce using rule 129 (atomic -> set .)
    ELIF            reduce using rule 129 (atomic -> set .)
    ELSE            reduce using rule 129 (atomic -> set .)
    DEDENT          reduce using rule 129 (atomic -> set .)
    R_SQB           reduce using rule 129 (atomic -> set .)
    R_CB            reduce using rule 129 (atomic -> set .)


state 63

    (136) strings -> STRING .

    DOUBLE_STAR     reduce using rule 136 (strings -> STRING .)
    L_PARENTHESIS   reduce using rule 136 (strings -> STRING .)
    L_SQB           reduce using rule 136 (strings -> STRING .)
    DOT             reduce using rule 136 (strings -> STRING .)
    STAR            reduce using rule 136 (strings -> STRING .)
    SLASH           reduce using rule 136 (strings -> STRING .)
    DOUBLE_SLASH    reduce using rule 136 (strings -> STRING .)
    PERCENT         reduce using rule 136 (strings -> STRING .)
    PLUS            reduce using rule 136 (strings -> STRING .)
    MINUS           reduce using rule 136 (strings -> STRING .)
    L_SHIFT         reduce using rule 136 (strings -> STRING .)
    R_SHIFT         reduce using rule 136 (strings -> STRING .)
    AMPERSAND       reduce using rule 136 (strings -> STRING .)
    CARET           reduce using rule 136 (strings -> STRING .)
    PIPE            reduce using rule 136 (strings -> STRING .)
    EQUALITY        reduce using rule 136 (strings -> STRING .)
    INEQUALITY      reduce using rule 136 (strings -> STRING .)
    GREATER_EQUAL   reduce using rule 136 (strings -> STRING .)
    LESSER_EQUAL    reduce using rule 136 (strings -> STRING .)
    GREATER         reduce using rule 136 (strings -> STRING .)
    LESSER          reduce using rule 136 (strings -> STRING .)
    NOT             reduce using rule 136 (strings -> STRING .)
    IS              reduce using rule 136 (strings -> STRING .)
    IN              reduce using rule 136 (strings -> STRING .)
    AND             reduce using rule 136 (strings -> STRING .)
    OR              reduce using rule 136 (strings -> STRING .)
    IF              reduce using rule 136 (strings -> STRING .)
    COMMA           reduce using rule 136 (strings -> STRING .)
    NEWLINE         reduce using rule 136 (strings -> STRING .)
    SEMICOLON       reduce using rule 136 (strings -> STRING .)
    ENDMARKER       reduce using rule 136 (strings -> STRING .)
    DEF             reduce using rule 136 (strings -> STRING .)
    CLASS           reduce using rule 136 (strings -> STRING .)
    FOR             reduce using rule 136 (strings -> STRING .)
    WHILE           reduce using rule 136 (strings -> STRING .)
    PASS            reduce using rule 136 (strings -> STRING .)
    BREAK           reduce using rule 136 (strings -> STRING .)
    CONTINUE        reduce using rule 136 (strings -> STRING .)
    RETURN          reduce using rule 136 (strings -> STRING .)
    DEL             reduce using rule 136 (strings -> STRING .)
    GLOBAL          reduce using rule 136 (strings -> STRING .)
    IDENTIFIER      reduce using rule 136 (strings -> STRING .)
    TRUE            reduce using rule 136 (strings -> STRING .)
    FALSE           reduce using rule 136 (strings -> STRING .)
    NONE            reduce using rule 136 (strings -> STRING .)
    STRING          reduce using rule 136 (strings -> STRING .)
    TRIPLE_STRING   reduce using rule 136 (strings -> STRING .)
    NUMBER          reduce using rule 136 (strings -> STRING .)
    F_NUMBER        reduce using rule 136 (strings -> STRING .)
    BIN_NUMBER      reduce using rule 136 (strings -> STRING .)
    HEX_NUMBER      reduce using rule 136 (strings -> STRING .)
    OCT_NUMBER      reduce using rule 136 (strings -> STRING .)
    L_CB            reduce using rule 136 (strings -> STRING .)
    R_PARENTHESIS   reduce using rule 136 (strings -> STRING .)
    COLON           reduce using rule 136 (strings -> STRING .)
    ELIF            reduce using rule 136 (strings -> STRING .)
    ELSE            reduce using rule 136 (strings -> STRING .)
    DEDENT          reduce using rule 136 (strings -> STRING .)
    R_SQB           reduce using rule 136 (strings -> STRING .)
    R_CB            reduce using rule 136 (strings -> STRING .)


state 64

    (137) strings -> TRIPLE_STRING .

    DOUBLE_STAR     reduce using rule 137 (strings -> TRIPLE_STRING .)
    L_PARENTHESIS   reduce using rule 137 (strings -> TRIPLE_STRING .)
    L_SQB           reduce using rule 137 (strings -> TRIPLE_STRING .)
    DOT             reduce using rule 137 (strings -> TRIPLE_STRING .)
    STAR            reduce using rule 137 (strings -> TRIPLE_STRING .)
    SLASH           reduce using rule 137 (strings -> TRIPLE_STRING .)
    DOUBLE_SLASH    reduce using rule 137 (strings -> TRIPLE_STRING .)
    PERCENT         reduce using rule 137 (strings -> TRIPLE_STRING .)
    PLUS            reduce using rule 137 (strings -> TRIPLE_STRING .)
    MINUS           reduce using rule 137 (strings -> TRIPLE_STRING .)
    L_SHIFT         reduce using rule 137 (strings -> TRIPLE_STRING .)
    R_SHIFT         reduce using rule 137 (strings -> TRIPLE_STRING .)
    AMPERSAND       reduce using rule 137 (strings -> TRIPLE_STRING .)
    CARET           reduce using rule 137 (strings -> TRIPLE_STRING .)
    PIPE            reduce using rule 137 (strings -> TRIPLE_STRING .)
    EQUALITY        reduce using rule 137 (strings -> TRIPLE_STRING .)
    INEQUALITY      reduce using rule 137 (strings -> TRIPLE_STRING .)
    GREATER_EQUAL   reduce using rule 137 (strings -> TRIPLE_STRING .)
    LESSER_EQUAL    reduce using rule 137 (strings -> TRIPLE_STRING .)
    GREATER         reduce using rule 137 (strings -> TRIPLE_STRING .)
    LESSER          reduce using rule 137 (strings -> TRIPLE_STRING .)
    NOT             reduce using rule 137 (strings -> TRIPLE_STRING .)
    IS              reduce using rule 137 (strings -> TRIPLE_STRING .)
    IN              reduce using rule 137 (strings -> TRIPLE_STRING .)
    AND             reduce using rule 137 (strings -> TRIPLE_STRING .)
    OR              reduce using rule 137 (strings -> TRIPLE_STRING .)
    IF              reduce using rule 137 (strings -> TRIPLE_STRING .)
    COMMA           reduce using rule 137 (strings -> TRIPLE_STRING .)
    NEWLINE         reduce using rule 137 (strings -> TRIPLE_STRING .)
    SEMICOLON       reduce using rule 137 (strings -> TRIPLE_STRING .)
    ENDMARKER       reduce using rule 137 (strings -> TRIPLE_STRING .)
    DEF             reduce using rule 137 (strings -> TRIPLE_STRING .)
    CLASS           reduce using rule 137 (strings -> TRIPLE_STRING .)
    FOR             reduce using rule 137 (strings -> TRIPLE_STRING .)
    WHILE           reduce using rule 137 (strings -> TRIPLE_STRING .)
    PASS            reduce using rule 137 (strings -> TRIPLE_STRING .)
    BREAK           reduce using rule 137 (strings -> TRIPLE_STRING .)
    CONTINUE        reduce using rule 137 (strings -> TRIPLE_STRING .)
    RETURN          reduce using rule 137 (strings -> TRIPLE_STRING .)
    DEL             reduce using rule 137 (strings -> TRIPLE_STRING .)
    GLOBAL          reduce using rule 137 (strings -> TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 137 (strings -> TRIPLE_STRING .)
    TRUE            reduce using rule 137 (strings -> TRIPLE_STRING .)
    FALSE           reduce using rule 137 (strings -> TRIPLE_STRING .)
    NONE            reduce using rule 137 (strings -> TRIPLE_STRING .)
    STRING          reduce using rule 137 (strings -> TRIPLE_STRING .)
    TRIPLE_STRING   reduce using rule 137 (strings -> TRIPLE_STRING .)
    NUMBER          reduce using rule 137 (strings -> TRIPLE_STRING .)
    F_NUMBER        reduce using rule 137 (strings -> TRIPLE_STRING .)
    BIN_NUMBER      reduce using rule 137 (strings -> TRIPLE_STRING .)
    HEX_NUMBER      reduce using rule 137 (strings -> TRIPLE_STRING .)
    OCT_NUMBER      reduce using rule 137 (strings -> TRIPLE_STRING .)
    L_CB            reduce using rule 137 (strings -> TRIPLE_STRING .)
    R_PARENTHESIS   reduce using rule 137 (strings -> TRIPLE_STRING .)
    COLON           reduce using rule 137 (strings -> TRIPLE_STRING .)
    ELIF            reduce using rule 137 (strings -> TRIPLE_STRING .)
    ELSE            reduce using rule 137 (strings -> TRIPLE_STRING .)
    DEDENT          reduce using rule 137 (strings -> TRIPLE_STRING .)
    R_SQB           reduce using rule 137 (strings -> TRIPLE_STRING .)
    R_CB            reduce using rule 137 (strings -> TRIPLE_STRING .)


state 65

    (130) number -> NUMBER .

    DOUBLE_STAR     reduce using rule 130 (number -> NUMBER .)
    L_PARENTHESIS   reduce using rule 130 (number -> NUMBER .)
    L_SQB           reduce using rule 130 (number -> NUMBER .)
    DOT             reduce using rule 130 (number -> NUMBER .)
    STAR            reduce using rule 130 (number -> NUMBER .)
    SLASH           reduce using rule 130 (number -> NUMBER .)
    DOUBLE_SLASH    reduce using rule 130 (number -> NUMBER .)
    PERCENT         reduce using rule 130 (number -> NUMBER .)
    PLUS            reduce using rule 130 (number -> NUMBER .)
    MINUS           reduce using rule 130 (number -> NUMBER .)
    L_SHIFT         reduce using rule 130 (number -> NUMBER .)
    R_SHIFT         reduce using rule 130 (number -> NUMBER .)
    AMPERSAND       reduce using rule 130 (number -> NUMBER .)
    CARET           reduce using rule 130 (number -> NUMBER .)
    PIPE            reduce using rule 130 (number -> NUMBER .)
    EQUALITY        reduce using rule 130 (number -> NUMBER .)
    INEQUALITY      reduce using rule 130 (number -> NUMBER .)
    GREATER_EQUAL   reduce using rule 130 (number -> NUMBER .)
    LESSER_EQUAL    reduce using rule 130 (number -> NUMBER .)
    GREATER         reduce using rule 130 (number -> NUMBER .)
    LESSER          reduce using rule 130 (number -> NUMBER .)
    NOT             reduce using rule 130 (number -> NUMBER .)
    IS              reduce using rule 130 (number -> NUMBER .)
    IN              reduce using rule 130 (number -> NUMBER .)
    AND             reduce using rule 130 (number -> NUMBER .)
    OR              reduce using rule 130 (number -> NUMBER .)
    IF              reduce using rule 130 (number -> NUMBER .)
    COMMA           reduce using rule 130 (number -> NUMBER .)
    NEWLINE         reduce using rule 130 (number -> NUMBER .)
    SEMICOLON       reduce using rule 130 (number -> NUMBER .)
    ENDMARKER       reduce using rule 130 (number -> NUMBER .)
    DEF             reduce using rule 130 (number -> NUMBER .)
    CLASS           reduce using rule 130 (number -> NUMBER .)
    FOR             reduce using rule 130 (number -> NUMBER .)
    WHILE           reduce using rule 130 (number -> NUMBER .)
    PASS            reduce using rule 130 (number -> NUMBER .)
    BREAK           reduce using rule 130 (number -> NUMBER .)
    CONTINUE        reduce using rule 130 (number -> NUMBER .)
    RETURN          reduce using rule 130 (number -> NUMBER .)
    DEL             reduce using rule 130 (number -> NUMBER .)
    GLOBAL          reduce using rule 130 (number -> NUMBER .)
    IDENTIFIER      reduce using rule 130 (number -> NUMBER .)
    TRUE            reduce using rule 130 (number -> NUMBER .)
    FALSE           reduce using rule 130 (number -> NUMBER .)
    NONE            reduce using rule 130 (number -> NUMBER .)
    STRING          reduce using rule 130 (number -> NUMBER .)
    TRIPLE_STRING   reduce using rule 130 (number -> NUMBER .)
    NUMBER          reduce using rule 130 (number -> NUMBER .)
    F_NUMBER        reduce using rule 130 (number -> NUMBER .)
    BIN_NUMBER      reduce using rule 130 (number -> NUMBER .)
    HEX_NUMBER      reduce using rule 130 (number -> NUMBER .)
    OCT_NUMBER      reduce using rule 130 (number -> NUMBER .)
    L_CB            reduce using rule 130 (number -> NUMBER .)
    R_PARENTHESIS   reduce using rule 130 (number -> NUMBER .)
    COLON           reduce using rule 130 (number -> NUMBER .)
    ELIF            reduce using rule 130 (number -> NUMBER .)
    ELSE            reduce using rule 130 (number -> NUMBER .)
    DEDENT          reduce using rule 130 (number -> NUMBER .)
    R_SQB           reduce using rule 130 (number -> NUMBER .)
    R_CB            reduce using rule 130 (number -> NUMBER .)


state 66

    (131) number -> F_NUMBER .

    DOUBLE_STAR     reduce using rule 131 (number -> F_NUMBER .)
    L_PARENTHESIS   reduce using rule 131 (number -> F_NUMBER .)
    L_SQB           reduce using rule 131 (number -> F_NUMBER .)
    DOT             reduce using rule 131 (number -> F_NUMBER .)
    STAR            reduce using rule 131 (number -> F_NUMBER .)
    SLASH           reduce using rule 131 (number -> F_NUMBER .)
    DOUBLE_SLASH    reduce using rule 131 (number -> F_NUMBER .)
    PERCENT         reduce using rule 131 (number -> F_NUMBER .)
    PLUS            reduce using rule 131 (number -> F_NUMBER .)
    MINUS           reduce using rule 131 (number -> F_NUMBER .)
    L_SHIFT         reduce using rule 131 (number -> F_NUMBER .)
    R_SHIFT         reduce using rule 131 (number -> F_NUMBER .)
    AMPERSAND       reduce using rule 131 (number -> F_NUMBER .)
    CARET           reduce using rule 131 (number -> F_NUMBER .)
    PIPE            reduce using rule 131 (number -> F_NUMBER .)
    EQUALITY        reduce using rule 131 (number -> F_NUMBER .)
    INEQUALITY      reduce using rule 131 (number -> F_NUMBER .)
    GREATER_EQUAL   reduce using rule 131 (number -> F_NUMBER .)
    LESSER_EQUAL    reduce using rule 131 (number -> F_NUMBER .)
    GREATER         reduce using rule 131 (number -> F_NUMBER .)
    LESSER          reduce using rule 131 (number -> F_NUMBER .)
    NOT             reduce using rule 131 (number -> F_NUMBER .)
    IS              reduce using rule 131 (number -> F_NUMBER .)
    IN              reduce using rule 131 (number -> F_NUMBER .)
    AND             reduce using rule 131 (number -> F_NUMBER .)
    OR              reduce using rule 131 (number -> F_NUMBER .)
    IF              reduce using rule 131 (number -> F_NUMBER .)
    COMMA           reduce using rule 131 (number -> F_NUMBER .)
    NEWLINE         reduce using rule 131 (number -> F_NUMBER .)
    SEMICOLON       reduce using rule 131 (number -> F_NUMBER .)
    ENDMARKER       reduce using rule 131 (number -> F_NUMBER .)
    DEF             reduce using rule 131 (number -> F_NUMBER .)
    CLASS           reduce using rule 131 (number -> F_NUMBER .)
    FOR             reduce using rule 131 (number -> F_NUMBER .)
    WHILE           reduce using rule 131 (number -> F_NUMBER .)
    PASS            reduce using rule 131 (number -> F_NUMBER .)
    BREAK           reduce using rule 131 (number -> F_NUMBER .)
    CONTINUE        reduce using rule 131 (number -> F_NUMBER .)
    RETURN          reduce using rule 131 (number -> F_NUMBER .)
    DEL             reduce using rule 131 (number -> F_NUMBER .)
    GLOBAL          reduce using rule 131 (number -> F_NUMBER .)
    IDENTIFIER      reduce using rule 131 (number -> F_NUMBER .)
    TRUE            reduce using rule 131 (number -> F_NUMBER .)
    FALSE           reduce using rule 131 (number -> F_NUMBER .)
    NONE            reduce using rule 131 (number -> F_NUMBER .)
    STRING          reduce using rule 131 (number -> F_NUMBER .)
    TRIPLE_STRING   reduce using rule 131 (number -> F_NUMBER .)
    NUMBER          reduce using rule 131 (number -> F_NUMBER .)
    F_NUMBER        reduce using rule 131 (number -> F_NUMBER .)
    BIN_NUMBER      reduce using rule 131 (number -> F_NUMBER .)
    HEX_NUMBER      reduce using rule 131 (number -> F_NUMBER .)
    OCT_NUMBER      reduce using rule 131 (number -> F_NUMBER .)
    L_CB            reduce using rule 131 (number -> F_NUMBER .)
    R_PARENTHESIS   reduce using rule 131 (number -> F_NUMBER .)
    COLON           reduce using rule 131 (number -> F_NUMBER .)
    ELIF            reduce using rule 131 (number -> F_NUMBER .)
    ELSE            reduce using rule 131 (number -> F_NUMBER .)
    DEDENT          reduce using rule 131 (number -> F_NUMBER .)
    R_SQB           reduce using rule 131 (number -> F_NUMBER .)
    R_CB            reduce using rule 131 (number -> F_NUMBER .)


state 67

    (132) number -> BIN_NUMBER .

    DOUBLE_STAR     reduce using rule 132 (number -> BIN_NUMBER .)
    L_PARENTHESIS   reduce using rule 132 (number -> BIN_NUMBER .)
    L_SQB           reduce using rule 132 (number -> BIN_NUMBER .)
    DOT             reduce using rule 132 (number -> BIN_NUMBER .)
    STAR            reduce using rule 132 (number -> BIN_NUMBER .)
    SLASH           reduce using rule 132 (number -> BIN_NUMBER .)
    DOUBLE_SLASH    reduce using rule 132 (number -> BIN_NUMBER .)
    PERCENT         reduce using rule 132 (number -> BIN_NUMBER .)
    PLUS            reduce using rule 132 (number -> BIN_NUMBER .)
    MINUS           reduce using rule 132 (number -> BIN_NUMBER .)
    L_SHIFT         reduce using rule 132 (number -> BIN_NUMBER .)
    R_SHIFT         reduce using rule 132 (number -> BIN_NUMBER .)
    AMPERSAND       reduce using rule 132 (number -> BIN_NUMBER .)
    CARET           reduce using rule 132 (number -> BIN_NUMBER .)
    PIPE            reduce using rule 132 (number -> BIN_NUMBER .)
    EQUALITY        reduce using rule 132 (number -> BIN_NUMBER .)
    INEQUALITY      reduce using rule 132 (number -> BIN_NUMBER .)
    GREATER_EQUAL   reduce using rule 132 (number -> BIN_NUMBER .)
    LESSER_EQUAL    reduce using rule 132 (number -> BIN_NUMBER .)
    GREATER         reduce using rule 132 (number -> BIN_NUMBER .)
    LESSER          reduce using rule 132 (number -> BIN_NUMBER .)
    NOT             reduce using rule 132 (number -> BIN_NUMBER .)
    IS              reduce using rule 132 (number -> BIN_NUMBER .)
    IN              reduce using rule 132 (number -> BIN_NUMBER .)
    AND             reduce using rule 132 (number -> BIN_NUMBER .)
    OR              reduce using rule 132 (number -> BIN_NUMBER .)
    IF              reduce using rule 132 (number -> BIN_NUMBER .)
    COMMA           reduce using rule 132 (number -> BIN_NUMBER .)
    NEWLINE         reduce using rule 132 (number -> BIN_NUMBER .)
    SEMICOLON       reduce using rule 132 (number -> BIN_NUMBER .)
    ENDMARKER       reduce using rule 132 (number -> BIN_NUMBER .)
    DEF             reduce using rule 132 (number -> BIN_NUMBER .)
    CLASS           reduce using rule 132 (number -> BIN_NUMBER .)
    FOR             reduce using rule 132 (number -> BIN_NUMBER .)
    WHILE           reduce using rule 132 (number -> BIN_NUMBER .)
    PASS            reduce using rule 132 (number -> BIN_NUMBER .)
    BREAK           reduce using rule 132 (number -> BIN_NUMBER .)
    CONTINUE        reduce using rule 132 (number -> BIN_NUMBER .)
    RETURN          reduce using rule 132 (number -> BIN_NUMBER .)
    DEL             reduce using rule 132 (number -> BIN_NUMBER .)
    GLOBAL          reduce using rule 132 (number -> BIN_NUMBER .)
    IDENTIFIER      reduce using rule 132 (number -> BIN_NUMBER .)
    TRUE            reduce using rule 132 (number -> BIN_NUMBER .)
    FALSE           reduce using rule 132 (number -> BIN_NUMBER .)
    NONE            reduce using rule 132 (number -> BIN_NUMBER .)
    STRING          reduce using rule 132 (number -> BIN_NUMBER .)
    TRIPLE_STRING   reduce using rule 132 (number -> BIN_NUMBER .)
    NUMBER          reduce using rule 132 (number -> BIN_NUMBER .)
    F_NUMBER        reduce using rule 132 (number -> BIN_NUMBER .)
    BIN_NUMBER      reduce using rule 132 (number -> BIN_NUMBER .)
    HEX_NUMBER      reduce using rule 132 (number -> BIN_NUMBER .)
    OCT_NUMBER      reduce using rule 132 (number -> BIN_NUMBER .)
    L_CB            reduce using rule 132 (number -> BIN_NUMBER .)
    R_PARENTHESIS   reduce using rule 132 (number -> BIN_NUMBER .)
    COLON           reduce using rule 132 (number -> BIN_NUMBER .)
    ELIF            reduce using rule 132 (number -> BIN_NUMBER .)
    ELSE            reduce using rule 132 (number -> BIN_NUMBER .)
    DEDENT          reduce using rule 132 (number -> BIN_NUMBER .)
    R_SQB           reduce using rule 132 (number -> BIN_NUMBER .)
    R_CB            reduce using rule 132 (number -> BIN_NUMBER .)


state 68

    (133) number -> HEX_NUMBER .

    DOUBLE_STAR     reduce using rule 133 (number -> HEX_NUMBER .)
    L_PARENTHESIS   reduce using rule 133 (number -> HEX_NUMBER .)
    L_SQB           reduce using rule 133 (number -> HEX_NUMBER .)
    DOT             reduce using rule 133 (number -> HEX_NUMBER .)
    STAR            reduce using rule 133 (number -> HEX_NUMBER .)
    SLASH           reduce using rule 133 (number -> HEX_NUMBER .)
    DOUBLE_SLASH    reduce using rule 133 (number -> HEX_NUMBER .)
    PERCENT         reduce using rule 133 (number -> HEX_NUMBER .)
    PLUS            reduce using rule 133 (number -> HEX_NUMBER .)
    MINUS           reduce using rule 133 (number -> HEX_NUMBER .)
    L_SHIFT         reduce using rule 133 (number -> HEX_NUMBER .)
    R_SHIFT         reduce using rule 133 (number -> HEX_NUMBER .)
    AMPERSAND       reduce using rule 133 (number -> HEX_NUMBER .)
    CARET           reduce using rule 133 (number -> HEX_NUMBER .)
    PIPE            reduce using rule 133 (number -> HEX_NUMBER .)
    EQUALITY        reduce using rule 133 (number -> HEX_NUMBER .)
    INEQUALITY      reduce using rule 133 (number -> HEX_NUMBER .)
    GREATER_EQUAL   reduce using rule 133 (number -> HEX_NUMBER .)
    LESSER_EQUAL    reduce using rule 133 (number -> HEX_NUMBER .)
    GREATER         reduce using rule 133 (number -> HEX_NUMBER .)
    LESSER          reduce using rule 133 (number -> HEX_NUMBER .)
    NOT             reduce using rule 133 (number -> HEX_NUMBER .)
    IS              reduce using rule 133 (number -> HEX_NUMBER .)
    IN              reduce using rule 133 (number -> HEX_NUMBER .)
    AND             reduce using rule 133 (number -> HEX_NUMBER .)
    OR              reduce using rule 133 (number -> HEX_NUMBER .)
    IF              reduce using rule 133 (number -> HEX_NUMBER .)
    COMMA           reduce using rule 133 (number -> HEX_NUMBER .)
    NEWLINE         reduce using rule 133 (number -> HEX_NUMBER .)
    SEMICOLON       reduce using rule 133 (number -> HEX_NUMBER .)
    ENDMARKER       reduce using rule 133 (number -> HEX_NUMBER .)
    DEF             reduce using rule 133 (number -> HEX_NUMBER .)
    CLASS           reduce using rule 133 (number -> HEX_NUMBER .)
    FOR             reduce using rule 133 (number -> HEX_NUMBER .)
    WHILE           reduce using rule 133 (number -> HEX_NUMBER .)
    PASS            reduce using rule 133 (number -> HEX_NUMBER .)
    BREAK           reduce using rule 133 (number -> HEX_NUMBER .)
    CONTINUE        reduce using rule 133 (number -> HEX_NUMBER .)
    RETURN          reduce using rule 133 (number -> HEX_NUMBER .)
    DEL             reduce using rule 133 (number -> HEX_NUMBER .)
    GLOBAL          reduce using rule 133 (number -> HEX_NUMBER .)
    IDENTIFIER      reduce using rule 133 (number -> HEX_NUMBER .)
    TRUE            reduce using rule 133 (number -> HEX_NUMBER .)
    FALSE           reduce using rule 133 (number -> HEX_NUMBER .)
    NONE            reduce using rule 133 (number -> HEX_NUMBER .)
    STRING          reduce using rule 133 (number -> HEX_NUMBER .)
    TRIPLE_STRING   reduce using rule 133 (number -> HEX_NUMBER .)
    NUMBER          reduce using rule 133 (number -> HEX_NUMBER .)
    F_NUMBER        reduce using rule 133 (number -> HEX_NUMBER .)
    BIN_NUMBER      reduce using rule 133 (number -> HEX_NUMBER .)
    HEX_NUMBER      reduce using rule 133 (number -> HEX_NUMBER .)
    OCT_NUMBER      reduce using rule 133 (number -> HEX_NUMBER .)
    L_CB            reduce using rule 133 (number -> HEX_NUMBER .)
    R_PARENTHESIS   reduce using rule 133 (number -> HEX_NUMBER .)
    COLON           reduce using rule 133 (number -> HEX_NUMBER .)
    ELIF            reduce using rule 133 (number -> HEX_NUMBER .)
    ELSE            reduce using rule 133 (number -> HEX_NUMBER .)
    DEDENT          reduce using rule 133 (number -> HEX_NUMBER .)
    R_SQB           reduce using rule 133 (number -> HEX_NUMBER .)
    R_CB            reduce using rule 133 (number -> HEX_NUMBER .)


state 69

    (134) number -> OCT_NUMBER .

    DOUBLE_STAR     reduce using rule 134 (number -> OCT_NUMBER .)
    L_PARENTHESIS   reduce using rule 134 (number -> OCT_NUMBER .)
    L_SQB           reduce using rule 134 (number -> OCT_NUMBER .)
    DOT             reduce using rule 134 (number -> OCT_NUMBER .)
    STAR            reduce using rule 134 (number -> OCT_NUMBER .)
    SLASH           reduce using rule 134 (number -> OCT_NUMBER .)
    DOUBLE_SLASH    reduce using rule 134 (number -> OCT_NUMBER .)
    PERCENT         reduce using rule 134 (number -> OCT_NUMBER .)
    PLUS            reduce using rule 134 (number -> OCT_NUMBER .)
    MINUS           reduce using rule 134 (number -> OCT_NUMBER .)
    L_SHIFT         reduce using rule 134 (number -> OCT_NUMBER .)
    R_SHIFT         reduce using rule 134 (number -> OCT_NUMBER .)
    AMPERSAND       reduce using rule 134 (number -> OCT_NUMBER .)
    CARET           reduce using rule 134 (number -> OCT_NUMBER .)
    PIPE            reduce using rule 134 (number -> OCT_NUMBER .)
    EQUALITY        reduce using rule 134 (number -> OCT_NUMBER .)
    INEQUALITY      reduce using rule 134 (number -> OCT_NUMBER .)
    GREATER_EQUAL   reduce using rule 134 (number -> OCT_NUMBER .)
    LESSER_EQUAL    reduce using rule 134 (number -> OCT_NUMBER .)
    GREATER         reduce using rule 134 (number -> OCT_NUMBER .)
    LESSER          reduce using rule 134 (number -> OCT_NUMBER .)
    NOT             reduce using rule 134 (number -> OCT_NUMBER .)
    IS              reduce using rule 134 (number -> OCT_NUMBER .)
    IN              reduce using rule 134 (number -> OCT_NUMBER .)
    AND             reduce using rule 134 (number -> OCT_NUMBER .)
    OR              reduce using rule 134 (number -> OCT_NUMBER .)
    IF              reduce using rule 134 (number -> OCT_NUMBER .)
    COMMA           reduce using rule 134 (number -> OCT_NUMBER .)
    NEWLINE         reduce using rule 134 (number -> OCT_NUMBER .)
    SEMICOLON       reduce using rule 134 (number -> OCT_NUMBER .)
    ENDMARKER       reduce using rule 134 (number -> OCT_NUMBER .)
    DEF             reduce using rule 134 (number -> OCT_NUMBER .)
    CLASS           reduce using rule 134 (number -> OCT_NUMBER .)
    FOR             reduce using rule 134 (number -> OCT_NUMBER .)
    WHILE           reduce using rule 134 (number -> OCT_NUMBER .)
    PASS            reduce using rule 134 (number -> OCT_NUMBER .)
    BREAK           reduce using rule 134 (number -> OCT_NUMBER .)
    CONTINUE        reduce using rule 134 (number -> OCT_NUMBER .)
    RETURN          reduce using rule 134 (number -> OCT_NUMBER .)
    DEL             reduce using rule 134 (number -> OCT_NUMBER .)
    GLOBAL          reduce using rule 134 (number -> OCT_NUMBER .)
    IDENTIFIER      reduce using rule 134 (number -> OCT_NUMBER .)
    TRUE            reduce using rule 134 (number -> OCT_NUMBER .)
    FALSE           reduce using rule 134 (number -> OCT_NUMBER .)
    NONE            reduce using rule 134 (number -> OCT_NUMBER .)
    STRING          reduce using rule 134 (number -> OCT_NUMBER .)
    TRIPLE_STRING   reduce using rule 134 (number -> OCT_NUMBER .)
    NUMBER          reduce using rule 134 (number -> OCT_NUMBER .)
    F_NUMBER        reduce using rule 134 (number -> OCT_NUMBER .)
    BIN_NUMBER      reduce using rule 134 (number -> OCT_NUMBER .)
    HEX_NUMBER      reduce using rule 134 (number -> OCT_NUMBER .)
    OCT_NUMBER      reduce using rule 134 (number -> OCT_NUMBER .)
    L_CB            reduce using rule 134 (number -> OCT_NUMBER .)
    R_PARENTHESIS   reduce using rule 134 (number -> OCT_NUMBER .)
    COLON           reduce using rule 134 (number -> OCT_NUMBER .)
    ELIF            reduce using rule 134 (number -> OCT_NUMBER .)
    ELSE            reduce using rule 134 (number -> OCT_NUMBER .)
    DEDENT          reduce using rule 134 (number -> OCT_NUMBER .)
    R_SQB           reduce using rule 134 (number -> OCT_NUMBER .)
    R_CB            reduce using rule 134 (number -> OCT_NUMBER .)


state 70

    (144) dict -> L_CB . kvpairs R_CB
    (145) dict -> L_CB . R_CB
    (143) set -> L_CB . expressions R_CB
    (146) kvpairs -> . kvpair COMMA kvpairs
    (147) kvpairs -> . kvpair COMMA
    (148) kvpairs -> . kvpair
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (149) kvpair -> . expression COLON expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_CB            shift and go to state 147
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    kvpairs                        shift and go to state 146
    expressions                    shift and go to state 148
    kvpair                         shift and go to state 149
    expression                     shift and go to state 150
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 71

    (1) file -> statements ENDMARKER .

    $end            reduce using rule 1 (file -> statements ENDMARKER .)


state 72

    (3) statements -> statements statement .

    ENDMARKER       reduce using rule 3 (statements -> statements statement .)
    NEWLINE         reduce using rule 3 (statements -> statements statement .)
    DEF             reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    CLASS           reduce using rule 3 (statements -> statements statement .)
    FOR             reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    PASS            reduce using rule 3 (statements -> statements statement .)
    BREAK           reduce using rule 3 (statements -> statements statement .)
    CONTINUE        reduce using rule 3 (statements -> statements statement .)
    RETURN          reduce using rule 3 (statements -> statements statement .)
    DEL             reduce using rule 3 (statements -> statements statement .)
    GLOBAL          reduce using rule 3 (statements -> statements statement .)
    IDENTIFIER      reduce using rule 3 (statements -> statements statement .)
    L_SQB           reduce using rule 3 (statements -> statements statement .)
    L_PARENTHESIS   reduce using rule 3 (statements -> statements statement .)
    NOT             reduce using rule 3 (statements -> statements statement .)
    PLUS            reduce using rule 3 (statements -> statements statement .)
    MINUS           reduce using rule 3 (statements -> statements statement .)
    TRUE            reduce using rule 3 (statements -> statements statement .)
    FALSE           reduce using rule 3 (statements -> statements statement .)
    NONE            reduce using rule 3 (statements -> statements statement .)
    STRING          reduce using rule 3 (statements -> statements statement .)
    TRIPLE_STRING   reduce using rule 3 (statements -> statements statement .)
    NUMBER          reduce using rule 3 (statements -> statements statement .)
    F_NUMBER        reduce using rule 3 (statements -> statements statement .)
    BIN_NUMBER      reduce using rule 3 (statements -> statements statement .)
    HEX_NUMBER      reduce using rule 3 (statements -> statements statement .)
    OCT_NUMBER      reduce using rule 3 (statements -> statements statement .)
    L_CB            reduce using rule 3 (statements -> statements statement .)
    DEDENT          reduce using rule 3 (statements -> statements statement .)


state 73

    (4) statements -> statements NEWLINE .

    ENDMARKER       reduce using rule 4 (statements -> statements NEWLINE .)
    NEWLINE         reduce using rule 4 (statements -> statements NEWLINE .)
    DEF             reduce using rule 4 (statements -> statements NEWLINE .)
    IF              reduce using rule 4 (statements -> statements NEWLINE .)
    CLASS           reduce using rule 4 (statements -> statements NEWLINE .)
    FOR             reduce using rule 4 (statements -> statements NEWLINE .)
    WHILE           reduce using rule 4 (statements -> statements NEWLINE .)
    PASS            reduce using rule 4 (statements -> statements NEWLINE .)
    BREAK           reduce using rule 4 (statements -> statements NEWLINE .)
    CONTINUE        reduce using rule 4 (statements -> statements NEWLINE .)
    RETURN          reduce using rule 4 (statements -> statements NEWLINE .)
    DEL             reduce using rule 4 (statements -> statements NEWLINE .)
    GLOBAL          reduce using rule 4 (statements -> statements NEWLINE .)
    IDENTIFIER      reduce using rule 4 (statements -> statements NEWLINE .)
    L_SQB           reduce using rule 4 (statements -> statements NEWLINE .)
    L_PARENTHESIS   reduce using rule 4 (statements -> statements NEWLINE .)
    NOT             reduce using rule 4 (statements -> statements NEWLINE .)
    PLUS            reduce using rule 4 (statements -> statements NEWLINE .)
    MINUS           reduce using rule 4 (statements -> statements NEWLINE .)
    TRUE            reduce using rule 4 (statements -> statements NEWLINE .)
    FALSE           reduce using rule 4 (statements -> statements NEWLINE .)
    NONE            reduce using rule 4 (statements -> statements NEWLINE .)
    STRING          reduce using rule 4 (statements -> statements NEWLINE .)
    TRIPLE_STRING   reduce using rule 4 (statements -> statements NEWLINE .)
    NUMBER          reduce using rule 4 (statements -> statements NEWLINE .)
    F_NUMBER        reduce using rule 4 (statements -> statements NEWLINE .)
    BIN_NUMBER      reduce using rule 4 (statements -> statements NEWLINE .)
    HEX_NUMBER      reduce using rule 4 (statements -> statements NEWLINE .)
    OCT_NUMBER      reduce using rule 4 (statements -> statements NEWLINE .)
    L_CB            reduce using rule 4 (statements -> statements NEWLINE .)
    DEDENT          reduce using rule 4 (statements -> statements NEWLINE .)


state 74

    (8) simple_stmts -> simple_stmts SEMICOLON . simple_stmt NEWLINE
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    simple_stmt                    shift and go to state 151
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    expression                     shift and go to state 17
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 75

    (9) simple_stmts -> simple_stmt NEWLINE .

    SEMICOLON       reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    ENDMARKER       reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    NEWLINE         reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    DEF             reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    IF              reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    CLASS           reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    FOR             reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    WHILE           reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    PASS            reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    BREAK           reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    CONTINUE        reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    RETURN          reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    DEL             reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    GLOBAL          reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    IDENTIFIER      reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    L_SQB           reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    L_PARENTHESIS   reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    NOT             reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    PLUS            reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    MINUS           reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    TRUE            reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    FALSE           reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    NONE            reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    STRING          reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    TRIPLE_STRING   reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    NUMBER          reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    F_NUMBER        reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    BIN_NUMBER      reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    HEX_NUMBER      reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    OCT_NUMBER      reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    L_CB            reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    ELIF            reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    ELSE            reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)
    DEDENT          reduce using rule 9 (simple_stmts -> simple_stmt NEWLINE .)


state 76

    (44) function_def -> DEF IDENTIFIER . L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (45) function_def -> DEF IDENTIFIER . L_PARENTHESIS R_PARENTHESIS COLON block

    L_PARENTHESIS   shift and go to state 152


state 77

    (162) target_atomic -> L_PARENTHESIS targets . R_PARENTHESIS
    (150) targets -> targets . COMMA target

    R_PARENTHESIS   shift and go to state 153
    COMMA           shift and go to state 92


state 78

    (142) tuple -> L_PARENTHESIS R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    L_SQB           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    DOT             reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    STAR            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    SLASH           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    PERCENT         reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    PLUS            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    MINUS           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    L_SHIFT         reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    R_SHIFT         reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    AMPERSAND       reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    CARET           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    PIPE            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    EQUALITY        reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    INEQUALITY      reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    GREATER         reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    LESSER          reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    NOT             reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    IS              reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    IN              reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    AND             reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    OR              reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    IF              reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    COMMA           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    NEWLINE         reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    SEMICOLON       reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    ENDMARKER       reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    DEF             reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    CLASS           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    FOR             reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    WHILE           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    PASS            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    BREAK           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    CONTINUE        reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    RETURN          reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    DEL             reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    GLOBAL          reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    IDENTIFIER      reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    TRUE            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    FALSE           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    NONE            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    STRING          reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    TRIPLE_STRING   reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    NUMBER          reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    F_NUMBER        reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    BIN_NUMBER      reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    HEX_NUMBER      reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    OCT_NUMBER      reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    L_CB            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    COLON           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    ELIF            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    ELSE            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    DEDENT          reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    R_SQB           reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)
    R_CB            reduce using rule 142 (tuple -> L_PARENTHESIS R_PARENTHESIS .)


state 79

    (106) primary -> L_PARENTHESIS expression . R_PARENTHESIS
    (140) tuple -> L_PARENTHESIS expression . COMMA expressions R_PARENTHESIS
    (141) tuple -> L_PARENTHESIS expression . COMMA R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 154
    COMMA           shift and go to state 155


state 80

    (151) targets -> target .

    R_PARENTHESIS   reduce using rule 151 (targets -> target .)
    COMMA           reduce using rule 151 (targets -> target .)
    IN              reduce using rule 151 (targets -> target .)


state 81

    (48) if_stmt -> IF expression . COLON block elif_stmt
    (49) if_stmt -> IF expression . COLON block else_block
    (50) if_stmt -> IF expression . COLON block

    COLON           shift and go to state 156


state 82

    (106) primary -> L_PARENTHESIS . expression R_PARENTHESIS
    (140) tuple -> L_PARENTHESIS . expression COMMA expressions R_PARENTHESIS
    (141) tuple -> L_PARENTHESIS . expression COMMA R_PARENTHESIS
    (142) tuple -> L_PARENTHESIS . R_PARENTHESIS
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_PARENTHESIS   shift and go to state 78
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 79
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 83

    (138) list -> L_SQB . expressions R_SQB
    (139) list -> L_SQB . R_SQB
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_SQB           shift and go to state 111
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expressions                    shift and go to state 112
    expression                     shift and go to state 17
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 84

    (120) atomic -> IDENTIFIER .

    DOUBLE_STAR     reduce using rule 120 (atomic -> IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 120 (atomic -> IDENTIFIER .)
    L_SQB           reduce using rule 120 (atomic -> IDENTIFIER .)
    DOT             reduce using rule 120 (atomic -> IDENTIFIER .)
    STAR            reduce using rule 120 (atomic -> IDENTIFIER .)
    SLASH           reduce using rule 120 (atomic -> IDENTIFIER .)
    DOUBLE_SLASH    reduce using rule 120 (atomic -> IDENTIFIER .)
    PERCENT         reduce using rule 120 (atomic -> IDENTIFIER .)
    PLUS            reduce using rule 120 (atomic -> IDENTIFIER .)
    MINUS           reduce using rule 120 (atomic -> IDENTIFIER .)
    L_SHIFT         reduce using rule 120 (atomic -> IDENTIFIER .)
    R_SHIFT         reduce using rule 120 (atomic -> IDENTIFIER .)
    AMPERSAND       reduce using rule 120 (atomic -> IDENTIFIER .)
    CARET           reduce using rule 120 (atomic -> IDENTIFIER .)
    PIPE            reduce using rule 120 (atomic -> IDENTIFIER .)
    EQUALITY        reduce using rule 120 (atomic -> IDENTIFIER .)
    INEQUALITY      reduce using rule 120 (atomic -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 120 (atomic -> IDENTIFIER .)
    LESSER_EQUAL    reduce using rule 120 (atomic -> IDENTIFIER .)
    GREATER         reduce using rule 120 (atomic -> IDENTIFIER .)
    LESSER          reduce using rule 120 (atomic -> IDENTIFIER .)
    NOT             reduce using rule 120 (atomic -> IDENTIFIER .)
    IS              reduce using rule 120 (atomic -> IDENTIFIER .)
    IN              reduce using rule 120 (atomic -> IDENTIFIER .)
    AND             reduce using rule 120 (atomic -> IDENTIFIER .)
    OR              reduce using rule 120 (atomic -> IDENTIFIER .)
    IF              reduce using rule 120 (atomic -> IDENTIFIER .)
    COLON           reduce using rule 120 (atomic -> IDENTIFIER .)
    COMMA           reduce using rule 120 (atomic -> IDENTIFIER .)
    NEWLINE         reduce using rule 120 (atomic -> IDENTIFIER .)
    SEMICOLON       reduce using rule 120 (atomic -> IDENTIFIER .)
    ENDMARKER       reduce using rule 120 (atomic -> IDENTIFIER .)
    DEF             reduce using rule 120 (atomic -> IDENTIFIER .)
    CLASS           reduce using rule 120 (atomic -> IDENTIFIER .)
    FOR             reduce using rule 120 (atomic -> IDENTIFIER .)
    WHILE           reduce using rule 120 (atomic -> IDENTIFIER .)
    PASS            reduce using rule 120 (atomic -> IDENTIFIER .)
    BREAK           reduce using rule 120 (atomic -> IDENTIFIER .)
    CONTINUE        reduce using rule 120 (atomic -> IDENTIFIER .)
    RETURN          reduce using rule 120 (atomic -> IDENTIFIER .)
    DEL             reduce using rule 120 (atomic -> IDENTIFIER .)
    GLOBAL          reduce using rule 120 (atomic -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 120 (atomic -> IDENTIFIER .)
    TRUE            reduce using rule 120 (atomic -> IDENTIFIER .)
    FALSE           reduce using rule 120 (atomic -> IDENTIFIER .)
    NONE            reduce using rule 120 (atomic -> IDENTIFIER .)
    STRING          reduce using rule 120 (atomic -> IDENTIFIER .)
    TRIPLE_STRING   reduce using rule 120 (atomic -> IDENTIFIER .)
    NUMBER          reduce using rule 120 (atomic -> IDENTIFIER .)
    F_NUMBER        reduce using rule 120 (atomic -> IDENTIFIER .)
    BIN_NUMBER      reduce using rule 120 (atomic -> IDENTIFIER .)
    HEX_NUMBER      reduce using rule 120 (atomic -> IDENTIFIER .)
    OCT_NUMBER      reduce using rule 120 (atomic -> IDENTIFIER .)
    L_CB            reduce using rule 120 (atomic -> IDENTIFIER .)
    ELIF            reduce using rule 120 (atomic -> IDENTIFIER .)
    ELSE            reduce using rule 120 (atomic -> IDENTIFIER .)
    DEDENT          reduce using rule 120 (atomic -> IDENTIFIER .)
    R_PARENTHESIS   reduce using rule 120 (atomic -> IDENTIFIER .)
    R_SQB           reduce using rule 120 (atomic -> IDENTIFIER .)
    R_CB            reduce using rule 120 (atomic -> IDENTIFIER .)


state 85

    (41) class_def -> CLASS IDENTIFIER . L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (42) class_def -> CLASS IDENTIFIER . L_PARENTHESIS R_PARENTHESIS COLON block
    (43) class_def -> CLASS IDENTIFIER . COLON block

    L_PARENTHESIS   shift and go to state 157
    COLON           shift and go to state 158


state 86

    (57) for_stmt -> FOR targets . IN expressions COLON else_block
    (58) for_stmt -> FOR targets . IN expressions COLON block
    (150) targets -> targets . COMMA target

    IN              shift and go to state 159
    COMMA           shift and go to state 92


state 87

    (160) target_atomic -> IDENTIFIER .

    IN              reduce using rule 160 (target_atomic -> IDENTIFIER .)
    COMMA           reduce using rule 160 (target_atomic -> IDENTIFIER .)
    DOT             reduce using rule 160 (target_atomic -> IDENTIFIER .)
    L_SQB           reduce using rule 160 (target_atomic -> IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 160 (target_atomic -> IDENTIFIER .)
    R_SQB           reduce using rule 160 (target_atomic -> IDENTIFIER .)
    R_PARENTHESIS   reduce using rule 160 (target_atomic -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 160 (target_atomic -> IDENTIFIER .)
    ADDITION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    SUBTRACTION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    MULTIPLICATION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    DIVISION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    MODULO_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    EXPONENTIATION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)
    FLOOR_DIVISION_ASSIGNMENT reduce using rule 160 (target_atomic -> IDENTIFIER .)


state 88

    (161) target_atomic -> L_SQB . target_primary R_SQB
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS

    IDENTIFIER      shift and go to state 87
    L_SQB           shift and go to state 88
    L_PARENTHESIS   shift and go to state 89

    target_primary                 shift and go to state 110
    target_atomic                  shift and go to state 113

state 89

    (162) target_atomic -> L_PARENTHESIS . targets R_PARENTHESIS
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS

    IDENTIFIER      shift and go to state 87
    L_SQB           shift and go to state 88
    L_PARENTHESIS   shift and go to state 89

    targets                        shift and go to state 77
    target                         shift and go to state 80
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36

state 90

    (24) assignment -> targets augmentation_assignment . expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expressions                    shift and go to state 160
    expression                     shift and go to state 17
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 91

    (25) assignment -> targets ASSIGNMENT . assignment
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS

    IDENTIFIER      shift and go to state 87
    L_SQB           shift and go to state 88
    L_PARENTHESIS   shift and go to state 89

    targets                        shift and go to state 20
    assignment                     shift and go to state 161
    target                         shift and go to state 30
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36

state 92

    (150) targets -> targets COMMA . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS

    IDENTIFIER      shift and go to state 87
    L_SQB           shift and go to state 88
    L_PARENTHESIS   shift and go to state 89

    target                         shift and go to state 162
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36

state 93

    (27) augmentation_assignment -> ADDITION_ASSIGNMENT .

    NOT             reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    PLUS            reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    MINUS           reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    TRUE            reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    FALSE           reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    NONE            reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    STRING          reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    NUMBER          reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    L_SQB           reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)
    L_CB            reduce using rule 27 (augmentation_assignment -> ADDITION_ASSIGNMENT .)


state 94

    (28) augmentation_assignment -> SUBTRACTION_ASSIGNMENT .

    NOT             reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    PLUS            reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    MINUS           reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    TRUE            reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    FALSE           reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    NONE            reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    STRING          reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    NUMBER          reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    L_SQB           reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)
    L_CB            reduce using rule 28 (augmentation_assignment -> SUBTRACTION_ASSIGNMENT .)


state 95

    (29) augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .

    NOT             reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    PLUS            reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    MINUS           reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    TRUE            reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    FALSE           reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    NONE            reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    STRING          reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    NUMBER          reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    L_SQB           reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)
    L_CB            reduce using rule 29 (augmentation_assignment -> MULTIPLICATION_ASSIGNMENT .)


state 96

    (30) augmentation_assignment -> DIVISION_ASSIGNMENT .

    NOT             reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    PLUS            reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    MINUS           reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    TRUE            reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    FALSE           reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    NONE            reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    STRING          reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    NUMBER          reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    L_SQB           reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)
    L_CB            reduce using rule 30 (augmentation_assignment -> DIVISION_ASSIGNMENT .)


state 97

    (31) augmentation_assignment -> MODULO_ASSIGNMENT .

    NOT             reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    PLUS            reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    MINUS           reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    TRUE            reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    FALSE           reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    NONE            reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    STRING          reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    NUMBER          reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    F_NUMBER        reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    L_SQB           reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)
    L_CB            reduce using rule 31 (augmentation_assignment -> MODULO_ASSIGNMENT .)


state 98

    (32) augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .

    NOT             reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    PLUS            reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    MINUS           reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    TRUE            reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    FALSE           reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    NONE            reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    STRING          reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    NUMBER          reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    L_SQB           reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)
    L_CB            reduce using rule 32 (augmentation_assignment -> EXPONENTIATION_ASSIGNMENT .)


state 99

    (33) augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .

    NOT             reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    PLUS            reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    MINUS           reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    L_PARENTHESIS   reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    TRUE            reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    FALSE           reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    NONE            reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    STRING          reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    TRIPLE_STRING   reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    NUMBER          reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    F_NUMBER        reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    BIN_NUMBER      reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    HEX_NUMBER      reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    OCT_NUMBER      reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    L_SQB           reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)
    L_CB            reduce using rule 33 (augmentation_assignment -> FLOOR_DIVISION_ASSIGNMENT .)


state 100

    (59) expressions -> expressions COMMA . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 163
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 101

    (55) while_stmt -> WHILE expression . COLON block else_block
    (56) while_stmt -> WHILE expression . COLON block

    COLON           shift and go to state 164


state 102

    (26) assignment -> target ASSIGNMENT . expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expressions                    shift and go to state 165
    expression                     shift and go to state 17
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 103

    (34) return_stmt -> RETURN expressions .
    (59) expressions -> expressions . COMMA expression

    NEWLINE         reduce using rule 34 (return_stmt -> RETURN expressions .)
    SEMICOLON       reduce using rule 34 (return_stmt -> RETURN expressions .)
    ENDMARKER       reduce using rule 34 (return_stmt -> RETURN expressions .)
    DEF             reduce using rule 34 (return_stmt -> RETURN expressions .)
    IF              reduce using rule 34 (return_stmt -> RETURN expressions .)
    CLASS           reduce using rule 34 (return_stmt -> RETURN expressions .)
    FOR             reduce using rule 34 (return_stmt -> RETURN expressions .)
    WHILE           reduce using rule 34 (return_stmt -> RETURN expressions .)
    PASS            reduce using rule 34 (return_stmt -> RETURN expressions .)
    BREAK           reduce using rule 34 (return_stmt -> RETURN expressions .)
    CONTINUE        reduce using rule 34 (return_stmt -> RETURN expressions .)
    RETURN          reduce using rule 34 (return_stmt -> RETURN expressions .)
    DEL             reduce using rule 34 (return_stmt -> RETURN expressions .)
    GLOBAL          reduce using rule 34 (return_stmt -> RETURN expressions .)
    IDENTIFIER      reduce using rule 34 (return_stmt -> RETURN expressions .)
    L_SQB           reduce using rule 34 (return_stmt -> RETURN expressions .)
    L_PARENTHESIS   reduce using rule 34 (return_stmt -> RETURN expressions .)
    NOT             reduce using rule 34 (return_stmt -> RETURN expressions .)
    PLUS            reduce using rule 34 (return_stmt -> RETURN expressions .)
    MINUS           reduce using rule 34 (return_stmt -> RETURN expressions .)
    TRUE            reduce using rule 34 (return_stmt -> RETURN expressions .)
    FALSE           reduce using rule 34 (return_stmt -> RETURN expressions .)
    NONE            reduce using rule 34 (return_stmt -> RETURN expressions .)
    STRING          reduce using rule 34 (return_stmt -> RETURN expressions .)
    TRIPLE_STRING   reduce using rule 34 (return_stmt -> RETURN expressions .)
    NUMBER          reduce using rule 34 (return_stmt -> RETURN expressions .)
    F_NUMBER        reduce using rule 34 (return_stmt -> RETURN expressions .)
    BIN_NUMBER      reduce using rule 34 (return_stmt -> RETURN expressions .)
    HEX_NUMBER      reduce using rule 34 (return_stmt -> RETURN expressions .)
    OCT_NUMBER      reduce using rule 34 (return_stmt -> RETURN expressions .)
    L_CB            reduce using rule 34 (return_stmt -> RETURN expressions .)
    ELIF            reduce using rule 34 (return_stmt -> RETURN expressions .)
    ELSE            reduce using rule 34 (return_stmt -> RETURN expressions .)
    DEDENT          reduce using rule 34 (return_stmt -> RETURN expressions .)
    COMMA           shift and go to state 100


state 104

    (36) del_stmt -> DEL namelist .
    (37) namelist -> namelist . COMMA IDENTIFIER

    NEWLINE         reduce using rule 36 (del_stmt -> DEL namelist .)
    SEMICOLON       reduce using rule 36 (del_stmt -> DEL namelist .)
    ENDMARKER       reduce using rule 36 (del_stmt -> DEL namelist .)
    DEF             reduce using rule 36 (del_stmt -> DEL namelist .)
    IF              reduce using rule 36 (del_stmt -> DEL namelist .)
    CLASS           reduce using rule 36 (del_stmt -> DEL namelist .)
    FOR             reduce using rule 36 (del_stmt -> DEL namelist .)
    WHILE           reduce using rule 36 (del_stmt -> DEL namelist .)
    PASS            reduce using rule 36 (del_stmt -> DEL namelist .)
    BREAK           reduce using rule 36 (del_stmt -> DEL namelist .)
    CONTINUE        reduce using rule 36 (del_stmt -> DEL namelist .)
    RETURN          reduce using rule 36 (del_stmt -> DEL namelist .)
    DEL             reduce using rule 36 (del_stmt -> DEL namelist .)
    GLOBAL          reduce using rule 36 (del_stmt -> DEL namelist .)
    IDENTIFIER      reduce using rule 36 (del_stmt -> DEL namelist .)
    L_SQB           reduce using rule 36 (del_stmt -> DEL namelist .)
    L_PARENTHESIS   reduce using rule 36 (del_stmt -> DEL namelist .)
    NOT             reduce using rule 36 (del_stmt -> DEL namelist .)
    PLUS            reduce using rule 36 (del_stmt -> DEL namelist .)
    MINUS           reduce using rule 36 (del_stmt -> DEL namelist .)
    TRUE            reduce using rule 36 (del_stmt -> DEL namelist .)
    FALSE           reduce using rule 36 (del_stmt -> DEL namelist .)
    NONE            reduce using rule 36 (del_stmt -> DEL namelist .)
    STRING          reduce using rule 36 (del_stmt -> DEL namelist .)
    TRIPLE_STRING   reduce using rule 36 (del_stmt -> DEL namelist .)
    NUMBER          reduce using rule 36 (del_stmt -> DEL namelist .)
    F_NUMBER        reduce using rule 36 (del_stmt -> DEL namelist .)
    BIN_NUMBER      reduce using rule 36 (del_stmt -> DEL namelist .)
    HEX_NUMBER      reduce using rule 36 (del_stmt -> DEL namelist .)
    OCT_NUMBER      reduce using rule 36 (del_stmt -> DEL namelist .)
    L_CB            reduce using rule 36 (del_stmt -> DEL namelist .)
    ELIF            reduce using rule 36 (del_stmt -> DEL namelist .)
    ELSE            reduce using rule 36 (del_stmt -> DEL namelist .)
    DEDENT          reduce using rule 36 (del_stmt -> DEL namelist .)
    COMMA           shift and go to state 166


state 105

    (38) namelist -> IDENTIFIER .

    COMMA           reduce using rule 38 (namelist -> IDENTIFIER .)
    NEWLINE         reduce using rule 38 (namelist -> IDENTIFIER .)
    SEMICOLON       reduce using rule 38 (namelist -> IDENTIFIER .)
    ENDMARKER       reduce using rule 38 (namelist -> IDENTIFIER .)
    DEF             reduce using rule 38 (namelist -> IDENTIFIER .)
    IF              reduce using rule 38 (namelist -> IDENTIFIER .)
    CLASS           reduce using rule 38 (namelist -> IDENTIFIER .)
    FOR             reduce using rule 38 (namelist -> IDENTIFIER .)
    WHILE           reduce using rule 38 (namelist -> IDENTIFIER .)
    PASS            reduce using rule 38 (namelist -> IDENTIFIER .)
    BREAK           reduce using rule 38 (namelist -> IDENTIFIER .)
    CONTINUE        reduce using rule 38 (namelist -> IDENTIFIER .)
    RETURN          reduce using rule 38 (namelist -> IDENTIFIER .)
    DEL             reduce using rule 38 (namelist -> IDENTIFIER .)
    GLOBAL          reduce using rule 38 (namelist -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 38 (namelist -> IDENTIFIER .)
    L_SQB           reduce using rule 38 (namelist -> IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 38 (namelist -> IDENTIFIER .)
    NOT             reduce using rule 38 (namelist -> IDENTIFIER .)
    PLUS            reduce using rule 38 (namelist -> IDENTIFIER .)
    MINUS           reduce using rule 38 (namelist -> IDENTIFIER .)
    TRUE            reduce using rule 38 (namelist -> IDENTIFIER .)
    FALSE           reduce using rule 38 (namelist -> IDENTIFIER .)
    NONE            reduce using rule 38 (namelist -> IDENTIFIER .)
    STRING          reduce using rule 38 (namelist -> IDENTIFIER .)
    TRIPLE_STRING   reduce using rule 38 (namelist -> IDENTIFIER .)
    NUMBER          reduce using rule 38 (namelist -> IDENTIFIER .)
    F_NUMBER        reduce using rule 38 (namelist -> IDENTIFIER .)
    BIN_NUMBER      reduce using rule 38 (namelist -> IDENTIFIER .)
    HEX_NUMBER      reduce using rule 38 (namelist -> IDENTIFIER .)
    OCT_NUMBER      reduce using rule 38 (namelist -> IDENTIFIER .)
    L_CB            reduce using rule 38 (namelist -> IDENTIFIER .)
    ELIF            reduce using rule 38 (namelist -> IDENTIFIER .)
    ELSE            reduce using rule 38 (namelist -> IDENTIFIER .)
    DEDENT          reduce using rule 38 (namelist -> IDENTIFIER .)


state 106

    (35) global_stmt -> GLOBAL namelist .
    (37) namelist -> namelist . COMMA IDENTIFIER

    NEWLINE         reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    SEMICOLON       reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    ENDMARKER       reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    DEF             reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    IF              reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    CLASS           reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    FOR             reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    WHILE           reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    PASS            reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    BREAK           reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    CONTINUE        reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    RETURN          reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    DEL             reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    GLOBAL          reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    IDENTIFIER      reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    L_SQB           reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    L_PARENTHESIS   reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    NOT             reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    PLUS            reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    MINUS           reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    TRUE            reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    FALSE           reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    NONE            reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    STRING          reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    TRIPLE_STRING   reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    NUMBER          reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    F_NUMBER        reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    BIN_NUMBER      reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    HEX_NUMBER      reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    OCT_NUMBER      reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    L_CB            reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    ELIF            reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    ELSE            reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    DEDENT          reduce using rule 35 (global_stmt -> GLOBAL namelist .)
    COMMA           shift and go to state 166


state 107

    (152) target -> target_primary DOT . IDENTIFIER
    (155) target_primary -> target_primary DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 167


state 108

    (153) target -> target_primary L_SQB . slices R_SQB
    (156) target_primary -> target_primary L_SQB . slices R_SQB
    (111) slices -> . slices COMMA slice
    (112) slices -> . slice
    (113) slice -> . expression COLON expression COLON expression
    (114) slice -> . expression COLON expression
    (115) slice -> . expression COLON
    (116) slice -> . COLON expression
    (117) slice -> . COLON COLON
    (118) slice -> . COLON
    (119) slice -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    COLON           shift and go to state 171
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    slices                         shift and go to state 168
    slice                          shift and go to state 169
    expression                     shift and go to state 170
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 109

    (157) target_primary -> target_primary L_PARENTHESIS . R_PARENTHESIS
    (158) target_primary -> target_primary L_PARENTHESIS . arguments R_PARENTHESIS
    (135) arguments -> . expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_PARENTHESIS   shift and go to state 172
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    arguments                      shift and go to state 173
    expressions                    shift and go to state 174
    expression                     shift and go to state 17
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 110

    (161) target_atomic -> L_SQB target_primary . R_SQB
    (155) target_primary -> target_primary . DOT IDENTIFIER
    (156) target_primary -> target_primary . L_SQB slices R_SQB
    (157) target_primary -> target_primary . L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> target_primary . L_PARENTHESIS arguments R_PARENTHESIS

    R_SQB           shift and go to state 176
    DOT             shift and go to state 177
    L_SQB           shift and go to state 175
    L_PARENTHESIS   shift and go to state 109


state 111

    (139) list -> L_SQB R_SQB .

    DOUBLE_STAR     reduce using rule 139 (list -> L_SQB R_SQB .)
    L_PARENTHESIS   reduce using rule 139 (list -> L_SQB R_SQB .)
    L_SQB           reduce using rule 139 (list -> L_SQB R_SQB .)
    DOT             reduce using rule 139 (list -> L_SQB R_SQB .)
    STAR            reduce using rule 139 (list -> L_SQB R_SQB .)
    SLASH           reduce using rule 139 (list -> L_SQB R_SQB .)
    DOUBLE_SLASH    reduce using rule 139 (list -> L_SQB R_SQB .)
    PERCENT         reduce using rule 139 (list -> L_SQB R_SQB .)
    PLUS            reduce using rule 139 (list -> L_SQB R_SQB .)
    MINUS           reduce using rule 139 (list -> L_SQB R_SQB .)
    L_SHIFT         reduce using rule 139 (list -> L_SQB R_SQB .)
    R_SHIFT         reduce using rule 139 (list -> L_SQB R_SQB .)
    AMPERSAND       reduce using rule 139 (list -> L_SQB R_SQB .)
    CARET           reduce using rule 139 (list -> L_SQB R_SQB .)
    PIPE            reduce using rule 139 (list -> L_SQB R_SQB .)
    EQUALITY        reduce using rule 139 (list -> L_SQB R_SQB .)
    INEQUALITY      reduce using rule 139 (list -> L_SQB R_SQB .)
    GREATER_EQUAL   reduce using rule 139 (list -> L_SQB R_SQB .)
    LESSER_EQUAL    reduce using rule 139 (list -> L_SQB R_SQB .)
    GREATER         reduce using rule 139 (list -> L_SQB R_SQB .)
    LESSER          reduce using rule 139 (list -> L_SQB R_SQB .)
    NOT             reduce using rule 139 (list -> L_SQB R_SQB .)
    IS              reduce using rule 139 (list -> L_SQB R_SQB .)
    IN              reduce using rule 139 (list -> L_SQB R_SQB .)
    AND             reduce using rule 139 (list -> L_SQB R_SQB .)
    OR              reduce using rule 139 (list -> L_SQB R_SQB .)
    IF              reduce using rule 139 (list -> L_SQB R_SQB .)
    COMMA           reduce using rule 139 (list -> L_SQB R_SQB .)
    NEWLINE         reduce using rule 139 (list -> L_SQB R_SQB .)
    SEMICOLON       reduce using rule 139 (list -> L_SQB R_SQB .)
    ENDMARKER       reduce using rule 139 (list -> L_SQB R_SQB .)
    DEF             reduce using rule 139 (list -> L_SQB R_SQB .)
    CLASS           reduce using rule 139 (list -> L_SQB R_SQB .)
    FOR             reduce using rule 139 (list -> L_SQB R_SQB .)
    WHILE           reduce using rule 139 (list -> L_SQB R_SQB .)
    PASS            reduce using rule 139 (list -> L_SQB R_SQB .)
    BREAK           reduce using rule 139 (list -> L_SQB R_SQB .)
    CONTINUE        reduce using rule 139 (list -> L_SQB R_SQB .)
    RETURN          reduce using rule 139 (list -> L_SQB R_SQB .)
    DEL             reduce using rule 139 (list -> L_SQB R_SQB .)
    GLOBAL          reduce using rule 139 (list -> L_SQB R_SQB .)
    IDENTIFIER      reduce using rule 139 (list -> L_SQB R_SQB .)
    TRUE            reduce using rule 139 (list -> L_SQB R_SQB .)
    FALSE           reduce using rule 139 (list -> L_SQB R_SQB .)
    NONE            reduce using rule 139 (list -> L_SQB R_SQB .)
    STRING          reduce using rule 139 (list -> L_SQB R_SQB .)
    TRIPLE_STRING   reduce using rule 139 (list -> L_SQB R_SQB .)
    NUMBER          reduce using rule 139 (list -> L_SQB R_SQB .)
    F_NUMBER        reduce using rule 139 (list -> L_SQB R_SQB .)
    BIN_NUMBER      reduce using rule 139 (list -> L_SQB R_SQB .)
    HEX_NUMBER      reduce using rule 139 (list -> L_SQB R_SQB .)
    OCT_NUMBER      reduce using rule 139 (list -> L_SQB R_SQB .)
    L_CB            reduce using rule 139 (list -> L_SQB R_SQB .)
    R_PARENTHESIS   reduce using rule 139 (list -> L_SQB R_SQB .)
    COLON           reduce using rule 139 (list -> L_SQB R_SQB .)
    ELIF            reduce using rule 139 (list -> L_SQB R_SQB .)
    ELSE            reduce using rule 139 (list -> L_SQB R_SQB .)
    DEDENT          reduce using rule 139 (list -> L_SQB R_SQB .)
    R_SQB           reduce using rule 139 (list -> L_SQB R_SQB .)
    R_CB            reduce using rule 139 (list -> L_SQB R_SQB .)


state 112

    (138) list -> L_SQB expressions . R_SQB
    (59) expressions -> expressions . COMMA expression

    R_SQB           shift and go to state 178
    COMMA           shift and go to state 100


state 113

    (159) target_primary -> target_atomic .

    R_SQB           reduce using rule 159 (target_primary -> target_atomic .)
    DOT             reduce using rule 159 (target_primary -> target_atomic .)
    L_SQB           reduce using rule 159 (target_primary -> target_atomic .)
    L_PARENTHESIS   reduce using rule 159 (target_primary -> target_atomic .)


state 114

    (61) expression -> disjunction IF . disjunction ELSE expression
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    disjunction                    shift and go to state 179
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 115

    (63) disjunction -> conjunction OR . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    conjunction                    shift and go to state 38
    disjunction                    shift and go to state 180
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 116

    (65) conjunction -> inversion AND . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    inversion                      shift and go to state 181
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 117

    (67) inversion -> NOT inversion .

    AND             reduce using rule 67 (inversion -> NOT inversion .)
    OR              reduce using rule 67 (inversion -> NOT inversion .)
    IF              reduce using rule 67 (inversion -> NOT inversion .)
    COMMA           reduce using rule 67 (inversion -> NOT inversion .)
    NEWLINE         reduce using rule 67 (inversion -> NOT inversion .)
    SEMICOLON       reduce using rule 67 (inversion -> NOT inversion .)
    ENDMARKER       reduce using rule 67 (inversion -> NOT inversion .)
    DEF             reduce using rule 67 (inversion -> NOT inversion .)
    CLASS           reduce using rule 67 (inversion -> NOT inversion .)
    FOR             reduce using rule 67 (inversion -> NOT inversion .)
    WHILE           reduce using rule 67 (inversion -> NOT inversion .)
    PASS            reduce using rule 67 (inversion -> NOT inversion .)
    BREAK           reduce using rule 67 (inversion -> NOT inversion .)
    CONTINUE        reduce using rule 67 (inversion -> NOT inversion .)
    RETURN          reduce using rule 67 (inversion -> NOT inversion .)
    DEL             reduce using rule 67 (inversion -> NOT inversion .)
    GLOBAL          reduce using rule 67 (inversion -> NOT inversion .)
    IDENTIFIER      reduce using rule 67 (inversion -> NOT inversion .)
    L_SQB           reduce using rule 67 (inversion -> NOT inversion .)
    L_PARENTHESIS   reduce using rule 67 (inversion -> NOT inversion .)
    NOT             reduce using rule 67 (inversion -> NOT inversion .)
    PLUS            reduce using rule 67 (inversion -> NOT inversion .)
    MINUS           reduce using rule 67 (inversion -> NOT inversion .)
    TRUE            reduce using rule 67 (inversion -> NOT inversion .)
    FALSE           reduce using rule 67 (inversion -> NOT inversion .)
    NONE            reduce using rule 67 (inversion -> NOT inversion .)
    STRING          reduce using rule 67 (inversion -> NOT inversion .)
    TRIPLE_STRING   reduce using rule 67 (inversion -> NOT inversion .)
    NUMBER          reduce using rule 67 (inversion -> NOT inversion .)
    F_NUMBER        reduce using rule 67 (inversion -> NOT inversion .)
    BIN_NUMBER      reduce using rule 67 (inversion -> NOT inversion .)
    HEX_NUMBER      reduce using rule 67 (inversion -> NOT inversion .)
    OCT_NUMBER      reduce using rule 67 (inversion -> NOT inversion .)
    L_CB            reduce using rule 67 (inversion -> NOT inversion .)
    R_PARENTHESIS   reduce using rule 67 (inversion -> NOT inversion .)
    COLON           reduce using rule 67 (inversion -> NOT inversion .)
    ELIF            reduce using rule 67 (inversion -> NOT inversion .)
    ELSE            reduce using rule 67 (inversion -> NOT inversion .)
    DEDENT          reduce using rule 67 (inversion -> NOT inversion .)
    R_SQB           reduce using rule 67 (inversion -> NOT inversion .)
    R_CB            reduce using rule 67 (inversion -> NOT inversion .)


state 118

    (69) comparison -> bitwise_or compare_op_list .
    (71) compare_op_list -> compare_op_list . compare_op
    (73) compare_op -> . EQUALITY bitwise_or
    (74) compare_op -> . INEQUALITY bitwise_or
    (75) compare_op -> . GREATER_EQUAL bitwise_or
    (76) compare_op -> . LESSER_EQUAL bitwise_or
    (77) compare_op -> . GREATER bitwise_or
    (78) compare_op -> . LESSER bitwise_or
    (79) compare_op -> . NOT IN bitwise_or
    (80) compare_op -> . IS NOT bitwise_or
    (81) compare_op -> . IN bitwise_or
    (82) compare_op -> . IS bitwise_or

  ! shift/reduce conflict for NOT resolved as shift
    AND             reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    OR              reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    IF              reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    COMMA           reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    NEWLINE         reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    SEMICOLON       reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    ENDMARKER       reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    DEF             reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    CLASS           reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    FOR             reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    WHILE           reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    PASS            reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    BREAK           reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    CONTINUE        reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    RETURN          reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    DEL             reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    GLOBAL          reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    IDENTIFIER      reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    L_SQB           reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    L_PARENTHESIS   reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    PLUS            reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    MINUS           reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    TRUE            reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    FALSE           reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    NONE            reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    STRING          reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    TRIPLE_STRING   reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    NUMBER          reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    F_NUMBER        reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    BIN_NUMBER      reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    HEX_NUMBER      reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    OCT_NUMBER      reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    L_CB            reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    R_PARENTHESIS   reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    COLON           reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    ELIF            reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    ELSE            reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    DEDENT          reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    R_SQB           reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    R_CB            reduce using rule 69 (comparison -> bitwise_or compare_op_list .)
    EQUALITY        shift and go to state 121
    INEQUALITY      shift and go to state 122
    GREATER_EQUAL   shift and go to state 123
    LESSER_EQUAL    shift and go to state 124
    GREATER         shift and go to state 125
    LESSER          shift and go to state 126
    NOT             shift and go to state 127
    IS              shift and go to state 129
    IN              shift and go to state 128

  ! NOT             [ reduce using rule 69 (comparison -> bitwise_or compare_op_list .) ]

    compare_op                     shift and go to state 182

state 119

    (83) bitwise_or -> bitwise_or PIPE . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_xor                    shift and go to state 183
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 120

    (72) compare_op_list -> compare_op .

    EQUALITY        reduce using rule 72 (compare_op_list -> compare_op .)
    INEQUALITY      reduce using rule 72 (compare_op_list -> compare_op .)
    GREATER_EQUAL   reduce using rule 72 (compare_op_list -> compare_op .)
    LESSER_EQUAL    reduce using rule 72 (compare_op_list -> compare_op .)
    GREATER         reduce using rule 72 (compare_op_list -> compare_op .)
    LESSER          reduce using rule 72 (compare_op_list -> compare_op .)
    NOT             reduce using rule 72 (compare_op_list -> compare_op .)
    IS              reduce using rule 72 (compare_op_list -> compare_op .)
    IN              reduce using rule 72 (compare_op_list -> compare_op .)
    AND             reduce using rule 72 (compare_op_list -> compare_op .)
    OR              reduce using rule 72 (compare_op_list -> compare_op .)
    IF              reduce using rule 72 (compare_op_list -> compare_op .)
    COMMA           reduce using rule 72 (compare_op_list -> compare_op .)
    NEWLINE         reduce using rule 72 (compare_op_list -> compare_op .)
    SEMICOLON       reduce using rule 72 (compare_op_list -> compare_op .)
    ENDMARKER       reduce using rule 72 (compare_op_list -> compare_op .)
    DEF             reduce using rule 72 (compare_op_list -> compare_op .)
    CLASS           reduce using rule 72 (compare_op_list -> compare_op .)
    FOR             reduce using rule 72 (compare_op_list -> compare_op .)
    WHILE           reduce using rule 72 (compare_op_list -> compare_op .)
    PASS            reduce using rule 72 (compare_op_list -> compare_op .)
    BREAK           reduce using rule 72 (compare_op_list -> compare_op .)
    CONTINUE        reduce using rule 72 (compare_op_list -> compare_op .)
    RETURN          reduce using rule 72 (compare_op_list -> compare_op .)
    DEL             reduce using rule 72 (compare_op_list -> compare_op .)
    GLOBAL          reduce using rule 72 (compare_op_list -> compare_op .)
    IDENTIFIER      reduce using rule 72 (compare_op_list -> compare_op .)
    L_SQB           reduce using rule 72 (compare_op_list -> compare_op .)
    L_PARENTHESIS   reduce using rule 72 (compare_op_list -> compare_op .)
    PLUS            reduce using rule 72 (compare_op_list -> compare_op .)
    MINUS           reduce using rule 72 (compare_op_list -> compare_op .)
    TRUE            reduce using rule 72 (compare_op_list -> compare_op .)
    FALSE           reduce using rule 72 (compare_op_list -> compare_op .)
    NONE            reduce using rule 72 (compare_op_list -> compare_op .)
    STRING          reduce using rule 72 (compare_op_list -> compare_op .)
    TRIPLE_STRING   reduce using rule 72 (compare_op_list -> compare_op .)
    NUMBER          reduce using rule 72 (compare_op_list -> compare_op .)
    F_NUMBER        reduce using rule 72 (compare_op_list -> compare_op .)
    BIN_NUMBER      reduce using rule 72 (compare_op_list -> compare_op .)
    HEX_NUMBER      reduce using rule 72 (compare_op_list -> compare_op .)
    OCT_NUMBER      reduce using rule 72 (compare_op_list -> compare_op .)
    L_CB            reduce using rule 72 (compare_op_list -> compare_op .)
    R_PARENTHESIS   reduce using rule 72 (compare_op_list -> compare_op .)
    COLON           reduce using rule 72 (compare_op_list -> compare_op .)
    ELIF            reduce using rule 72 (compare_op_list -> compare_op .)
    ELSE            reduce using rule 72 (compare_op_list -> compare_op .)
    DEDENT          reduce using rule 72 (compare_op_list -> compare_op .)
    R_SQB           reduce using rule 72 (compare_op_list -> compare_op .)
    R_CB            reduce using rule 72 (compare_op_list -> compare_op .)


state 121

    (73) compare_op -> EQUALITY . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 184
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 122

    (74) compare_op -> INEQUALITY . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 185
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 123

    (75) compare_op -> GREATER_EQUAL . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 186
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 124

    (76) compare_op -> LESSER_EQUAL . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 187
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 125

    (77) compare_op -> GREATER . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 188
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 126

    (78) compare_op -> LESSER . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 189
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 127

    (79) compare_op -> NOT . IN bitwise_or

    IN              shift and go to state 190


state 128

    (81) compare_op -> IN . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 191
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 129

    (80) compare_op -> IS . NOT bitwise_or
    (82) compare_op -> IS . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 192
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 193
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 130

    (85) bitwise_xor -> bitwise_xor CARET . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_and                    shift and go to state 194
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 131

    (87) bitwise_and -> bitwise_and AMPERSAND . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    shift_expr                     shift and go to state 195
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 132

    (89) shift_expr -> shift_expr L_SHIFT . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    sum                            shift and go to state 196
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 133

    (90) shift_expr -> shift_expr R_SHIFT . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    sum                            shift and go to state 197
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 134

    (92) sum -> sum PLUS . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    term                           shift and go to state 198
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 135

    (93) sum -> sum MINUS . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    term                           shift and go to state 199
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 136

    (100) factor -> PLUS factor .

    STAR            reduce using rule 100 (factor -> PLUS factor .)
    SLASH           reduce using rule 100 (factor -> PLUS factor .)
    DOUBLE_SLASH    reduce using rule 100 (factor -> PLUS factor .)
    PERCENT         reduce using rule 100 (factor -> PLUS factor .)
    PLUS            reduce using rule 100 (factor -> PLUS factor .)
    MINUS           reduce using rule 100 (factor -> PLUS factor .)
    L_SHIFT         reduce using rule 100 (factor -> PLUS factor .)
    R_SHIFT         reduce using rule 100 (factor -> PLUS factor .)
    AMPERSAND       reduce using rule 100 (factor -> PLUS factor .)
    CARET           reduce using rule 100 (factor -> PLUS factor .)
    PIPE            reduce using rule 100 (factor -> PLUS factor .)
    EQUALITY        reduce using rule 100 (factor -> PLUS factor .)
    INEQUALITY      reduce using rule 100 (factor -> PLUS factor .)
    GREATER_EQUAL   reduce using rule 100 (factor -> PLUS factor .)
    LESSER_EQUAL    reduce using rule 100 (factor -> PLUS factor .)
    GREATER         reduce using rule 100 (factor -> PLUS factor .)
    LESSER          reduce using rule 100 (factor -> PLUS factor .)
    NOT             reduce using rule 100 (factor -> PLUS factor .)
    IS              reduce using rule 100 (factor -> PLUS factor .)
    IN              reduce using rule 100 (factor -> PLUS factor .)
    AND             reduce using rule 100 (factor -> PLUS factor .)
    OR              reduce using rule 100 (factor -> PLUS factor .)
    IF              reduce using rule 100 (factor -> PLUS factor .)
    COMMA           reduce using rule 100 (factor -> PLUS factor .)
    NEWLINE         reduce using rule 100 (factor -> PLUS factor .)
    SEMICOLON       reduce using rule 100 (factor -> PLUS factor .)
    ENDMARKER       reduce using rule 100 (factor -> PLUS factor .)
    DEF             reduce using rule 100 (factor -> PLUS factor .)
    CLASS           reduce using rule 100 (factor -> PLUS factor .)
    FOR             reduce using rule 100 (factor -> PLUS factor .)
    WHILE           reduce using rule 100 (factor -> PLUS factor .)
    PASS            reduce using rule 100 (factor -> PLUS factor .)
    BREAK           reduce using rule 100 (factor -> PLUS factor .)
    CONTINUE        reduce using rule 100 (factor -> PLUS factor .)
    RETURN          reduce using rule 100 (factor -> PLUS factor .)
    DEL             reduce using rule 100 (factor -> PLUS factor .)
    GLOBAL          reduce using rule 100 (factor -> PLUS factor .)
    IDENTIFIER      reduce using rule 100 (factor -> PLUS factor .)
    L_SQB           reduce using rule 100 (factor -> PLUS factor .)
    L_PARENTHESIS   reduce using rule 100 (factor -> PLUS factor .)
    TRUE            reduce using rule 100 (factor -> PLUS factor .)
    FALSE           reduce using rule 100 (factor -> PLUS factor .)
    NONE            reduce using rule 100 (factor -> PLUS factor .)
    STRING          reduce using rule 100 (factor -> PLUS factor .)
    TRIPLE_STRING   reduce using rule 100 (factor -> PLUS factor .)
    NUMBER          reduce using rule 100 (factor -> PLUS factor .)
    F_NUMBER        reduce using rule 100 (factor -> PLUS factor .)
    BIN_NUMBER      reduce using rule 100 (factor -> PLUS factor .)
    HEX_NUMBER      reduce using rule 100 (factor -> PLUS factor .)
    OCT_NUMBER      reduce using rule 100 (factor -> PLUS factor .)
    L_CB            reduce using rule 100 (factor -> PLUS factor .)
    R_PARENTHESIS   reduce using rule 100 (factor -> PLUS factor .)
    COLON           reduce using rule 100 (factor -> PLUS factor .)
    ELIF            reduce using rule 100 (factor -> PLUS factor .)
    ELSE            reduce using rule 100 (factor -> PLUS factor .)
    DEDENT          reduce using rule 100 (factor -> PLUS factor .)
    R_SQB           reduce using rule 100 (factor -> PLUS factor .)
    R_CB            reduce using rule 100 (factor -> PLUS factor .)


state 137

    (95) term -> term STAR . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    factor                         shift and go to state 200
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 138

    (96) term -> term SLASH . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    factor                         shift and go to state 201
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 139

    (97) term -> term DOUBLE_SLASH . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    factor                         shift and go to state 202
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 140

    (98) term -> term PERCENT . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    factor                         shift and go to state 203
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 141

    (101) factor -> MINUS factor .

    STAR            reduce using rule 101 (factor -> MINUS factor .)
    SLASH           reduce using rule 101 (factor -> MINUS factor .)
    DOUBLE_SLASH    reduce using rule 101 (factor -> MINUS factor .)
    PERCENT         reduce using rule 101 (factor -> MINUS factor .)
    PLUS            reduce using rule 101 (factor -> MINUS factor .)
    MINUS           reduce using rule 101 (factor -> MINUS factor .)
    L_SHIFT         reduce using rule 101 (factor -> MINUS factor .)
    R_SHIFT         reduce using rule 101 (factor -> MINUS factor .)
    AMPERSAND       reduce using rule 101 (factor -> MINUS factor .)
    CARET           reduce using rule 101 (factor -> MINUS factor .)
    PIPE            reduce using rule 101 (factor -> MINUS factor .)
    EQUALITY        reduce using rule 101 (factor -> MINUS factor .)
    INEQUALITY      reduce using rule 101 (factor -> MINUS factor .)
    GREATER_EQUAL   reduce using rule 101 (factor -> MINUS factor .)
    LESSER_EQUAL    reduce using rule 101 (factor -> MINUS factor .)
    GREATER         reduce using rule 101 (factor -> MINUS factor .)
    LESSER          reduce using rule 101 (factor -> MINUS factor .)
    NOT             reduce using rule 101 (factor -> MINUS factor .)
    IS              reduce using rule 101 (factor -> MINUS factor .)
    IN              reduce using rule 101 (factor -> MINUS factor .)
    AND             reduce using rule 101 (factor -> MINUS factor .)
    OR              reduce using rule 101 (factor -> MINUS factor .)
    IF              reduce using rule 101 (factor -> MINUS factor .)
    COMMA           reduce using rule 101 (factor -> MINUS factor .)
    NEWLINE         reduce using rule 101 (factor -> MINUS factor .)
    SEMICOLON       reduce using rule 101 (factor -> MINUS factor .)
    ENDMARKER       reduce using rule 101 (factor -> MINUS factor .)
    DEF             reduce using rule 101 (factor -> MINUS factor .)
    CLASS           reduce using rule 101 (factor -> MINUS factor .)
    FOR             reduce using rule 101 (factor -> MINUS factor .)
    WHILE           reduce using rule 101 (factor -> MINUS factor .)
    PASS            reduce using rule 101 (factor -> MINUS factor .)
    BREAK           reduce using rule 101 (factor -> MINUS factor .)
    CONTINUE        reduce using rule 101 (factor -> MINUS factor .)
    RETURN          reduce using rule 101 (factor -> MINUS factor .)
    DEL             reduce using rule 101 (factor -> MINUS factor .)
    GLOBAL          reduce using rule 101 (factor -> MINUS factor .)
    IDENTIFIER      reduce using rule 101 (factor -> MINUS factor .)
    L_SQB           reduce using rule 101 (factor -> MINUS factor .)
    L_PARENTHESIS   reduce using rule 101 (factor -> MINUS factor .)
    TRUE            reduce using rule 101 (factor -> MINUS factor .)
    FALSE           reduce using rule 101 (factor -> MINUS factor .)
    NONE            reduce using rule 101 (factor -> MINUS factor .)
    STRING          reduce using rule 101 (factor -> MINUS factor .)
    TRIPLE_STRING   reduce using rule 101 (factor -> MINUS factor .)
    NUMBER          reduce using rule 101 (factor -> MINUS factor .)
    F_NUMBER        reduce using rule 101 (factor -> MINUS factor .)
    BIN_NUMBER      reduce using rule 101 (factor -> MINUS factor .)
    HEX_NUMBER      reduce using rule 101 (factor -> MINUS factor .)
    OCT_NUMBER      reduce using rule 101 (factor -> MINUS factor .)
    L_CB            reduce using rule 101 (factor -> MINUS factor .)
    R_PARENTHESIS   reduce using rule 101 (factor -> MINUS factor .)
    COLON           reduce using rule 101 (factor -> MINUS factor .)
    ELIF            reduce using rule 101 (factor -> MINUS factor .)
    ELSE            reduce using rule 101 (factor -> MINUS factor .)
    DEDENT          reduce using rule 101 (factor -> MINUS factor .)
    R_SQB           reduce using rule 101 (factor -> MINUS factor .)
    R_CB            reduce using rule 101 (factor -> MINUS factor .)


state 142

    (103) power -> primary DOUBLE_STAR . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    primary                        shift and go to state 52
    factor                         shift and go to state 204
    power                          shift and go to state 51
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 143

    (105) primary -> primary L_PARENTHESIS . arguments R_PARENTHESIS
    (107) primary -> primary L_PARENTHESIS . R_PARENTHESIS
    (135) arguments -> . expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_PARENTHESIS   shift and go to state 206
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    primary                        shift and go to state 52
    arguments                      shift and go to state 205
    expressions                    shift and go to state 174
    expression                     shift and go to state 17
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 144

    (108) primary -> primary L_SQB . slices R_SQB
    (111) slices -> . slices COMMA slice
    (112) slices -> . slice
    (113) slice -> . expression COLON expression COLON expression
    (114) slice -> . expression COLON expression
    (115) slice -> . expression COLON
    (116) slice -> . COLON expression
    (117) slice -> . COLON COLON
    (118) slice -> . COLON
    (119) slice -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    COLON           shift and go to state 171
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    primary                        shift and go to state 52
    slices                         shift and go to state 207
    slice                          shift and go to state 169
    expression                     shift and go to state 170
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 145

    (109) primary -> primary DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 208


state 146

    (144) dict -> L_CB kvpairs . R_CB

    R_CB            shift and go to state 209


state 147

    (145) dict -> L_CB R_CB .

    DOUBLE_STAR     reduce using rule 145 (dict -> L_CB R_CB .)
    L_PARENTHESIS   reduce using rule 145 (dict -> L_CB R_CB .)
    L_SQB           reduce using rule 145 (dict -> L_CB R_CB .)
    DOT             reduce using rule 145 (dict -> L_CB R_CB .)
    STAR            reduce using rule 145 (dict -> L_CB R_CB .)
    SLASH           reduce using rule 145 (dict -> L_CB R_CB .)
    DOUBLE_SLASH    reduce using rule 145 (dict -> L_CB R_CB .)
    PERCENT         reduce using rule 145 (dict -> L_CB R_CB .)
    PLUS            reduce using rule 145 (dict -> L_CB R_CB .)
    MINUS           reduce using rule 145 (dict -> L_CB R_CB .)
    L_SHIFT         reduce using rule 145 (dict -> L_CB R_CB .)
    R_SHIFT         reduce using rule 145 (dict -> L_CB R_CB .)
    AMPERSAND       reduce using rule 145 (dict -> L_CB R_CB .)
    CARET           reduce using rule 145 (dict -> L_CB R_CB .)
    PIPE            reduce using rule 145 (dict -> L_CB R_CB .)
    EQUALITY        reduce using rule 145 (dict -> L_CB R_CB .)
    INEQUALITY      reduce using rule 145 (dict -> L_CB R_CB .)
    GREATER_EQUAL   reduce using rule 145 (dict -> L_CB R_CB .)
    LESSER_EQUAL    reduce using rule 145 (dict -> L_CB R_CB .)
    GREATER         reduce using rule 145 (dict -> L_CB R_CB .)
    LESSER          reduce using rule 145 (dict -> L_CB R_CB .)
    NOT             reduce using rule 145 (dict -> L_CB R_CB .)
    IS              reduce using rule 145 (dict -> L_CB R_CB .)
    IN              reduce using rule 145 (dict -> L_CB R_CB .)
    AND             reduce using rule 145 (dict -> L_CB R_CB .)
    OR              reduce using rule 145 (dict -> L_CB R_CB .)
    IF              reduce using rule 145 (dict -> L_CB R_CB .)
    COMMA           reduce using rule 145 (dict -> L_CB R_CB .)
    NEWLINE         reduce using rule 145 (dict -> L_CB R_CB .)
    SEMICOLON       reduce using rule 145 (dict -> L_CB R_CB .)
    ENDMARKER       reduce using rule 145 (dict -> L_CB R_CB .)
    DEF             reduce using rule 145 (dict -> L_CB R_CB .)
    CLASS           reduce using rule 145 (dict -> L_CB R_CB .)
    FOR             reduce using rule 145 (dict -> L_CB R_CB .)
    WHILE           reduce using rule 145 (dict -> L_CB R_CB .)
    PASS            reduce using rule 145 (dict -> L_CB R_CB .)
    BREAK           reduce using rule 145 (dict -> L_CB R_CB .)
    CONTINUE        reduce using rule 145 (dict -> L_CB R_CB .)
    RETURN          reduce using rule 145 (dict -> L_CB R_CB .)
    DEL             reduce using rule 145 (dict -> L_CB R_CB .)
    GLOBAL          reduce using rule 145 (dict -> L_CB R_CB .)
    IDENTIFIER      reduce using rule 145 (dict -> L_CB R_CB .)
    TRUE            reduce using rule 145 (dict -> L_CB R_CB .)
    FALSE           reduce using rule 145 (dict -> L_CB R_CB .)
    NONE            reduce using rule 145 (dict -> L_CB R_CB .)
    STRING          reduce using rule 145 (dict -> L_CB R_CB .)
    TRIPLE_STRING   reduce using rule 145 (dict -> L_CB R_CB .)
    NUMBER          reduce using rule 145 (dict -> L_CB R_CB .)
    F_NUMBER        reduce using rule 145 (dict -> L_CB R_CB .)
    BIN_NUMBER      reduce using rule 145 (dict -> L_CB R_CB .)
    HEX_NUMBER      reduce using rule 145 (dict -> L_CB R_CB .)
    OCT_NUMBER      reduce using rule 145 (dict -> L_CB R_CB .)
    L_CB            reduce using rule 145 (dict -> L_CB R_CB .)
    R_PARENTHESIS   reduce using rule 145 (dict -> L_CB R_CB .)
    COLON           reduce using rule 145 (dict -> L_CB R_CB .)
    ELIF            reduce using rule 145 (dict -> L_CB R_CB .)
    ELSE            reduce using rule 145 (dict -> L_CB R_CB .)
    DEDENT          reduce using rule 145 (dict -> L_CB R_CB .)
    R_SQB           reduce using rule 145 (dict -> L_CB R_CB .)
    R_CB            reduce using rule 145 (dict -> L_CB R_CB .)


state 148

    (143) set -> L_CB expressions . R_CB
    (59) expressions -> expressions . COMMA expression

    R_CB            shift and go to state 210
    COMMA           shift and go to state 100


state 149

    (146) kvpairs -> kvpair . COMMA kvpairs
    (147) kvpairs -> kvpair . COMMA
    (148) kvpairs -> kvpair .

    COMMA           shift and go to state 211
    R_CB            reduce using rule 148 (kvpairs -> kvpair .)


state 150

    (60) expressions -> expression .
    (149) kvpair -> expression . COLON expression

    R_CB            reduce using rule 60 (expressions -> expression .)
    COMMA           reduce using rule 60 (expressions -> expression .)
    COLON           shift and go to state 212


state 151

    (8) simple_stmts -> simple_stmts SEMICOLON simple_stmt . NEWLINE

    NEWLINE         shift and go to state 213


state 152

    (44) function_def -> DEF IDENTIFIER L_PARENTHESIS . parameters R_PARENTHESIS COLON block
    (45) function_def -> DEF IDENTIFIER L_PARENTHESIS . R_PARENTHESIS COLON block
    (46) parameters -> . parameters COMMA IDENTIFIER
    (47) parameters -> . IDENTIFIER

    R_PARENTHESIS   shift and go to state 216
    IDENTIFIER      shift and go to state 214

    parameters                     shift and go to state 215

state 153

    (162) target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .

    ASSIGNMENT      reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    COMMA           reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    ADDITION_ASSIGNMENT reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    SUBTRACTION_ASSIGNMENT reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    MULTIPLICATION_ASSIGNMENT reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    DIVISION_ASSIGNMENT reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    MODULO_ASSIGNMENT reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    EXPONENTIATION_ASSIGNMENT reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    FLOOR_DIVISION_ASSIGNMENT reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    DOT             reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    L_SQB           reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    IN              reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)
    R_SQB           reduce using rule 162 (target_atomic -> L_PARENTHESIS targets R_PARENTHESIS .)


state 154

    (106) primary -> L_PARENTHESIS expression R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    L_SQB           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    DOT             reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    STAR            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    SLASH           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    PERCENT         reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    PLUS            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    MINUS           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    L_SHIFT         reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    R_SHIFT         reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    AMPERSAND       reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    CARET           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    PIPE            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    EQUALITY        reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    INEQUALITY      reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    GREATER         reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    LESSER          reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    NOT             reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    IS              reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    IN              reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    AND             reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    OR              reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    IF              reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    COMMA           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    NEWLINE         reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    SEMICOLON       reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    ENDMARKER       reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    DEF             reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    CLASS           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    FOR             reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    WHILE           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    PASS            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    BREAK           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    CONTINUE        reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    RETURN          reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    DEL             reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    GLOBAL          reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    IDENTIFIER      reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    TRUE            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    FALSE           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    NONE            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    STRING          reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    TRIPLE_STRING   reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    NUMBER          reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    F_NUMBER        reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    BIN_NUMBER      reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    HEX_NUMBER      reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    OCT_NUMBER      reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    L_CB            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    COLON           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    ELIF            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    ELSE            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    DEDENT          reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    R_SQB           reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)
    R_CB            reduce using rule 106 (primary -> L_PARENTHESIS expression R_PARENTHESIS .)


state 155

    (140) tuple -> L_PARENTHESIS expression COMMA . expressions R_PARENTHESIS
    (141) tuple -> L_PARENTHESIS expression COMMA . R_PARENTHESIS
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_PARENTHESIS   shift and go to state 218
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 17
    expressions                    shift and go to state 217
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 156

    (48) if_stmt -> IF expression COLON . block elif_stmt
    (49) if_stmt -> IF expression COLON . block else_block
    (50) if_stmt -> IF expression COLON . block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    expression                     shift and go to state 17
    block                          shift and go to state 219
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 157

    (41) class_def -> CLASS IDENTIFIER L_PARENTHESIS . arguments R_PARENTHESIS COLON block
    (42) class_def -> CLASS IDENTIFIER L_PARENTHESIS . R_PARENTHESIS COLON block
    (135) arguments -> . expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_PARENTHESIS   shift and go to state 223
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    arguments                      shift and go to state 222
    expressions                    shift and go to state 174
    expression                     shift and go to state 17
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 158

    (43) class_def -> CLASS IDENTIFIER COLON . block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    block                          shift and go to state 224
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    expression                     shift and go to state 17
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 159

    (57) for_stmt -> FOR targets IN . expressions COLON else_block
    (58) for_stmt -> FOR targets IN . expressions COLON block
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expressions                    shift and go to state 225
    expression                     shift and go to state 17
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 160

    (24) assignment -> targets augmentation_assignment expressions .
    (59) expressions -> expressions . COMMA expression

    NEWLINE         reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    SEMICOLON       reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    ENDMARKER       reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    DEF             reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    IF              reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    CLASS           reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    FOR             reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    WHILE           reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    PASS            reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    BREAK           reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    CONTINUE        reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    RETURN          reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    DEL             reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    GLOBAL          reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    IDENTIFIER      reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    L_SQB           reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    L_PARENTHESIS   reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    NOT             reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    PLUS            reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    MINUS           reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    TRUE            reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    FALSE           reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    NONE            reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    STRING          reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    TRIPLE_STRING   reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    NUMBER          reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    F_NUMBER        reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    BIN_NUMBER      reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    HEX_NUMBER      reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    OCT_NUMBER      reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    L_CB            reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    ELIF            reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    ELSE            reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    DEDENT          reduce using rule 24 (assignment -> targets augmentation_assignment expressions .)
    COMMA           shift and go to state 100


state 161

    (25) assignment -> targets ASSIGNMENT assignment .

    NEWLINE         reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    SEMICOLON       reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    ENDMARKER       reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    DEF             reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    IF              reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    CLASS           reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    FOR             reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    WHILE           reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    PASS            reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    BREAK           reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    CONTINUE        reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    RETURN          reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    DEL             reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    GLOBAL          reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    IDENTIFIER      reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    L_SQB           reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    L_PARENTHESIS   reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    NOT             reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    PLUS            reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    MINUS           reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    TRUE            reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    FALSE           reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    NONE            reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    STRING          reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    TRIPLE_STRING   reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    NUMBER          reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    F_NUMBER        reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    BIN_NUMBER      reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    HEX_NUMBER      reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    OCT_NUMBER      reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    L_CB            reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    ELIF            reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    ELSE            reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)
    DEDENT          reduce using rule 25 (assignment -> targets ASSIGNMENT assignment .)


state 162

    (150) targets -> targets COMMA target .

    ASSIGNMENT      reduce using rule 150 (targets -> targets COMMA target .)
    COMMA           reduce using rule 150 (targets -> targets COMMA target .)
    ADDITION_ASSIGNMENT reduce using rule 150 (targets -> targets COMMA target .)
    SUBTRACTION_ASSIGNMENT reduce using rule 150 (targets -> targets COMMA target .)
    MULTIPLICATION_ASSIGNMENT reduce using rule 150 (targets -> targets COMMA target .)
    DIVISION_ASSIGNMENT reduce using rule 150 (targets -> targets COMMA target .)
    MODULO_ASSIGNMENT reduce using rule 150 (targets -> targets COMMA target .)
    EXPONENTIATION_ASSIGNMENT reduce using rule 150 (targets -> targets COMMA target .)
    FLOOR_DIVISION_ASSIGNMENT reduce using rule 150 (targets -> targets COMMA target .)
    R_PARENTHESIS   reduce using rule 150 (targets -> targets COMMA target .)
    IN              reduce using rule 150 (targets -> targets COMMA target .)


state 163

    (59) expressions -> expressions COMMA expression .

    COMMA           reduce using rule 59 (expressions -> expressions COMMA expression .)
    NEWLINE         reduce using rule 59 (expressions -> expressions COMMA expression .)
    SEMICOLON       reduce using rule 59 (expressions -> expressions COMMA expression .)
    ENDMARKER       reduce using rule 59 (expressions -> expressions COMMA expression .)
    DEF             reduce using rule 59 (expressions -> expressions COMMA expression .)
    IF              reduce using rule 59 (expressions -> expressions COMMA expression .)
    CLASS           reduce using rule 59 (expressions -> expressions COMMA expression .)
    FOR             reduce using rule 59 (expressions -> expressions COMMA expression .)
    WHILE           reduce using rule 59 (expressions -> expressions COMMA expression .)
    PASS            reduce using rule 59 (expressions -> expressions COMMA expression .)
    BREAK           reduce using rule 59 (expressions -> expressions COMMA expression .)
    CONTINUE        reduce using rule 59 (expressions -> expressions COMMA expression .)
    RETURN          reduce using rule 59 (expressions -> expressions COMMA expression .)
    DEL             reduce using rule 59 (expressions -> expressions COMMA expression .)
    GLOBAL          reduce using rule 59 (expressions -> expressions COMMA expression .)
    IDENTIFIER      reduce using rule 59 (expressions -> expressions COMMA expression .)
    L_SQB           reduce using rule 59 (expressions -> expressions COMMA expression .)
    L_PARENTHESIS   reduce using rule 59 (expressions -> expressions COMMA expression .)
    NOT             reduce using rule 59 (expressions -> expressions COMMA expression .)
    PLUS            reduce using rule 59 (expressions -> expressions COMMA expression .)
    MINUS           reduce using rule 59 (expressions -> expressions COMMA expression .)
    TRUE            reduce using rule 59 (expressions -> expressions COMMA expression .)
    FALSE           reduce using rule 59 (expressions -> expressions COMMA expression .)
    NONE            reduce using rule 59 (expressions -> expressions COMMA expression .)
    STRING          reduce using rule 59 (expressions -> expressions COMMA expression .)
    TRIPLE_STRING   reduce using rule 59 (expressions -> expressions COMMA expression .)
    NUMBER          reduce using rule 59 (expressions -> expressions COMMA expression .)
    F_NUMBER        reduce using rule 59 (expressions -> expressions COMMA expression .)
    BIN_NUMBER      reduce using rule 59 (expressions -> expressions COMMA expression .)
    HEX_NUMBER      reduce using rule 59 (expressions -> expressions COMMA expression .)
    OCT_NUMBER      reduce using rule 59 (expressions -> expressions COMMA expression .)
    L_CB            reduce using rule 59 (expressions -> expressions COMMA expression .)
    ELIF            reduce using rule 59 (expressions -> expressions COMMA expression .)
    ELSE            reduce using rule 59 (expressions -> expressions COMMA expression .)
    DEDENT          reduce using rule 59 (expressions -> expressions COMMA expression .)
    R_SQB           reduce using rule 59 (expressions -> expressions COMMA expression .)
    R_CB            reduce using rule 59 (expressions -> expressions COMMA expression .)
    R_PARENTHESIS   reduce using rule 59 (expressions -> expressions COMMA expression .)
    COLON           reduce using rule 59 (expressions -> expressions COMMA expression .)


state 164

    (55) while_stmt -> WHILE expression COLON . block else_block
    (56) while_stmt -> WHILE expression COLON . block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    expression                     shift and go to state 17
    block                          shift and go to state 226
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 165

    (26) assignment -> target ASSIGNMENT expressions .
    (59) expressions -> expressions . COMMA expression

    NEWLINE         reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    SEMICOLON       reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    ENDMARKER       reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    DEF             reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    IF              reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    CLASS           reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    FOR             reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    WHILE           reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    PASS            reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    BREAK           reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    CONTINUE        reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    RETURN          reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    DEL             reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    GLOBAL          reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    IDENTIFIER      reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    L_SQB           reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    L_PARENTHESIS   reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    NOT             reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    PLUS            reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    MINUS           reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    TRUE            reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    FALSE           reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    NONE            reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    STRING          reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    TRIPLE_STRING   reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    NUMBER          reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    F_NUMBER        reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    BIN_NUMBER      reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    HEX_NUMBER      reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    OCT_NUMBER      reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    L_CB            reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    ELIF            reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    ELSE            reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    DEDENT          reduce using rule 26 (assignment -> target ASSIGNMENT expressions .)
    COMMA           shift and go to state 100


state 166

    (37) namelist -> namelist COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 227


state 167

    (152) target -> target_primary DOT IDENTIFIER .
    (155) target_primary -> target_primary DOT IDENTIFIER .

    ASSIGNMENT      reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    COMMA           reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    ADDITION_ASSIGNMENT reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    SUBTRACTION_ASSIGNMENT reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    MULTIPLICATION_ASSIGNMENT reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    DIVISION_ASSIGNMENT reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    MODULO_ASSIGNMENT reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    EXPONENTIATION_ASSIGNMENT reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    FLOOR_DIVISION_ASSIGNMENT reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    R_PARENTHESIS   reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    IN              reduce using rule 152 (target -> target_primary DOT IDENTIFIER .)
    DOT             reduce using rule 155 (target_primary -> target_primary DOT IDENTIFIER .)
    L_SQB           reduce using rule 155 (target_primary -> target_primary DOT IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 155 (target_primary -> target_primary DOT IDENTIFIER .)


state 168

    (153) target -> target_primary L_SQB slices . R_SQB
    (156) target_primary -> target_primary L_SQB slices . R_SQB
    (111) slices -> slices . COMMA slice

    R_SQB           shift and go to state 228
    COMMA           shift and go to state 229


state 169

    (112) slices -> slice .

    R_SQB           reduce using rule 112 (slices -> slice .)
    COMMA           reduce using rule 112 (slices -> slice .)


state 170

    (113) slice -> expression . COLON expression COLON expression
    (114) slice -> expression . COLON expression
    (115) slice -> expression . COLON
    (119) slice -> expression .

    COLON           shift and go to state 230
    R_SQB           reduce using rule 119 (slice -> expression .)
    COMMA           reduce using rule 119 (slice -> expression .)


state 171

    (116) slice -> COLON . expression
    (117) slice -> COLON . COLON
    (118) slice -> COLON .
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    COLON           shift and go to state 231
    R_SQB           reduce using rule 118 (slice -> COLON .)
    COMMA           reduce using rule 118 (slice -> COLON .)
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 232
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 172

    (157) target_primary -> target_primary L_PARENTHESIS R_PARENTHESIS .

    DOT             reduce using rule 157 (target_primary -> target_primary L_PARENTHESIS R_PARENTHESIS .)
    L_SQB           reduce using rule 157 (target_primary -> target_primary L_PARENTHESIS R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 157 (target_primary -> target_primary L_PARENTHESIS R_PARENTHESIS .)
    R_SQB           reduce using rule 157 (target_primary -> target_primary L_PARENTHESIS R_PARENTHESIS .)


state 173

    (158) target_primary -> target_primary L_PARENTHESIS arguments . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 233


state 174

    (135) arguments -> expressions .
    (59) expressions -> expressions . COMMA expression

    R_PARENTHESIS   reduce using rule 135 (arguments -> expressions .)
    COMMA           shift and go to state 100


state 175

    (156) target_primary -> target_primary L_SQB . slices R_SQB
    (111) slices -> . slices COMMA slice
    (112) slices -> . slice
    (113) slice -> . expression COLON expression COLON expression
    (114) slice -> . expression COLON expression
    (115) slice -> . expression COLON
    (116) slice -> . COLON expression
    (117) slice -> . COLON COLON
    (118) slice -> . COLON
    (119) slice -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    COLON           shift and go to state 171
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    slices                         shift and go to state 234
    slice                          shift and go to state 169
    expression                     shift and go to state 170
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 176

    (161) target_atomic -> L_SQB target_primary R_SQB .

    ASSIGNMENT      reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    COMMA           reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    ADDITION_ASSIGNMENT reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    SUBTRACTION_ASSIGNMENT reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    MULTIPLICATION_ASSIGNMENT reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    DIVISION_ASSIGNMENT reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    MODULO_ASSIGNMENT reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    EXPONENTIATION_ASSIGNMENT reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    FLOOR_DIVISION_ASSIGNMENT reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    DOT             reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    L_SQB           reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    L_PARENTHESIS   reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    R_PARENTHESIS   reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    IN              reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)
    R_SQB           reduce using rule 161 (target_atomic -> L_SQB target_primary R_SQB .)


state 177

    (155) target_primary -> target_primary DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 235


state 178

    (138) list -> L_SQB expressions R_SQB .

    DOUBLE_STAR     reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    L_PARENTHESIS   reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    L_SQB           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    DOT             reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    STAR            reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    SLASH           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    DOUBLE_SLASH    reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    PERCENT         reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    PLUS            reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    MINUS           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    L_SHIFT         reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    R_SHIFT         reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    AMPERSAND       reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    CARET           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    PIPE            reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    EQUALITY        reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    INEQUALITY      reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    GREATER_EQUAL   reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    LESSER_EQUAL    reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    GREATER         reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    LESSER          reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    NOT             reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    IS              reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    IN              reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    AND             reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    OR              reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    IF              reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    COMMA           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    NEWLINE         reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    SEMICOLON       reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    ENDMARKER       reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    DEF             reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    CLASS           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    FOR             reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    WHILE           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    PASS            reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    BREAK           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    CONTINUE        reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    RETURN          reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    DEL             reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    GLOBAL          reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    IDENTIFIER      reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    TRUE            reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    FALSE           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    NONE            reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    STRING          reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    TRIPLE_STRING   reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    NUMBER          reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    F_NUMBER        reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    BIN_NUMBER      reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    HEX_NUMBER      reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    OCT_NUMBER      reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    L_CB            reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    R_PARENTHESIS   reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    COLON           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    ELIF            reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    ELSE            reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    DEDENT          reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    R_SQB           reduce using rule 138 (list -> L_SQB expressions R_SQB .)
    R_CB            reduce using rule 138 (list -> L_SQB expressions R_SQB .)


state 179

    (61) expression -> disjunction IF disjunction . ELSE expression

    ELSE            shift and go to state 236


state 180

    (63) disjunction -> conjunction OR disjunction .

    IF              reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    COMMA           reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    NEWLINE         reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    SEMICOLON       reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    ENDMARKER       reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    DEF             reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    CLASS           reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    FOR             reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    WHILE           reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    PASS            reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    BREAK           reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    CONTINUE        reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    RETURN          reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    DEL             reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    GLOBAL          reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    IDENTIFIER      reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    L_SQB           reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    L_PARENTHESIS   reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    NOT             reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    PLUS            reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    MINUS           reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    TRUE            reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    FALSE           reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    NONE            reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    STRING          reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    TRIPLE_STRING   reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    NUMBER          reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    F_NUMBER        reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    BIN_NUMBER      reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    HEX_NUMBER      reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    OCT_NUMBER      reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    L_CB            reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    R_PARENTHESIS   reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    COLON           reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    ELIF            reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    ELSE            reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    DEDENT          reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    R_SQB           reduce using rule 63 (disjunction -> conjunction OR disjunction .)
    R_CB            reduce using rule 63 (disjunction -> conjunction OR disjunction .)


state 181

    (65) conjunction -> inversion AND inversion .

    OR              reduce using rule 65 (conjunction -> inversion AND inversion .)
    IF              reduce using rule 65 (conjunction -> inversion AND inversion .)
    COMMA           reduce using rule 65 (conjunction -> inversion AND inversion .)
    NEWLINE         reduce using rule 65 (conjunction -> inversion AND inversion .)
    SEMICOLON       reduce using rule 65 (conjunction -> inversion AND inversion .)
    ENDMARKER       reduce using rule 65 (conjunction -> inversion AND inversion .)
    DEF             reduce using rule 65 (conjunction -> inversion AND inversion .)
    CLASS           reduce using rule 65 (conjunction -> inversion AND inversion .)
    FOR             reduce using rule 65 (conjunction -> inversion AND inversion .)
    WHILE           reduce using rule 65 (conjunction -> inversion AND inversion .)
    PASS            reduce using rule 65 (conjunction -> inversion AND inversion .)
    BREAK           reduce using rule 65 (conjunction -> inversion AND inversion .)
    CONTINUE        reduce using rule 65 (conjunction -> inversion AND inversion .)
    RETURN          reduce using rule 65 (conjunction -> inversion AND inversion .)
    DEL             reduce using rule 65 (conjunction -> inversion AND inversion .)
    GLOBAL          reduce using rule 65 (conjunction -> inversion AND inversion .)
    IDENTIFIER      reduce using rule 65 (conjunction -> inversion AND inversion .)
    L_SQB           reduce using rule 65 (conjunction -> inversion AND inversion .)
    L_PARENTHESIS   reduce using rule 65 (conjunction -> inversion AND inversion .)
    NOT             reduce using rule 65 (conjunction -> inversion AND inversion .)
    PLUS            reduce using rule 65 (conjunction -> inversion AND inversion .)
    MINUS           reduce using rule 65 (conjunction -> inversion AND inversion .)
    TRUE            reduce using rule 65 (conjunction -> inversion AND inversion .)
    FALSE           reduce using rule 65 (conjunction -> inversion AND inversion .)
    NONE            reduce using rule 65 (conjunction -> inversion AND inversion .)
    STRING          reduce using rule 65 (conjunction -> inversion AND inversion .)
    TRIPLE_STRING   reduce using rule 65 (conjunction -> inversion AND inversion .)
    NUMBER          reduce using rule 65 (conjunction -> inversion AND inversion .)
    F_NUMBER        reduce using rule 65 (conjunction -> inversion AND inversion .)
    BIN_NUMBER      reduce using rule 65 (conjunction -> inversion AND inversion .)
    HEX_NUMBER      reduce using rule 65 (conjunction -> inversion AND inversion .)
    OCT_NUMBER      reduce using rule 65 (conjunction -> inversion AND inversion .)
    L_CB            reduce using rule 65 (conjunction -> inversion AND inversion .)
    R_PARENTHESIS   reduce using rule 65 (conjunction -> inversion AND inversion .)
    COLON           reduce using rule 65 (conjunction -> inversion AND inversion .)
    ELIF            reduce using rule 65 (conjunction -> inversion AND inversion .)
    ELSE            reduce using rule 65 (conjunction -> inversion AND inversion .)
    DEDENT          reduce using rule 65 (conjunction -> inversion AND inversion .)
    R_SQB           reduce using rule 65 (conjunction -> inversion AND inversion .)
    R_CB            reduce using rule 65 (conjunction -> inversion AND inversion .)


state 182

    (71) compare_op_list -> compare_op_list compare_op .

    EQUALITY        reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    INEQUALITY      reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    GREATER_EQUAL   reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    LESSER_EQUAL    reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    GREATER         reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    LESSER          reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    NOT             reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    IS              reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    IN              reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    AND             reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    OR              reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    IF              reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    COMMA           reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    NEWLINE         reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    SEMICOLON       reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    ENDMARKER       reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    DEF             reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    CLASS           reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    FOR             reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    WHILE           reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    PASS            reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    BREAK           reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    CONTINUE        reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    RETURN          reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    DEL             reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    GLOBAL          reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    IDENTIFIER      reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    L_SQB           reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    L_PARENTHESIS   reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    PLUS            reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    MINUS           reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    TRUE            reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    FALSE           reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    NONE            reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    STRING          reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    TRIPLE_STRING   reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    NUMBER          reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    F_NUMBER        reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    BIN_NUMBER      reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    HEX_NUMBER      reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    OCT_NUMBER      reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    L_CB            reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    R_PARENTHESIS   reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    COLON           reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    ELIF            reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    ELSE            reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    DEDENT          reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    R_SQB           reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)
    R_CB            reduce using rule 71 (compare_op_list -> compare_op_list compare_op .)


state 183

    (83) bitwise_or -> bitwise_or PIPE bitwise_xor .
    (85) bitwise_xor -> bitwise_xor . CARET bitwise_and

    PIPE            reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    EQUALITY        reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    INEQUALITY      reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    GREATER_EQUAL   reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    LESSER_EQUAL    reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    GREATER         reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    LESSER          reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    NOT             reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    IS              reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    IN              reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    AND             reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    OR              reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    IF              reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    COMMA           reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    NEWLINE         reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    SEMICOLON       reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    ENDMARKER       reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    DEF             reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    CLASS           reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    FOR             reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    WHILE           reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    PASS            reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    BREAK           reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    CONTINUE        reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    RETURN          reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    DEL             reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    GLOBAL          reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    IDENTIFIER      reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    L_SQB           reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    L_PARENTHESIS   reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    PLUS            reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    MINUS           reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    TRUE            reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    FALSE           reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    NONE            reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    STRING          reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    TRIPLE_STRING   reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    NUMBER          reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    F_NUMBER        reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    BIN_NUMBER      reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    HEX_NUMBER      reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    OCT_NUMBER      reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    L_CB            reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    R_PARENTHESIS   reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    COLON           reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    ELIF            reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    ELSE            reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    DEDENT          reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    R_SQB           reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    R_CB            reduce using rule 83 (bitwise_or -> bitwise_or PIPE bitwise_xor .)
    CARET           shift and go to state 130


state 184

    (73) compare_op -> EQUALITY bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    INEQUALITY      reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    GREATER_EQUAL   reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    LESSER_EQUAL    reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    GREATER         reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    LESSER          reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    NOT             reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    IS              reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    IN              reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    AND             reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    OR              reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    IF              reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    COMMA           reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    NEWLINE         reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    SEMICOLON       reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    ENDMARKER       reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    DEF             reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    CLASS           reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    FOR             reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    WHILE           reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    PASS            reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    BREAK           reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    CONTINUE        reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    RETURN          reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    DEL             reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    GLOBAL          reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    IDENTIFIER      reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    L_SQB           reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    L_PARENTHESIS   reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    PLUS            reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    MINUS           reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    TRUE            reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    FALSE           reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    NONE            reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    STRING          reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    TRIPLE_STRING   reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    NUMBER          reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    F_NUMBER        reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    BIN_NUMBER      reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    HEX_NUMBER      reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    OCT_NUMBER      reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    L_CB            reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    R_PARENTHESIS   reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    COLON           reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    ELIF            reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    ELSE            reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    DEDENT          reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    R_SQB           reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    R_CB            reduce using rule 73 (compare_op -> EQUALITY bitwise_or .)
    PIPE            shift and go to state 119


state 185

    (74) compare_op -> INEQUALITY bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    INEQUALITY      reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    GREATER_EQUAL   reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    LESSER_EQUAL    reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    GREATER         reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    LESSER          reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    NOT             reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    IS              reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    IN              reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    AND             reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    OR              reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    IF              reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    COMMA           reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    NEWLINE         reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    SEMICOLON       reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    ENDMARKER       reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    DEF             reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    CLASS           reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    FOR             reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    WHILE           reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    PASS            reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    BREAK           reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    CONTINUE        reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    RETURN          reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    DEL             reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    GLOBAL          reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    IDENTIFIER      reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    L_SQB           reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    L_PARENTHESIS   reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    PLUS            reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    MINUS           reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    TRUE            reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    FALSE           reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    NONE            reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    STRING          reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    TRIPLE_STRING   reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    NUMBER          reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    F_NUMBER        reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    BIN_NUMBER      reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    HEX_NUMBER      reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    OCT_NUMBER      reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    L_CB            reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    R_PARENTHESIS   reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    COLON           reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    ELIF            reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    ELSE            reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    DEDENT          reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    R_SQB           reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    R_CB            reduce using rule 74 (compare_op -> INEQUALITY bitwise_or .)
    PIPE            shift and go to state 119


state 186

    (75) compare_op -> GREATER_EQUAL bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    INEQUALITY      reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    GREATER_EQUAL   reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    LESSER_EQUAL    reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    GREATER         reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    LESSER          reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    NOT             reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    IS              reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    IN              reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    AND             reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    OR              reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    IF              reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    COMMA           reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    NEWLINE         reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    SEMICOLON       reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    ENDMARKER       reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    DEF             reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    CLASS           reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    FOR             reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    WHILE           reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    PASS            reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    BREAK           reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    CONTINUE        reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    RETURN          reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    DEL             reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    GLOBAL          reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    IDENTIFIER      reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    L_SQB           reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    L_PARENTHESIS   reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    PLUS            reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    MINUS           reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    TRUE            reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    FALSE           reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    NONE            reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    STRING          reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    TRIPLE_STRING   reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    NUMBER          reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    F_NUMBER        reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    BIN_NUMBER      reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    HEX_NUMBER      reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    OCT_NUMBER      reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    L_CB            reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    R_PARENTHESIS   reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    COLON           reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    ELIF            reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    ELSE            reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    DEDENT          reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    R_SQB           reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    R_CB            reduce using rule 75 (compare_op -> GREATER_EQUAL bitwise_or .)
    PIPE            shift and go to state 119


state 187

    (76) compare_op -> LESSER_EQUAL bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    INEQUALITY      reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    GREATER_EQUAL   reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    LESSER_EQUAL    reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    GREATER         reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    LESSER          reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    NOT             reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    IS              reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    IN              reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    AND             reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    OR              reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    IF              reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    COMMA           reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    NEWLINE         reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    SEMICOLON       reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    ENDMARKER       reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    DEF             reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    CLASS           reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    FOR             reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    WHILE           reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    PASS            reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    BREAK           reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    CONTINUE        reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    RETURN          reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    DEL             reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    GLOBAL          reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    IDENTIFIER      reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    L_SQB           reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    L_PARENTHESIS   reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    PLUS            reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    MINUS           reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    TRUE            reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    FALSE           reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    NONE            reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    STRING          reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    TRIPLE_STRING   reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    NUMBER          reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    F_NUMBER        reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    BIN_NUMBER      reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    HEX_NUMBER      reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    OCT_NUMBER      reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    L_CB            reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    R_PARENTHESIS   reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    COLON           reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    ELIF            reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    ELSE            reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    DEDENT          reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    R_SQB           reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    R_CB            reduce using rule 76 (compare_op -> LESSER_EQUAL bitwise_or .)
    PIPE            shift and go to state 119


state 188

    (77) compare_op -> GREATER bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    INEQUALITY      reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    GREATER_EQUAL   reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    LESSER_EQUAL    reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    GREATER         reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    LESSER          reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    NOT             reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    IS              reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    IN              reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    AND             reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    OR              reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    IF              reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    COMMA           reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    NEWLINE         reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    SEMICOLON       reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    ENDMARKER       reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    DEF             reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    CLASS           reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    FOR             reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    WHILE           reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    PASS            reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    BREAK           reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    CONTINUE        reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    RETURN          reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    DEL             reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    GLOBAL          reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    IDENTIFIER      reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    L_SQB           reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    L_PARENTHESIS   reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    PLUS            reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    MINUS           reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    TRUE            reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    FALSE           reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    NONE            reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    STRING          reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    TRIPLE_STRING   reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    NUMBER          reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    F_NUMBER        reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    BIN_NUMBER      reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    HEX_NUMBER      reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    OCT_NUMBER      reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    L_CB            reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    R_PARENTHESIS   reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    COLON           reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    ELIF            reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    ELSE            reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    DEDENT          reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    R_SQB           reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    R_CB            reduce using rule 77 (compare_op -> GREATER bitwise_or .)
    PIPE            shift and go to state 119


state 189

    (78) compare_op -> LESSER bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    INEQUALITY      reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    GREATER_EQUAL   reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    LESSER_EQUAL    reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    GREATER         reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    LESSER          reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    NOT             reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    IS              reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    IN              reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    AND             reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    OR              reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    IF              reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    COMMA           reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    NEWLINE         reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    SEMICOLON       reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    ENDMARKER       reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    DEF             reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    CLASS           reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    FOR             reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    WHILE           reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    PASS            reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    BREAK           reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    CONTINUE        reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    RETURN          reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    DEL             reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    GLOBAL          reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    IDENTIFIER      reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    L_SQB           reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    L_PARENTHESIS   reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    PLUS            reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    MINUS           reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    TRUE            reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    FALSE           reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    NONE            reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    STRING          reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    TRIPLE_STRING   reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    NUMBER          reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    F_NUMBER        reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    BIN_NUMBER      reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    HEX_NUMBER      reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    OCT_NUMBER      reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    L_CB            reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    R_PARENTHESIS   reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    COLON           reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    ELIF            reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    ELSE            reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    DEDENT          reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    R_SQB           reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    R_CB            reduce using rule 78 (compare_op -> LESSER bitwise_or .)
    PIPE            shift and go to state 119


state 190

    (79) compare_op -> NOT IN . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 237
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 191

    (81) compare_op -> IN bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 81 (compare_op -> IN bitwise_or .)
    INEQUALITY      reduce using rule 81 (compare_op -> IN bitwise_or .)
    GREATER_EQUAL   reduce using rule 81 (compare_op -> IN bitwise_or .)
    LESSER_EQUAL    reduce using rule 81 (compare_op -> IN bitwise_or .)
    GREATER         reduce using rule 81 (compare_op -> IN bitwise_or .)
    LESSER          reduce using rule 81 (compare_op -> IN bitwise_or .)
    NOT             reduce using rule 81 (compare_op -> IN bitwise_or .)
    IS              reduce using rule 81 (compare_op -> IN bitwise_or .)
    IN              reduce using rule 81 (compare_op -> IN bitwise_or .)
    AND             reduce using rule 81 (compare_op -> IN bitwise_or .)
    OR              reduce using rule 81 (compare_op -> IN bitwise_or .)
    IF              reduce using rule 81 (compare_op -> IN bitwise_or .)
    COMMA           reduce using rule 81 (compare_op -> IN bitwise_or .)
    NEWLINE         reduce using rule 81 (compare_op -> IN bitwise_or .)
    SEMICOLON       reduce using rule 81 (compare_op -> IN bitwise_or .)
    ENDMARKER       reduce using rule 81 (compare_op -> IN bitwise_or .)
    DEF             reduce using rule 81 (compare_op -> IN bitwise_or .)
    CLASS           reduce using rule 81 (compare_op -> IN bitwise_or .)
    FOR             reduce using rule 81 (compare_op -> IN bitwise_or .)
    WHILE           reduce using rule 81 (compare_op -> IN bitwise_or .)
    PASS            reduce using rule 81 (compare_op -> IN bitwise_or .)
    BREAK           reduce using rule 81 (compare_op -> IN bitwise_or .)
    CONTINUE        reduce using rule 81 (compare_op -> IN bitwise_or .)
    RETURN          reduce using rule 81 (compare_op -> IN bitwise_or .)
    DEL             reduce using rule 81 (compare_op -> IN bitwise_or .)
    GLOBAL          reduce using rule 81 (compare_op -> IN bitwise_or .)
    IDENTIFIER      reduce using rule 81 (compare_op -> IN bitwise_or .)
    L_SQB           reduce using rule 81 (compare_op -> IN bitwise_or .)
    L_PARENTHESIS   reduce using rule 81 (compare_op -> IN bitwise_or .)
    PLUS            reduce using rule 81 (compare_op -> IN bitwise_or .)
    MINUS           reduce using rule 81 (compare_op -> IN bitwise_or .)
    TRUE            reduce using rule 81 (compare_op -> IN bitwise_or .)
    FALSE           reduce using rule 81 (compare_op -> IN bitwise_or .)
    NONE            reduce using rule 81 (compare_op -> IN bitwise_or .)
    STRING          reduce using rule 81 (compare_op -> IN bitwise_or .)
    TRIPLE_STRING   reduce using rule 81 (compare_op -> IN bitwise_or .)
    NUMBER          reduce using rule 81 (compare_op -> IN bitwise_or .)
    F_NUMBER        reduce using rule 81 (compare_op -> IN bitwise_or .)
    BIN_NUMBER      reduce using rule 81 (compare_op -> IN bitwise_or .)
    HEX_NUMBER      reduce using rule 81 (compare_op -> IN bitwise_or .)
    OCT_NUMBER      reduce using rule 81 (compare_op -> IN bitwise_or .)
    L_CB            reduce using rule 81 (compare_op -> IN bitwise_or .)
    R_PARENTHESIS   reduce using rule 81 (compare_op -> IN bitwise_or .)
    COLON           reduce using rule 81 (compare_op -> IN bitwise_or .)
    ELIF            reduce using rule 81 (compare_op -> IN bitwise_or .)
    ELSE            reduce using rule 81 (compare_op -> IN bitwise_or .)
    DEDENT          reduce using rule 81 (compare_op -> IN bitwise_or .)
    R_SQB           reduce using rule 81 (compare_op -> IN bitwise_or .)
    R_CB            reduce using rule 81 (compare_op -> IN bitwise_or .)
    PIPE            shift and go to state 119


state 192

    (80) compare_op -> IS NOT . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    bitwise_or                     shift and go to state 238
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 193

    (82) compare_op -> IS bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 82 (compare_op -> IS bitwise_or .)
    INEQUALITY      reduce using rule 82 (compare_op -> IS bitwise_or .)
    GREATER_EQUAL   reduce using rule 82 (compare_op -> IS bitwise_or .)
    LESSER_EQUAL    reduce using rule 82 (compare_op -> IS bitwise_or .)
    GREATER         reduce using rule 82 (compare_op -> IS bitwise_or .)
    LESSER          reduce using rule 82 (compare_op -> IS bitwise_or .)
    NOT             reduce using rule 82 (compare_op -> IS bitwise_or .)
    IS              reduce using rule 82 (compare_op -> IS bitwise_or .)
    IN              reduce using rule 82 (compare_op -> IS bitwise_or .)
    AND             reduce using rule 82 (compare_op -> IS bitwise_or .)
    OR              reduce using rule 82 (compare_op -> IS bitwise_or .)
    IF              reduce using rule 82 (compare_op -> IS bitwise_or .)
    COMMA           reduce using rule 82 (compare_op -> IS bitwise_or .)
    NEWLINE         reduce using rule 82 (compare_op -> IS bitwise_or .)
    SEMICOLON       reduce using rule 82 (compare_op -> IS bitwise_or .)
    ENDMARKER       reduce using rule 82 (compare_op -> IS bitwise_or .)
    DEF             reduce using rule 82 (compare_op -> IS bitwise_or .)
    CLASS           reduce using rule 82 (compare_op -> IS bitwise_or .)
    FOR             reduce using rule 82 (compare_op -> IS bitwise_or .)
    WHILE           reduce using rule 82 (compare_op -> IS bitwise_or .)
    PASS            reduce using rule 82 (compare_op -> IS bitwise_or .)
    BREAK           reduce using rule 82 (compare_op -> IS bitwise_or .)
    CONTINUE        reduce using rule 82 (compare_op -> IS bitwise_or .)
    RETURN          reduce using rule 82 (compare_op -> IS bitwise_or .)
    DEL             reduce using rule 82 (compare_op -> IS bitwise_or .)
    GLOBAL          reduce using rule 82 (compare_op -> IS bitwise_or .)
    IDENTIFIER      reduce using rule 82 (compare_op -> IS bitwise_or .)
    L_SQB           reduce using rule 82 (compare_op -> IS bitwise_or .)
    L_PARENTHESIS   reduce using rule 82 (compare_op -> IS bitwise_or .)
    PLUS            reduce using rule 82 (compare_op -> IS bitwise_or .)
    MINUS           reduce using rule 82 (compare_op -> IS bitwise_or .)
    TRUE            reduce using rule 82 (compare_op -> IS bitwise_or .)
    FALSE           reduce using rule 82 (compare_op -> IS bitwise_or .)
    NONE            reduce using rule 82 (compare_op -> IS bitwise_or .)
    STRING          reduce using rule 82 (compare_op -> IS bitwise_or .)
    TRIPLE_STRING   reduce using rule 82 (compare_op -> IS bitwise_or .)
    NUMBER          reduce using rule 82 (compare_op -> IS bitwise_or .)
    F_NUMBER        reduce using rule 82 (compare_op -> IS bitwise_or .)
    BIN_NUMBER      reduce using rule 82 (compare_op -> IS bitwise_or .)
    HEX_NUMBER      reduce using rule 82 (compare_op -> IS bitwise_or .)
    OCT_NUMBER      reduce using rule 82 (compare_op -> IS bitwise_or .)
    L_CB            reduce using rule 82 (compare_op -> IS bitwise_or .)
    R_PARENTHESIS   reduce using rule 82 (compare_op -> IS bitwise_or .)
    COLON           reduce using rule 82 (compare_op -> IS bitwise_or .)
    ELIF            reduce using rule 82 (compare_op -> IS bitwise_or .)
    ELSE            reduce using rule 82 (compare_op -> IS bitwise_or .)
    DEDENT          reduce using rule 82 (compare_op -> IS bitwise_or .)
    R_SQB           reduce using rule 82 (compare_op -> IS bitwise_or .)
    R_CB            reduce using rule 82 (compare_op -> IS bitwise_or .)
    PIPE            shift and go to state 119


state 194

    (85) bitwise_xor -> bitwise_xor CARET bitwise_and .
    (87) bitwise_and -> bitwise_and . AMPERSAND shift_expr

    CARET           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    PIPE            reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    EQUALITY        reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    INEQUALITY      reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    GREATER_EQUAL   reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    LESSER_EQUAL    reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    GREATER         reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    LESSER          reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    NOT             reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    IS              reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    IN              reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    AND             reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    OR              reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    IF              reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    COMMA           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    NEWLINE         reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    SEMICOLON       reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    ENDMARKER       reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    DEF             reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    CLASS           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    FOR             reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    WHILE           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    PASS            reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    BREAK           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    CONTINUE        reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    RETURN          reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    DEL             reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    GLOBAL          reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    IDENTIFIER      reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    L_SQB           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    L_PARENTHESIS   reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    PLUS            reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    MINUS           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    TRUE            reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    FALSE           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    NONE            reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    STRING          reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    TRIPLE_STRING   reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    NUMBER          reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    F_NUMBER        reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    BIN_NUMBER      reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    HEX_NUMBER      reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    OCT_NUMBER      reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    L_CB            reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    R_PARENTHESIS   reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    COLON           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    ELIF            reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    ELSE            reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    DEDENT          reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    R_SQB           reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    R_CB            reduce using rule 85 (bitwise_xor -> bitwise_xor CARET bitwise_and .)
    AMPERSAND       shift and go to state 131


state 195

    (87) bitwise_and -> bitwise_and AMPERSAND shift_expr .
    (89) shift_expr -> shift_expr . L_SHIFT sum
    (90) shift_expr -> shift_expr . R_SHIFT sum

    AMPERSAND       reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    CARET           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    PIPE            reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    EQUALITY        reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    INEQUALITY      reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    GREATER_EQUAL   reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    LESSER_EQUAL    reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    GREATER         reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    LESSER          reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    NOT             reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    IS              reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    IN              reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    AND             reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    OR              reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    IF              reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    COMMA           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    NEWLINE         reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    SEMICOLON       reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    ENDMARKER       reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    DEF             reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    CLASS           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    FOR             reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    WHILE           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    PASS            reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    BREAK           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    CONTINUE        reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    RETURN          reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    DEL             reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    GLOBAL          reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    IDENTIFIER      reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    L_SQB           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    L_PARENTHESIS   reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    PLUS            reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    MINUS           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    TRUE            reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    FALSE           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    NONE            reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    STRING          reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    TRIPLE_STRING   reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    NUMBER          reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    F_NUMBER        reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    BIN_NUMBER      reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    HEX_NUMBER      reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    OCT_NUMBER      reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    L_CB            reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    R_PARENTHESIS   reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    COLON           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    ELIF            reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    ELSE            reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    DEDENT          reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    R_SQB           reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    R_CB            reduce using rule 87 (bitwise_and -> bitwise_and AMPERSAND shift_expr .)
    L_SHIFT         shift and go to state 132
    R_SHIFT         shift and go to state 133


state 196

    (89) shift_expr -> shift_expr L_SHIFT sum .
    (92) sum -> sum . PLUS term
    (93) sum -> sum . MINUS term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    L_SHIFT         reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    R_SHIFT         reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    AMPERSAND       reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    CARET           reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    PIPE            reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    EQUALITY        reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    INEQUALITY      reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    GREATER_EQUAL   reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    LESSER_EQUAL    reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    GREATER         reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    LESSER          reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    NOT             reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    IS              reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    IN              reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    AND             reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    OR              reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    IF              reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    COMMA           reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    NEWLINE         reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    SEMICOLON       reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    ENDMARKER       reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    DEF             reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    CLASS           reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    FOR             reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    WHILE           reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    PASS            reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    BREAK           reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    CONTINUE        reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    RETURN          reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    DEL             reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    GLOBAL          reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    IDENTIFIER      reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    L_SQB           reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    L_PARENTHESIS   reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    TRUE            reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    FALSE           reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    NONE            reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    STRING          reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    TRIPLE_STRING   reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    NUMBER          reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    F_NUMBER        reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    BIN_NUMBER      reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    HEX_NUMBER      reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    OCT_NUMBER      reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    L_CB            reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    R_PARENTHESIS   reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    COLON           reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    ELIF            reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    ELSE            reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    DEDENT          reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    R_SQB           reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    R_CB            reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .)
    PLUS            shift and go to state 134
    MINUS           shift and go to state 135

  ! PLUS            [ reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .) ]
  ! MINUS           [ reduce using rule 89 (shift_expr -> shift_expr L_SHIFT sum .) ]


state 197

    (90) shift_expr -> shift_expr R_SHIFT sum .
    (92) sum -> sum . PLUS term
    (93) sum -> sum . MINUS term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    L_SHIFT         reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    R_SHIFT         reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    AMPERSAND       reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    CARET           reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    PIPE            reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    EQUALITY        reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    INEQUALITY      reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    GREATER_EQUAL   reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    LESSER_EQUAL    reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    GREATER         reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    LESSER          reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    NOT             reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    IS              reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    IN              reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    AND             reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    OR              reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    IF              reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    COMMA           reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    NEWLINE         reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    SEMICOLON       reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    ENDMARKER       reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    DEF             reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    CLASS           reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    FOR             reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    WHILE           reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    PASS            reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    BREAK           reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    CONTINUE        reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    RETURN          reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    DEL             reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    GLOBAL          reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    IDENTIFIER      reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    L_SQB           reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    L_PARENTHESIS   reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    TRUE            reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    FALSE           reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    NONE            reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    STRING          reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    TRIPLE_STRING   reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    NUMBER          reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    F_NUMBER        reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    BIN_NUMBER      reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    HEX_NUMBER      reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    OCT_NUMBER      reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    L_CB            reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    R_PARENTHESIS   reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    COLON           reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    ELIF            reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    ELSE            reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    DEDENT          reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    R_SQB           reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    R_CB            reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .)
    PLUS            shift and go to state 134
    MINUS           shift and go to state 135

  ! PLUS            [ reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .) ]
  ! MINUS           [ reduce using rule 90 (shift_expr -> shift_expr R_SHIFT sum .) ]


state 198

    (92) sum -> sum PLUS term .
    (95) term -> term . STAR factor
    (96) term -> term . SLASH factor
    (97) term -> term . DOUBLE_SLASH factor
    (98) term -> term . PERCENT factor

    PLUS            reduce using rule 92 (sum -> sum PLUS term .)
    MINUS           reduce using rule 92 (sum -> sum PLUS term .)
    L_SHIFT         reduce using rule 92 (sum -> sum PLUS term .)
    R_SHIFT         reduce using rule 92 (sum -> sum PLUS term .)
    AMPERSAND       reduce using rule 92 (sum -> sum PLUS term .)
    CARET           reduce using rule 92 (sum -> sum PLUS term .)
    PIPE            reduce using rule 92 (sum -> sum PLUS term .)
    EQUALITY        reduce using rule 92 (sum -> sum PLUS term .)
    INEQUALITY      reduce using rule 92 (sum -> sum PLUS term .)
    GREATER_EQUAL   reduce using rule 92 (sum -> sum PLUS term .)
    LESSER_EQUAL    reduce using rule 92 (sum -> sum PLUS term .)
    GREATER         reduce using rule 92 (sum -> sum PLUS term .)
    LESSER          reduce using rule 92 (sum -> sum PLUS term .)
    NOT             reduce using rule 92 (sum -> sum PLUS term .)
    IS              reduce using rule 92 (sum -> sum PLUS term .)
    IN              reduce using rule 92 (sum -> sum PLUS term .)
    AND             reduce using rule 92 (sum -> sum PLUS term .)
    OR              reduce using rule 92 (sum -> sum PLUS term .)
    IF              reduce using rule 92 (sum -> sum PLUS term .)
    COMMA           reduce using rule 92 (sum -> sum PLUS term .)
    NEWLINE         reduce using rule 92 (sum -> sum PLUS term .)
    SEMICOLON       reduce using rule 92 (sum -> sum PLUS term .)
    ENDMARKER       reduce using rule 92 (sum -> sum PLUS term .)
    DEF             reduce using rule 92 (sum -> sum PLUS term .)
    CLASS           reduce using rule 92 (sum -> sum PLUS term .)
    FOR             reduce using rule 92 (sum -> sum PLUS term .)
    WHILE           reduce using rule 92 (sum -> sum PLUS term .)
    PASS            reduce using rule 92 (sum -> sum PLUS term .)
    BREAK           reduce using rule 92 (sum -> sum PLUS term .)
    CONTINUE        reduce using rule 92 (sum -> sum PLUS term .)
    RETURN          reduce using rule 92 (sum -> sum PLUS term .)
    DEL             reduce using rule 92 (sum -> sum PLUS term .)
    GLOBAL          reduce using rule 92 (sum -> sum PLUS term .)
    IDENTIFIER      reduce using rule 92 (sum -> sum PLUS term .)
    L_SQB           reduce using rule 92 (sum -> sum PLUS term .)
    L_PARENTHESIS   reduce using rule 92 (sum -> sum PLUS term .)
    TRUE            reduce using rule 92 (sum -> sum PLUS term .)
    FALSE           reduce using rule 92 (sum -> sum PLUS term .)
    NONE            reduce using rule 92 (sum -> sum PLUS term .)
    STRING          reduce using rule 92 (sum -> sum PLUS term .)
    TRIPLE_STRING   reduce using rule 92 (sum -> sum PLUS term .)
    NUMBER          reduce using rule 92 (sum -> sum PLUS term .)
    F_NUMBER        reduce using rule 92 (sum -> sum PLUS term .)
    BIN_NUMBER      reduce using rule 92 (sum -> sum PLUS term .)
    HEX_NUMBER      reduce using rule 92 (sum -> sum PLUS term .)
    OCT_NUMBER      reduce using rule 92 (sum -> sum PLUS term .)
    L_CB            reduce using rule 92 (sum -> sum PLUS term .)
    R_PARENTHESIS   reduce using rule 92 (sum -> sum PLUS term .)
    COLON           reduce using rule 92 (sum -> sum PLUS term .)
    ELIF            reduce using rule 92 (sum -> sum PLUS term .)
    ELSE            reduce using rule 92 (sum -> sum PLUS term .)
    DEDENT          reduce using rule 92 (sum -> sum PLUS term .)
    R_SQB           reduce using rule 92 (sum -> sum PLUS term .)
    R_CB            reduce using rule 92 (sum -> sum PLUS term .)
    STAR            shift and go to state 137
    SLASH           shift and go to state 138
    DOUBLE_SLASH    shift and go to state 139
    PERCENT         shift and go to state 140


state 199

    (93) sum -> sum MINUS term .
    (95) term -> term . STAR factor
    (96) term -> term . SLASH factor
    (97) term -> term . DOUBLE_SLASH factor
    (98) term -> term . PERCENT factor

    PLUS            reduce using rule 93 (sum -> sum MINUS term .)
    MINUS           reduce using rule 93 (sum -> sum MINUS term .)
    L_SHIFT         reduce using rule 93 (sum -> sum MINUS term .)
    R_SHIFT         reduce using rule 93 (sum -> sum MINUS term .)
    AMPERSAND       reduce using rule 93 (sum -> sum MINUS term .)
    CARET           reduce using rule 93 (sum -> sum MINUS term .)
    PIPE            reduce using rule 93 (sum -> sum MINUS term .)
    EQUALITY        reduce using rule 93 (sum -> sum MINUS term .)
    INEQUALITY      reduce using rule 93 (sum -> sum MINUS term .)
    GREATER_EQUAL   reduce using rule 93 (sum -> sum MINUS term .)
    LESSER_EQUAL    reduce using rule 93 (sum -> sum MINUS term .)
    GREATER         reduce using rule 93 (sum -> sum MINUS term .)
    LESSER          reduce using rule 93 (sum -> sum MINUS term .)
    NOT             reduce using rule 93 (sum -> sum MINUS term .)
    IS              reduce using rule 93 (sum -> sum MINUS term .)
    IN              reduce using rule 93 (sum -> sum MINUS term .)
    AND             reduce using rule 93 (sum -> sum MINUS term .)
    OR              reduce using rule 93 (sum -> sum MINUS term .)
    IF              reduce using rule 93 (sum -> sum MINUS term .)
    COMMA           reduce using rule 93 (sum -> sum MINUS term .)
    NEWLINE         reduce using rule 93 (sum -> sum MINUS term .)
    SEMICOLON       reduce using rule 93 (sum -> sum MINUS term .)
    ENDMARKER       reduce using rule 93 (sum -> sum MINUS term .)
    DEF             reduce using rule 93 (sum -> sum MINUS term .)
    CLASS           reduce using rule 93 (sum -> sum MINUS term .)
    FOR             reduce using rule 93 (sum -> sum MINUS term .)
    WHILE           reduce using rule 93 (sum -> sum MINUS term .)
    PASS            reduce using rule 93 (sum -> sum MINUS term .)
    BREAK           reduce using rule 93 (sum -> sum MINUS term .)
    CONTINUE        reduce using rule 93 (sum -> sum MINUS term .)
    RETURN          reduce using rule 93 (sum -> sum MINUS term .)
    DEL             reduce using rule 93 (sum -> sum MINUS term .)
    GLOBAL          reduce using rule 93 (sum -> sum MINUS term .)
    IDENTIFIER      reduce using rule 93 (sum -> sum MINUS term .)
    L_SQB           reduce using rule 93 (sum -> sum MINUS term .)
    L_PARENTHESIS   reduce using rule 93 (sum -> sum MINUS term .)
    TRUE            reduce using rule 93 (sum -> sum MINUS term .)
    FALSE           reduce using rule 93 (sum -> sum MINUS term .)
    NONE            reduce using rule 93 (sum -> sum MINUS term .)
    STRING          reduce using rule 93 (sum -> sum MINUS term .)
    TRIPLE_STRING   reduce using rule 93 (sum -> sum MINUS term .)
    NUMBER          reduce using rule 93 (sum -> sum MINUS term .)
    F_NUMBER        reduce using rule 93 (sum -> sum MINUS term .)
    BIN_NUMBER      reduce using rule 93 (sum -> sum MINUS term .)
    HEX_NUMBER      reduce using rule 93 (sum -> sum MINUS term .)
    OCT_NUMBER      reduce using rule 93 (sum -> sum MINUS term .)
    L_CB            reduce using rule 93 (sum -> sum MINUS term .)
    R_PARENTHESIS   reduce using rule 93 (sum -> sum MINUS term .)
    COLON           reduce using rule 93 (sum -> sum MINUS term .)
    ELIF            reduce using rule 93 (sum -> sum MINUS term .)
    ELSE            reduce using rule 93 (sum -> sum MINUS term .)
    DEDENT          reduce using rule 93 (sum -> sum MINUS term .)
    R_SQB           reduce using rule 93 (sum -> sum MINUS term .)
    R_CB            reduce using rule 93 (sum -> sum MINUS term .)
    STAR            shift and go to state 137
    SLASH           shift and go to state 138
    DOUBLE_SLASH    shift and go to state 139
    PERCENT         shift and go to state 140


state 200

    (95) term -> term STAR factor .

    STAR            reduce using rule 95 (term -> term STAR factor .)
    SLASH           reduce using rule 95 (term -> term STAR factor .)
    DOUBLE_SLASH    reduce using rule 95 (term -> term STAR factor .)
    PERCENT         reduce using rule 95 (term -> term STAR factor .)
    PLUS            reduce using rule 95 (term -> term STAR factor .)
    MINUS           reduce using rule 95 (term -> term STAR factor .)
    L_SHIFT         reduce using rule 95 (term -> term STAR factor .)
    R_SHIFT         reduce using rule 95 (term -> term STAR factor .)
    AMPERSAND       reduce using rule 95 (term -> term STAR factor .)
    CARET           reduce using rule 95 (term -> term STAR factor .)
    PIPE            reduce using rule 95 (term -> term STAR factor .)
    EQUALITY        reduce using rule 95 (term -> term STAR factor .)
    INEQUALITY      reduce using rule 95 (term -> term STAR factor .)
    GREATER_EQUAL   reduce using rule 95 (term -> term STAR factor .)
    LESSER_EQUAL    reduce using rule 95 (term -> term STAR factor .)
    GREATER         reduce using rule 95 (term -> term STAR factor .)
    LESSER          reduce using rule 95 (term -> term STAR factor .)
    NOT             reduce using rule 95 (term -> term STAR factor .)
    IS              reduce using rule 95 (term -> term STAR factor .)
    IN              reduce using rule 95 (term -> term STAR factor .)
    AND             reduce using rule 95 (term -> term STAR factor .)
    OR              reduce using rule 95 (term -> term STAR factor .)
    IF              reduce using rule 95 (term -> term STAR factor .)
    COMMA           reduce using rule 95 (term -> term STAR factor .)
    NEWLINE         reduce using rule 95 (term -> term STAR factor .)
    SEMICOLON       reduce using rule 95 (term -> term STAR factor .)
    ENDMARKER       reduce using rule 95 (term -> term STAR factor .)
    DEF             reduce using rule 95 (term -> term STAR factor .)
    CLASS           reduce using rule 95 (term -> term STAR factor .)
    FOR             reduce using rule 95 (term -> term STAR factor .)
    WHILE           reduce using rule 95 (term -> term STAR factor .)
    PASS            reduce using rule 95 (term -> term STAR factor .)
    BREAK           reduce using rule 95 (term -> term STAR factor .)
    CONTINUE        reduce using rule 95 (term -> term STAR factor .)
    RETURN          reduce using rule 95 (term -> term STAR factor .)
    DEL             reduce using rule 95 (term -> term STAR factor .)
    GLOBAL          reduce using rule 95 (term -> term STAR factor .)
    IDENTIFIER      reduce using rule 95 (term -> term STAR factor .)
    L_SQB           reduce using rule 95 (term -> term STAR factor .)
    L_PARENTHESIS   reduce using rule 95 (term -> term STAR factor .)
    TRUE            reduce using rule 95 (term -> term STAR factor .)
    FALSE           reduce using rule 95 (term -> term STAR factor .)
    NONE            reduce using rule 95 (term -> term STAR factor .)
    STRING          reduce using rule 95 (term -> term STAR factor .)
    TRIPLE_STRING   reduce using rule 95 (term -> term STAR factor .)
    NUMBER          reduce using rule 95 (term -> term STAR factor .)
    F_NUMBER        reduce using rule 95 (term -> term STAR factor .)
    BIN_NUMBER      reduce using rule 95 (term -> term STAR factor .)
    HEX_NUMBER      reduce using rule 95 (term -> term STAR factor .)
    OCT_NUMBER      reduce using rule 95 (term -> term STAR factor .)
    L_CB            reduce using rule 95 (term -> term STAR factor .)
    R_PARENTHESIS   reduce using rule 95 (term -> term STAR factor .)
    COLON           reduce using rule 95 (term -> term STAR factor .)
    ELIF            reduce using rule 95 (term -> term STAR factor .)
    ELSE            reduce using rule 95 (term -> term STAR factor .)
    DEDENT          reduce using rule 95 (term -> term STAR factor .)
    R_SQB           reduce using rule 95 (term -> term STAR factor .)
    R_CB            reduce using rule 95 (term -> term STAR factor .)


state 201

    (96) term -> term SLASH factor .

    STAR            reduce using rule 96 (term -> term SLASH factor .)
    SLASH           reduce using rule 96 (term -> term SLASH factor .)
    DOUBLE_SLASH    reduce using rule 96 (term -> term SLASH factor .)
    PERCENT         reduce using rule 96 (term -> term SLASH factor .)
    PLUS            reduce using rule 96 (term -> term SLASH factor .)
    MINUS           reduce using rule 96 (term -> term SLASH factor .)
    L_SHIFT         reduce using rule 96 (term -> term SLASH factor .)
    R_SHIFT         reduce using rule 96 (term -> term SLASH factor .)
    AMPERSAND       reduce using rule 96 (term -> term SLASH factor .)
    CARET           reduce using rule 96 (term -> term SLASH factor .)
    PIPE            reduce using rule 96 (term -> term SLASH factor .)
    EQUALITY        reduce using rule 96 (term -> term SLASH factor .)
    INEQUALITY      reduce using rule 96 (term -> term SLASH factor .)
    GREATER_EQUAL   reduce using rule 96 (term -> term SLASH factor .)
    LESSER_EQUAL    reduce using rule 96 (term -> term SLASH factor .)
    GREATER         reduce using rule 96 (term -> term SLASH factor .)
    LESSER          reduce using rule 96 (term -> term SLASH factor .)
    NOT             reduce using rule 96 (term -> term SLASH factor .)
    IS              reduce using rule 96 (term -> term SLASH factor .)
    IN              reduce using rule 96 (term -> term SLASH factor .)
    AND             reduce using rule 96 (term -> term SLASH factor .)
    OR              reduce using rule 96 (term -> term SLASH factor .)
    IF              reduce using rule 96 (term -> term SLASH factor .)
    COMMA           reduce using rule 96 (term -> term SLASH factor .)
    NEWLINE         reduce using rule 96 (term -> term SLASH factor .)
    SEMICOLON       reduce using rule 96 (term -> term SLASH factor .)
    ENDMARKER       reduce using rule 96 (term -> term SLASH factor .)
    DEF             reduce using rule 96 (term -> term SLASH factor .)
    CLASS           reduce using rule 96 (term -> term SLASH factor .)
    FOR             reduce using rule 96 (term -> term SLASH factor .)
    WHILE           reduce using rule 96 (term -> term SLASH factor .)
    PASS            reduce using rule 96 (term -> term SLASH factor .)
    BREAK           reduce using rule 96 (term -> term SLASH factor .)
    CONTINUE        reduce using rule 96 (term -> term SLASH factor .)
    RETURN          reduce using rule 96 (term -> term SLASH factor .)
    DEL             reduce using rule 96 (term -> term SLASH factor .)
    GLOBAL          reduce using rule 96 (term -> term SLASH factor .)
    IDENTIFIER      reduce using rule 96 (term -> term SLASH factor .)
    L_SQB           reduce using rule 96 (term -> term SLASH factor .)
    L_PARENTHESIS   reduce using rule 96 (term -> term SLASH factor .)
    TRUE            reduce using rule 96 (term -> term SLASH factor .)
    FALSE           reduce using rule 96 (term -> term SLASH factor .)
    NONE            reduce using rule 96 (term -> term SLASH factor .)
    STRING          reduce using rule 96 (term -> term SLASH factor .)
    TRIPLE_STRING   reduce using rule 96 (term -> term SLASH factor .)
    NUMBER          reduce using rule 96 (term -> term SLASH factor .)
    F_NUMBER        reduce using rule 96 (term -> term SLASH factor .)
    BIN_NUMBER      reduce using rule 96 (term -> term SLASH factor .)
    HEX_NUMBER      reduce using rule 96 (term -> term SLASH factor .)
    OCT_NUMBER      reduce using rule 96 (term -> term SLASH factor .)
    L_CB            reduce using rule 96 (term -> term SLASH factor .)
    R_PARENTHESIS   reduce using rule 96 (term -> term SLASH factor .)
    COLON           reduce using rule 96 (term -> term SLASH factor .)
    ELIF            reduce using rule 96 (term -> term SLASH factor .)
    ELSE            reduce using rule 96 (term -> term SLASH factor .)
    DEDENT          reduce using rule 96 (term -> term SLASH factor .)
    R_SQB           reduce using rule 96 (term -> term SLASH factor .)
    R_CB            reduce using rule 96 (term -> term SLASH factor .)


state 202

    (97) term -> term DOUBLE_SLASH factor .

    STAR            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    SLASH           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    DOUBLE_SLASH    reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    PERCENT         reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    PLUS            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    MINUS           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    L_SHIFT         reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    R_SHIFT         reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    AMPERSAND       reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    CARET           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    PIPE            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    EQUALITY        reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    INEQUALITY      reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    GREATER_EQUAL   reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    LESSER_EQUAL    reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    GREATER         reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    LESSER          reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    NOT             reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    IS              reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    IN              reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    AND             reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    OR              reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    IF              reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    COMMA           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    NEWLINE         reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    SEMICOLON       reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    ENDMARKER       reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    DEF             reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    CLASS           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    FOR             reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    WHILE           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    PASS            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    BREAK           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    CONTINUE        reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    RETURN          reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    DEL             reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    GLOBAL          reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    IDENTIFIER      reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    L_SQB           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    L_PARENTHESIS   reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    TRUE            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    FALSE           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    NONE            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    STRING          reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    TRIPLE_STRING   reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    NUMBER          reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    F_NUMBER        reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    BIN_NUMBER      reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    HEX_NUMBER      reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    OCT_NUMBER      reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    L_CB            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    R_PARENTHESIS   reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    COLON           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    ELIF            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    ELSE            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    DEDENT          reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    R_SQB           reduce using rule 97 (term -> term DOUBLE_SLASH factor .)
    R_CB            reduce using rule 97 (term -> term DOUBLE_SLASH factor .)


state 203

    (98) term -> term PERCENT factor .

    STAR            reduce using rule 98 (term -> term PERCENT factor .)
    SLASH           reduce using rule 98 (term -> term PERCENT factor .)
    DOUBLE_SLASH    reduce using rule 98 (term -> term PERCENT factor .)
    PERCENT         reduce using rule 98 (term -> term PERCENT factor .)
    PLUS            reduce using rule 98 (term -> term PERCENT factor .)
    MINUS           reduce using rule 98 (term -> term PERCENT factor .)
    L_SHIFT         reduce using rule 98 (term -> term PERCENT factor .)
    R_SHIFT         reduce using rule 98 (term -> term PERCENT factor .)
    AMPERSAND       reduce using rule 98 (term -> term PERCENT factor .)
    CARET           reduce using rule 98 (term -> term PERCENT factor .)
    PIPE            reduce using rule 98 (term -> term PERCENT factor .)
    EQUALITY        reduce using rule 98 (term -> term PERCENT factor .)
    INEQUALITY      reduce using rule 98 (term -> term PERCENT factor .)
    GREATER_EQUAL   reduce using rule 98 (term -> term PERCENT factor .)
    LESSER_EQUAL    reduce using rule 98 (term -> term PERCENT factor .)
    GREATER         reduce using rule 98 (term -> term PERCENT factor .)
    LESSER          reduce using rule 98 (term -> term PERCENT factor .)
    NOT             reduce using rule 98 (term -> term PERCENT factor .)
    IS              reduce using rule 98 (term -> term PERCENT factor .)
    IN              reduce using rule 98 (term -> term PERCENT factor .)
    AND             reduce using rule 98 (term -> term PERCENT factor .)
    OR              reduce using rule 98 (term -> term PERCENT factor .)
    IF              reduce using rule 98 (term -> term PERCENT factor .)
    COMMA           reduce using rule 98 (term -> term PERCENT factor .)
    NEWLINE         reduce using rule 98 (term -> term PERCENT factor .)
    SEMICOLON       reduce using rule 98 (term -> term PERCENT factor .)
    ENDMARKER       reduce using rule 98 (term -> term PERCENT factor .)
    DEF             reduce using rule 98 (term -> term PERCENT factor .)
    CLASS           reduce using rule 98 (term -> term PERCENT factor .)
    FOR             reduce using rule 98 (term -> term PERCENT factor .)
    WHILE           reduce using rule 98 (term -> term PERCENT factor .)
    PASS            reduce using rule 98 (term -> term PERCENT factor .)
    BREAK           reduce using rule 98 (term -> term PERCENT factor .)
    CONTINUE        reduce using rule 98 (term -> term PERCENT factor .)
    RETURN          reduce using rule 98 (term -> term PERCENT factor .)
    DEL             reduce using rule 98 (term -> term PERCENT factor .)
    GLOBAL          reduce using rule 98 (term -> term PERCENT factor .)
    IDENTIFIER      reduce using rule 98 (term -> term PERCENT factor .)
    L_SQB           reduce using rule 98 (term -> term PERCENT factor .)
    L_PARENTHESIS   reduce using rule 98 (term -> term PERCENT factor .)
    TRUE            reduce using rule 98 (term -> term PERCENT factor .)
    FALSE           reduce using rule 98 (term -> term PERCENT factor .)
    NONE            reduce using rule 98 (term -> term PERCENT factor .)
    STRING          reduce using rule 98 (term -> term PERCENT factor .)
    TRIPLE_STRING   reduce using rule 98 (term -> term PERCENT factor .)
    NUMBER          reduce using rule 98 (term -> term PERCENT factor .)
    F_NUMBER        reduce using rule 98 (term -> term PERCENT factor .)
    BIN_NUMBER      reduce using rule 98 (term -> term PERCENT factor .)
    HEX_NUMBER      reduce using rule 98 (term -> term PERCENT factor .)
    OCT_NUMBER      reduce using rule 98 (term -> term PERCENT factor .)
    L_CB            reduce using rule 98 (term -> term PERCENT factor .)
    R_PARENTHESIS   reduce using rule 98 (term -> term PERCENT factor .)
    COLON           reduce using rule 98 (term -> term PERCENT factor .)
    ELIF            reduce using rule 98 (term -> term PERCENT factor .)
    ELSE            reduce using rule 98 (term -> term PERCENT factor .)
    DEDENT          reduce using rule 98 (term -> term PERCENT factor .)
    R_SQB           reduce using rule 98 (term -> term PERCENT factor .)
    R_CB            reduce using rule 98 (term -> term PERCENT factor .)


state 204

    (103) power -> primary DOUBLE_STAR factor .

    STAR            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    SLASH           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    DOUBLE_SLASH    reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    PERCENT         reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    PLUS            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    MINUS           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    L_SHIFT         reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    R_SHIFT         reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    AMPERSAND       reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    CARET           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    PIPE            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    EQUALITY        reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    INEQUALITY      reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    GREATER_EQUAL   reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    LESSER_EQUAL    reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    GREATER         reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    LESSER          reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    NOT             reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    IS              reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    IN              reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    AND             reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    OR              reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    IF              reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    COMMA           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    NEWLINE         reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    SEMICOLON       reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    ENDMARKER       reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    DEF             reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    CLASS           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    FOR             reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    WHILE           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    PASS            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    BREAK           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    CONTINUE        reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    RETURN          reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    DEL             reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    GLOBAL          reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    IDENTIFIER      reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    L_SQB           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    L_PARENTHESIS   reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    TRUE            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    FALSE           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    NONE            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    STRING          reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    TRIPLE_STRING   reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    NUMBER          reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    F_NUMBER        reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    BIN_NUMBER      reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    HEX_NUMBER      reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    OCT_NUMBER      reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    L_CB            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    R_PARENTHESIS   reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    COLON           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    ELIF            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    ELSE            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    DEDENT          reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    R_SQB           reduce using rule 103 (power -> primary DOUBLE_STAR factor .)
    R_CB            reduce using rule 103 (power -> primary DOUBLE_STAR factor .)


state 205

    (105) primary -> primary L_PARENTHESIS arguments . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 239


state 206

    (107) primary -> primary L_PARENTHESIS R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    L_SQB           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    DOT             reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    STAR            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    SLASH           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    PERCENT         reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    PLUS            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    MINUS           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    L_SHIFT         reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    R_SHIFT         reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    AMPERSAND       reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    CARET           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    PIPE            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    EQUALITY        reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    INEQUALITY      reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    GREATER         reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    LESSER          reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    NOT             reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    IS              reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    IN              reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    AND             reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    OR              reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    IF              reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    COMMA           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    NEWLINE         reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    SEMICOLON       reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    ENDMARKER       reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    DEF             reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    CLASS           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    FOR             reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    WHILE           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    PASS            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    BREAK           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    CONTINUE        reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    RETURN          reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    DEL             reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    GLOBAL          reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    IDENTIFIER      reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    TRUE            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    FALSE           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    NONE            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    STRING          reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    TRIPLE_STRING   reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    NUMBER          reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    F_NUMBER        reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    BIN_NUMBER      reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    HEX_NUMBER      reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    OCT_NUMBER      reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    L_CB            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    COLON           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    ELIF            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    ELSE            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    DEDENT          reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    R_SQB           reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)
    R_CB            reduce using rule 107 (primary -> primary L_PARENTHESIS R_PARENTHESIS .)


state 207

    (108) primary -> primary L_SQB slices . R_SQB
    (111) slices -> slices . COMMA slice

    R_SQB           shift and go to state 240
    COMMA           shift and go to state 229


state 208

    (109) primary -> primary DOT IDENTIFIER .

    DOUBLE_STAR     reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    L_SQB           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    DOT             reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    STAR            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    SLASH           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    DOUBLE_SLASH    reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    PERCENT         reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    PLUS            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    MINUS           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    L_SHIFT         reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    R_SHIFT         reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    CARET           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    PIPE            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    EQUALITY        reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    INEQUALITY      reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    LESSER_EQUAL    reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    GREATER         reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    LESSER          reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    NOT             reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    IS              reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    IN              reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    AND             reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    OR              reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    IF              reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    COMMA           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    NEWLINE         reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    ENDMARKER       reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    DEF             reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    CLASS           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    FOR             reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    WHILE           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    PASS            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    BREAK           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    CONTINUE        reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    RETURN          reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    DEL             reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    GLOBAL          reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    TRUE            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    FALSE           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    NONE            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    STRING          reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    TRIPLE_STRING   reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    NUMBER          reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    F_NUMBER        reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    BIN_NUMBER      reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    HEX_NUMBER      reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    OCT_NUMBER      reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    L_CB            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    R_PARENTHESIS   reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    COLON           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    ELIF            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    ELSE            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    DEDENT          reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    R_SQB           reduce using rule 109 (primary -> primary DOT IDENTIFIER .)
    R_CB            reduce using rule 109 (primary -> primary DOT IDENTIFIER .)


state 209

    (144) dict -> L_CB kvpairs R_CB .

    DOUBLE_STAR     reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    L_PARENTHESIS   reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    L_SQB           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    DOT             reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    STAR            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    SLASH           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    DOUBLE_SLASH    reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    PERCENT         reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    PLUS            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    MINUS           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    L_SHIFT         reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    R_SHIFT         reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    AMPERSAND       reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    CARET           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    PIPE            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    EQUALITY        reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    INEQUALITY      reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    GREATER_EQUAL   reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    LESSER_EQUAL    reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    GREATER         reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    LESSER          reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    NOT             reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    IS              reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    IN              reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    AND             reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    OR              reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    IF              reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    COMMA           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    NEWLINE         reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    SEMICOLON       reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    ENDMARKER       reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    DEF             reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    CLASS           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    FOR             reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    WHILE           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    PASS            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    BREAK           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    CONTINUE        reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    RETURN          reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    DEL             reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    GLOBAL          reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    IDENTIFIER      reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    TRUE            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    FALSE           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    NONE            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    STRING          reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    TRIPLE_STRING   reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    NUMBER          reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    F_NUMBER        reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    BIN_NUMBER      reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    HEX_NUMBER      reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    OCT_NUMBER      reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    L_CB            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    R_PARENTHESIS   reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    COLON           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    ELIF            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    ELSE            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    DEDENT          reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    R_SQB           reduce using rule 144 (dict -> L_CB kvpairs R_CB .)
    R_CB            reduce using rule 144 (dict -> L_CB kvpairs R_CB .)


state 210

    (143) set -> L_CB expressions R_CB .

    DOUBLE_STAR     reduce using rule 143 (set -> L_CB expressions R_CB .)
    L_PARENTHESIS   reduce using rule 143 (set -> L_CB expressions R_CB .)
    L_SQB           reduce using rule 143 (set -> L_CB expressions R_CB .)
    DOT             reduce using rule 143 (set -> L_CB expressions R_CB .)
    STAR            reduce using rule 143 (set -> L_CB expressions R_CB .)
    SLASH           reduce using rule 143 (set -> L_CB expressions R_CB .)
    DOUBLE_SLASH    reduce using rule 143 (set -> L_CB expressions R_CB .)
    PERCENT         reduce using rule 143 (set -> L_CB expressions R_CB .)
    PLUS            reduce using rule 143 (set -> L_CB expressions R_CB .)
    MINUS           reduce using rule 143 (set -> L_CB expressions R_CB .)
    L_SHIFT         reduce using rule 143 (set -> L_CB expressions R_CB .)
    R_SHIFT         reduce using rule 143 (set -> L_CB expressions R_CB .)
    AMPERSAND       reduce using rule 143 (set -> L_CB expressions R_CB .)
    CARET           reduce using rule 143 (set -> L_CB expressions R_CB .)
    PIPE            reduce using rule 143 (set -> L_CB expressions R_CB .)
    EQUALITY        reduce using rule 143 (set -> L_CB expressions R_CB .)
    INEQUALITY      reduce using rule 143 (set -> L_CB expressions R_CB .)
    GREATER_EQUAL   reduce using rule 143 (set -> L_CB expressions R_CB .)
    LESSER_EQUAL    reduce using rule 143 (set -> L_CB expressions R_CB .)
    GREATER         reduce using rule 143 (set -> L_CB expressions R_CB .)
    LESSER          reduce using rule 143 (set -> L_CB expressions R_CB .)
    NOT             reduce using rule 143 (set -> L_CB expressions R_CB .)
    IS              reduce using rule 143 (set -> L_CB expressions R_CB .)
    IN              reduce using rule 143 (set -> L_CB expressions R_CB .)
    AND             reduce using rule 143 (set -> L_CB expressions R_CB .)
    OR              reduce using rule 143 (set -> L_CB expressions R_CB .)
    IF              reduce using rule 143 (set -> L_CB expressions R_CB .)
    COMMA           reduce using rule 143 (set -> L_CB expressions R_CB .)
    NEWLINE         reduce using rule 143 (set -> L_CB expressions R_CB .)
    SEMICOLON       reduce using rule 143 (set -> L_CB expressions R_CB .)
    ENDMARKER       reduce using rule 143 (set -> L_CB expressions R_CB .)
    DEF             reduce using rule 143 (set -> L_CB expressions R_CB .)
    CLASS           reduce using rule 143 (set -> L_CB expressions R_CB .)
    FOR             reduce using rule 143 (set -> L_CB expressions R_CB .)
    WHILE           reduce using rule 143 (set -> L_CB expressions R_CB .)
    PASS            reduce using rule 143 (set -> L_CB expressions R_CB .)
    BREAK           reduce using rule 143 (set -> L_CB expressions R_CB .)
    CONTINUE        reduce using rule 143 (set -> L_CB expressions R_CB .)
    RETURN          reduce using rule 143 (set -> L_CB expressions R_CB .)
    DEL             reduce using rule 143 (set -> L_CB expressions R_CB .)
    GLOBAL          reduce using rule 143 (set -> L_CB expressions R_CB .)
    IDENTIFIER      reduce using rule 143 (set -> L_CB expressions R_CB .)
    TRUE            reduce using rule 143 (set -> L_CB expressions R_CB .)
    FALSE           reduce using rule 143 (set -> L_CB expressions R_CB .)
    NONE            reduce using rule 143 (set -> L_CB expressions R_CB .)
    STRING          reduce using rule 143 (set -> L_CB expressions R_CB .)
    TRIPLE_STRING   reduce using rule 143 (set -> L_CB expressions R_CB .)
    NUMBER          reduce using rule 143 (set -> L_CB expressions R_CB .)
    F_NUMBER        reduce using rule 143 (set -> L_CB expressions R_CB .)
    BIN_NUMBER      reduce using rule 143 (set -> L_CB expressions R_CB .)
    HEX_NUMBER      reduce using rule 143 (set -> L_CB expressions R_CB .)
    OCT_NUMBER      reduce using rule 143 (set -> L_CB expressions R_CB .)
    L_CB            reduce using rule 143 (set -> L_CB expressions R_CB .)
    R_PARENTHESIS   reduce using rule 143 (set -> L_CB expressions R_CB .)
    COLON           reduce using rule 143 (set -> L_CB expressions R_CB .)
    ELIF            reduce using rule 143 (set -> L_CB expressions R_CB .)
    ELSE            reduce using rule 143 (set -> L_CB expressions R_CB .)
    DEDENT          reduce using rule 143 (set -> L_CB expressions R_CB .)
    R_SQB           reduce using rule 143 (set -> L_CB expressions R_CB .)
    R_CB            reduce using rule 143 (set -> L_CB expressions R_CB .)


state 211

    (146) kvpairs -> kvpair COMMA . kvpairs
    (147) kvpairs -> kvpair COMMA .
    (146) kvpairs -> . kvpair COMMA kvpairs
    (147) kvpairs -> . kvpair COMMA
    (148) kvpairs -> . kvpair
    (149) kvpair -> . expression COLON expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_CB            reduce using rule 147 (kvpairs -> kvpair COMMA .)
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    kvpair                         shift and go to state 149
    kvpairs                        shift and go to state 241
    expression                     shift and go to state 242
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 212

    (149) kvpair -> expression COLON . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 243
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 213

    (8) simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .

    SEMICOLON       reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    ENDMARKER       reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    NEWLINE         reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    DEF             reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    IF              reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    CLASS           reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    FOR             reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    WHILE           reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    PASS            reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    BREAK           reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    CONTINUE        reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    RETURN          reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    DEL             reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    GLOBAL          reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    IDENTIFIER      reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    L_SQB           reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    L_PARENTHESIS   reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    NOT             reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    PLUS            reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    MINUS           reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    TRUE            reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    FALSE           reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    NONE            reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    STRING          reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    TRIPLE_STRING   reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    NUMBER          reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    F_NUMBER        reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    BIN_NUMBER      reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    HEX_NUMBER      reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    OCT_NUMBER      reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    L_CB            reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    ELIF            reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    ELSE            reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)
    DEDENT          reduce using rule 8 (simple_stmts -> simple_stmts SEMICOLON simple_stmt NEWLINE .)


state 214

    (47) parameters -> IDENTIFIER .

    R_PARENTHESIS   reduce using rule 47 (parameters -> IDENTIFIER .)
    COMMA           reduce using rule 47 (parameters -> IDENTIFIER .)


state 215

    (44) function_def -> DEF IDENTIFIER L_PARENTHESIS parameters . R_PARENTHESIS COLON block
    (46) parameters -> parameters . COMMA IDENTIFIER

    R_PARENTHESIS   shift and go to state 244
    COMMA           shift and go to state 245


state 216

    (45) function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS . COLON block

    COLON           shift and go to state 246


state 217

    (140) tuple -> L_PARENTHESIS expression COMMA expressions . R_PARENTHESIS
    (59) expressions -> expressions . COMMA expression

    R_PARENTHESIS   shift and go to state 247
    COMMA           shift and go to state 100


state 218

    (141) tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    L_SQB           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    DOT             reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    STAR            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    SLASH           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    PERCENT         reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    PLUS            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    MINUS           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    L_SHIFT         reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    R_SHIFT         reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    AMPERSAND       reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    CARET           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    PIPE            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    EQUALITY        reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    INEQUALITY      reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    GREATER         reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    LESSER          reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    NOT             reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    IS              reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    IN              reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    AND             reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    OR              reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    IF              reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    COMMA           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    NEWLINE         reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    SEMICOLON       reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    ENDMARKER       reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    DEF             reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    CLASS           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    FOR             reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    WHILE           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    PASS            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    BREAK           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    CONTINUE        reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    RETURN          reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    DEL             reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    GLOBAL          reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    IDENTIFIER      reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    TRUE            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    FALSE           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    NONE            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    STRING          reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    TRIPLE_STRING   reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    NUMBER          reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    F_NUMBER        reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    BIN_NUMBER      reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    HEX_NUMBER      reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    OCT_NUMBER      reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    L_CB            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    COLON           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    ELIF            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    ELSE            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    DEDENT          reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    R_SQB           reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)
    R_CB            reduce using rule 141 (tuple -> L_PARENTHESIS expression COMMA R_PARENTHESIS .)


state 219

    (48) if_stmt -> IF expression COLON block . elif_stmt
    (49) if_stmt -> IF expression COLON block . else_block
    (50) if_stmt -> IF expression COLON block .
    (51) elif_stmt -> . ELIF expression COLON block elif_stmt
    (52) elif_stmt -> . ELIF expression COLON block else_block
    (53) elif_stmt -> . ELIF expression COLON block
    (54) else_block -> . ELSE COLON block

    ENDMARKER       reduce using rule 50 (if_stmt -> IF expression COLON block .)
    NEWLINE         reduce using rule 50 (if_stmt -> IF expression COLON block .)
    DEF             reduce using rule 50 (if_stmt -> IF expression COLON block .)
    IF              reduce using rule 50 (if_stmt -> IF expression COLON block .)
    CLASS           reduce using rule 50 (if_stmt -> IF expression COLON block .)
    FOR             reduce using rule 50 (if_stmt -> IF expression COLON block .)
    WHILE           reduce using rule 50 (if_stmt -> IF expression COLON block .)
    PASS            reduce using rule 50 (if_stmt -> IF expression COLON block .)
    BREAK           reduce using rule 50 (if_stmt -> IF expression COLON block .)
    CONTINUE        reduce using rule 50 (if_stmt -> IF expression COLON block .)
    RETURN          reduce using rule 50 (if_stmt -> IF expression COLON block .)
    DEL             reduce using rule 50 (if_stmt -> IF expression COLON block .)
    GLOBAL          reduce using rule 50 (if_stmt -> IF expression COLON block .)
    IDENTIFIER      reduce using rule 50 (if_stmt -> IF expression COLON block .)
    L_SQB           reduce using rule 50 (if_stmt -> IF expression COLON block .)
    L_PARENTHESIS   reduce using rule 50 (if_stmt -> IF expression COLON block .)
    NOT             reduce using rule 50 (if_stmt -> IF expression COLON block .)
    PLUS            reduce using rule 50 (if_stmt -> IF expression COLON block .)
    MINUS           reduce using rule 50 (if_stmt -> IF expression COLON block .)
    TRUE            reduce using rule 50 (if_stmt -> IF expression COLON block .)
    FALSE           reduce using rule 50 (if_stmt -> IF expression COLON block .)
    NONE            reduce using rule 50 (if_stmt -> IF expression COLON block .)
    STRING          reduce using rule 50 (if_stmt -> IF expression COLON block .)
    TRIPLE_STRING   reduce using rule 50 (if_stmt -> IF expression COLON block .)
    NUMBER          reduce using rule 50 (if_stmt -> IF expression COLON block .)
    F_NUMBER        reduce using rule 50 (if_stmt -> IF expression COLON block .)
    BIN_NUMBER      reduce using rule 50 (if_stmt -> IF expression COLON block .)
    HEX_NUMBER      reduce using rule 50 (if_stmt -> IF expression COLON block .)
    OCT_NUMBER      reduce using rule 50 (if_stmt -> IF expression COLON block .)
    L_CB            reduce using rule 50 (if_stmt -> IF expression COLON block .)
    DEDENT          reduce using rule 50 (if_stmt -> IF expression COLON block .)
    ELIF            shift and go to state 250
    ELSE            shift and go to state 251

    elif_stmt                      shift and go to state 248
    else_block                     shift and go to state 249

state 220

    (39) block -> NEWLINE . INDENT statements DEDENT

    INDENT          shift and go to state 252


state 221

    (40) block -> simple_stmts .
    (8) simple_stmts -> simple_stmts . SEMICOLON simple_stmt NEWLINE

    ELIF            reduce using rule 40 (block -> simple_stmts .)
    ELSE            reduce using rule 40 (block -> simple_stmts .)
    ENDMARKER       reduce using rule 40 (block -> simple_stmts .)
    NEWLINE         reduce using rule 40 (block -> simple_stmts .)
    DEF             reduce using rule 40 (block -> simple_stmts .)
    IF              reduce using rule 40 (block -> simple_stmts .)
    CLASS           reduce using rule 40 (block -> simple_stmts .)
    FOR             reduce using rule 40 (block -> simple_stmts .)
    WHILE           reduce using rule 40 (block -> simple_stmts .)
    PASS            reduce using rule 40 (block -> simple_stmts .)
    BREAK           reduce using rule 40 (block -> simple_stmts .)
    CONTINUE        reduce using rule 40 (block -> simple_stmts .)
    RETURN          reduce using rule 40 (block -> simple_stmts .)
    DEL             reduce using rule 40 (block -> simple_stmts .)
    GLOBAL          reduce using rule 40 (block -> simple_stmts .)
    IDENTIFIER      reduce using rule 40 (block -> simple_stmts .)
    L_SQB           reduce using rule 40 (block -> simple_stmts .)
    L_PARENTHESIS   reduce using rule 40 (block -> simple_stmts .)
    NOT             reduce using rule 40 (block -> simple_stmts .)
    PLUS            reduce using rule 40 (block -> simple_stmts .)
    MINUS           reduce using rule 40 (block -> simple_stmts .)
    TRUE            reduce using rule 40 (block -> simple_stmts .)
    FALSE           reduce using rule 40 (block -> simple_stmts .)
    NONE            reduce using rule 40 (block -> simple_stmts .)
    STRING          reduce using rule 40 (block -> simple_stmts .)
    TRIPLE_STRING   reduce using rule 40 (block -> simple_stmts .)
    NUMBER          reduce using rule 40 (block -> simple_stmts .)
    F_NUMBER        reduce using rule 40 (block -> simple_stmts .)
    BIN_NUMBER      reduce using rule 40 (block -> simple_stmts .)
    HEX_NUMBER      reduce using rule 40 (block -> simple_stmts .)
    OCT_NUMBER      reduce using rule 40 (block -> simple_stmts .)
    L_CB            reduce using rule 40 (block -> simple_stmts .)
    DEDENT          reduce using rule 40 (block -> simple_stmts .)
    SEMICOLON       shift and go to state 74


state 222

    (41) class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments . R_PARENTHESIS COLON block

    R_PARENTHESIS   shift and go to state 253


state 223

    (42) class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS . COLON block

    COLON           shift and go to state 254


state 224

    (43) class_def -> CLASS IDENTIFIER COLON block .

    ENDMARKER       reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    NEWLINE         reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    DEF             reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    IF              reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    CLASS           reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    FOR             reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    WHILE           reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    PASS            reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    BREAK           reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    CONTINUE        reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    RETURN          reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    DEL             reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    GLOBAL          reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    IDENTIFIER      reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    L_SQB           reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    L_PARENTHESIS   reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    NOT             reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    PLUS            reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    MINUS           reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    TRUE            reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    FALSE           reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    NONE            reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    STRING          reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    TRIPLE_STRING   reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    NUMBER          reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    F_NUMBER        reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    BIN_NUMBER      reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    HEX_NUMBER      reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    OCT_NUMBER      reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    L_CB            reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)
    DEDENT          reduce using rule 43 (class_def -> CLASS IDENTIFIER COLON block .)


state 225

    (57) for_stmt -> FOR targets IN expressions . COLON else_block
    (58) for_stmt -> FOR targets IN expressions . COLON block
    (59) expressions -> expressions . COMMA expression

    COLON           shift and go to state 255
    COMMA           shift and go to state 100


state 226

    (55) while_stmt -> WHILE expression COLON block . else_block
    (56) while_stmt -> WHILE expression COLON block .
    (54) else_block -> . ELSE COLON block

    ENDMARKER       reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    NEWLINE         reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    DEF             reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    IF              reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    CLASS           reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    FOR             reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    WHILE           reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    PASS            reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    BREAK           reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    CONTINUE        reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    RETURN          reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    DEL             reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    GLOBAL          reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    IDENTIFIER      reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    L_SQB           reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    L_PARENTHESIS   reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    NOT             reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    PLUS            reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    MINUS           reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    TRUE            reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    FALSE           reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    NONE            reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    STRING          reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    TRIPLE_STRING   reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    NUMBER          reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    F_NUMBER        reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    BIN_NUMBER      reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    HEX_NUMBER      reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    OCT_NUMBER      reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    L_CB            reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    DEDENT          reduce using rule 56 (while_stmt -> WHILE expression COLON block .)
    ELSE            shift and go to state 251

    else_block                     shift and go to state 256

state 227

    (37) namelist -> namelist COMMA IDENTIFIER .

    COMMA           reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    NEWLINE         reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    SEMICOLON       reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    ENDMARKER       reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    DEF             reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    IF              reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    CLASS           reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    FOR             reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    WHILE           reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    PASS            reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    BREAK           reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    CONTINUE        reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    RETURN          reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    DEL             reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    GLOBAL          reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    L_SQB           reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    NOT             reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    PLUS            reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    MINUS           reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    TRUE            reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    FALSE           reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    NONE            reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    STRING          reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    TRIPLE_STRING   reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    NUMBER          reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    F_NUMBER        reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    BIN_NUMBER      reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    HEX_NUMBER      reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    OCT_NUMBER      reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    L_CB            reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    ELIF            reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    ELSE            reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)
    DEDENT          reduce using rule 37 (namelist -> namelist COMMA IDENTIFIER .)


state 228

    (153) target -> target_primary L_SQB slices R_SQB .
    (156) target_primary -> target_primary L_SQB slices R_SQB .

    ASSIGNMENT      reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    COMMA           reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    ADDITION_ASSIGNMENT reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    SUBTRACTION_ASSIGNMENT reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    MULTIPLICATION_ASSIGNMENT reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    DIVISION_ASSIGNMENT reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    MODULO_ASSIGNMENT reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    EXPONENTIATION_ASSIGNMENT reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    FLOOR_DIVISION_ASSIGNMENT reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    R_PARENTHESIS   reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    IN              reduce using rule 153 (target -> target_primary L_SQB slices R_SQB .)
    DOT             reduce using rule 156 (target_primary -> target_primary L_SQB slices R_SQB .)
    L_SQB           reduce using rule 156 (target_primary -> target_primary L_SQB slices R_SQB .)
    L_PARENTHESIS   reduce using rule 156 (target_primary -> target_primary L_SQB slices R_SQB .)


state 229

    (111) slices -> slices COMMA . slice
    (113) slice -> . expression COLON expression COLON expression
    (114) slice -> . expression COLON expression
    (115) slice -> . expression COLON
    (116) slice -> . COLON expression
    (117) slice -> . COLON COLON
    (118) slice -> . COLON
    (119) slice -> . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    COLON           shift and go to state 171
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    slice                          shift and go to state 257
    expression                     shift and go to state 170
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 230

    (113) slice -> expression COLON . expression COLON expression
    (114) slice -> expression COLON . expression
    (115) slice -> expression COLON .
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    R_SQB           reduce using rule 115 (slice -> expression COLON .)
    COMMA           reduce using rule 115 (slice -> expression COLON .)
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 258
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 231

    (117) slice -> COLON COLON .

    R_SQB           reduce using rule 117 (slice -> COLON COLON .)
    COMMA           reduce using rule 117 (slice -> COLON COLON .)


state 232

    (116) slice -> COLON expression .

    R_SQB           reduce using rule 116 (slice -> COLON expression .)
    COMMA           reduce using rule 116 (slice -> COLON expression .)


state 233

    (158) target_primary -> target_primary L_PARENTHESIS arguments R_PARENTHESIS .

    DOT             reduce using rule 158 (target_primary -> target_primary L_PARENTHESIS arguments R_PARENTHESIS .)
    L_SQB           reduce using rule 158 (target_primary -> target_primary L_PARENTHESIS arguments R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 158 (target_primary -> target_primary L_PARENTHESIS arguments R_PARENTHESIS .)
    R_SQB           reduce using rule 158 (target_primary -> target_primary L_PARENTHESIS arguments R_PARENTHESIS .)


state 234

    (156) target_primary -> target_primary L_SQB slices . R_SQB
    (111) slices -> slices . COMMA slice

    R_SQB           shift and go to state 259
    COMMA           shift and go to state 229


state 235

    (155) target_primary -> target_primary DOT IDENTIFIER .

    R_SQB           reduce using rule 155 (target_primary -> target_primary DOT IDENTIFIER .)
    DOT             reduce using rule 155 (target_primary -> target_primary DOT IDENTIFIER .)
    L_SQB           reduce using rule 155 (target_primary -> target_primary DOT IDENTIFIER .)
    L_PARENTHESIS   reduce using rule 155 (target_primary -> target_primary DOT IDENTIFIER .)


state 236

    (61) expression -> disjunction IF disjunction ELSE . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    disjunction                    shift and go to state 37
    expression                     shift and go to state 260
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 237

    (79) compare_op -> NOT IN bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    INEQUALITY      reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    GREATER_EQUAL   reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    LESSER_EQUAL    reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    GREATER         reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    LESSER          reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    NOT             reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    IS              reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    IN              reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    AND             reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    OR              reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    IF              reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    COMMA           reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    NEWLINE         reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    SEMICOLON       reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    ENDMARKER       reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    DEF             reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    CLASS           reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    FOR             reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    WHILE           reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    PASS            reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    BREAK           reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    CONTINUE        reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    RETURN          reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    DEL             reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    GLOBAL          reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    IDENTIFIER      reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    L_SQB           reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    L_PARENTHESIS   reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    PLUS            reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    MINUS           reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    TRUE            reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    FALSE           reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    NONE            reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    STRING          reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    TRIPLE_STRING   reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    NUMBER          reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    F_NUMBER        reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    BIN_NUMBER      reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    HEX_NUMBER      reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    OCT_NUMBER      reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    L_CB            reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    R_PARENTHESIS   reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    COLON           reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    ELIF            reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    ELSE            reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    DEDENT          reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    R_SQB           reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    R_CB            reduce using rule 79 (compare_op -> NOT IN bitwise_or .)
    PIPE            shift and go to state 119


state 238

    (80) compare_op -> IS NOT bitwise_or .
    (83) bitwise_or -> bitwise_or . PIPE bitwise_xor

    EQUALITY        reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    INEQUALITY      reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    GREATER_EQUAL   reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    LESSER_EQUAL    reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    GREATER         reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    LESSER          reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    NOT             reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    IS              reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    IN              reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    AND             reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    OR              reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    IF              reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    COMMA           reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    NEWLINE         reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    SEMICOLON       reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    ENDMARKER       reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    DEF             reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    CLASS           reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    FOR             reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    WHILE           reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    PASS            reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    BREAK           reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    CONTINUE        reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    RETURN          reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    DEL             reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    GLOBAL          reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    IDENTIFIER      reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    L_SQB           reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    L_PARENTHESIS   reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    PLUS            reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    MINUS           reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    TRUE            reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    FALSE           reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    NONE            reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    STRING          reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    TRIPLE_STRING   reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    NUMBER          reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    F_NUMBER        reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    BIN_NUMBER      reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    HEX_NUMBER      reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    OCT_NUMBER      reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    L_CB            reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    R_PARENTHESIS   reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    COLON           reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    ELIF            reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    ELSE            reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    DEDENT          reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    R_SQB           reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    R_CB            reduce using rule 80 (compare_op -> IS NOT bitwise_or .)
    PIPE            shift and go to state 119


state 239

    (105) primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    L_SQB           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    DOT             reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    STAR            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    SLASH           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    PERCENT         reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    PLUS            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    MINUS           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    L_SHIFT         reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    R_SHIFT         reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    AMPERSAND       reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    CARET           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    PIPE            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    EQUALITY        reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    INEQUALITY      reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    GREATER         reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    LESSER          reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    NOT             reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    IS              reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    IN              reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    AND             reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    OR              reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    IF              reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    COMMA           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    NEWLINE         reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    SEMICOLON       reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    ENDMARKER       reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    DEF             reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    CLASS           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    FOR             reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    WHILE           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    PASS            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    BREAK           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    CONTINUE        reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    RETURN          reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    DEL             reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    GLOBAL          reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    IDENTIFIER      reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    TRUE            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    FALSE           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    NONE            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    STRING          reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    TRIPLE_STRING   reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    NUMBER          reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    F_NUMBER        reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    BIN_NUMBER      reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    HEX_NUMBER      reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    OCT_NUMBER      reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    L_CB            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    COLON           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    ELIF            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    ELSE            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    DEDENT          reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    R_SQB           reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)
    R_CB            reduce using rule 105 (primary -> primary L_PARENTHESIS arguments R_PARENTHESIS .)


state 240

    (108) primary -> primary L_SQB slices R_SQB .

    DOUBLE_STAR     reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    L_PARENTHESIS   reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    L_SQB           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    DOT             reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    STAR            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    SLASH           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    DOUBLE_SLASH    reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    PERCENT         reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    PLUS            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    MINUS           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    L_SHIFT         reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    R_SHIFT         reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    AMPERSAND       reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    CARET           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    PIPE            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    EQUALITY        reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    INEQUALITY      reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    GREATER_EQUAL   reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    LESSER_EQUAL    reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    GREATER         reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    LESSER          reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    NOT             reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    IS              reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    IN              reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    AND             reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    OR              reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    IF              reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    COMMA           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    NEWLINE         reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    SEMICOLON       reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    ENDMARKER       reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    DEF             reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    CLASS           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    FOR             reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    WHILE           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    PASS            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    BREAK           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    CONTINUE        reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    RETURN          reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    DEL             reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    GLOBAL          reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    IDENTIFIER      reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    TRUE            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    FALSE           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    NONE            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    STRING          reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    TRIPLE_STRING   reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    NUMBER          reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    F_NUMBER        reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    BIN_NUMBER      reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    HEX_NUMBER      reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    OCT_NUMBER      reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    L_CB            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    R_PARENTHESIS   reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    COLON           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    ELIF            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    ELSE            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    DEDENT          reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    R_SQB           reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)
    R_CB            reduce using rule 108 (primary -> primary L_SQB slices R_SQB .)


state 241

    (146) kvpairs -> kvpair COMMA kvpairs .

    R_CB            reduce using rule 146 (kvpairs -> kvpair COMMA kvpairs .)


state 242

    (149) kvpair -> expression . COLON expression

    COLON           shift and go to state 212


state 243

    (149) kvpair -> expression COLON expression .

    COMMA           reduce using rule 149 (kvpair -> expression COLON expression .)
    R_CB            reduce using rule 149 (kvpair -> expression COLON expression .)


state 244

    (44) function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS . COLON block

    COLON           shift and go to state 261


state 245

    (46) parameters -> parameters COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 262


state 246

    (45) function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON . block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    block                          shift and go to state 263
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    expression                     shift and go to state 17
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 247

    (140) tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .

    DOUBLE_STAR     reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    L_SQB           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    DOT             reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    STAR            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    SLASH           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    DOUBLE_SLASH    reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    PERCENT         reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    PLUS            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    MINUS           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    L_SHIFT         reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    R_SHIFT         reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    AMPERSAND       reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    CARET           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    PIPE            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    EQUALITY        reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    INEQUALITY      reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    GREATER         reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    LESSER          reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    NOT             reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    IS              reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    IN              reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    AND             reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    OR              reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    IF              reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    COMMA           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    NEWLINE         reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    SEMICOLON       reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    ENDMARKER       reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    DEF             reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    CLASS           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    FOR             reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    WHILE           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    PASS            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    BREAK           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    CONTINUE        reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    RETURN          reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    DEL             reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    GLOBAL          reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    IDENTIFIER      reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    TRUE            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    FALSE           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    NONE            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    STRING          reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    TRIPLE_STRING   reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    NUMBER          reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    F_NUMBER        reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    BIN_NUMBER      reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    HEX_NUMBER      reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    OCT_NUMBER      reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    L_CB            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    COLON           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    ELIF            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    ELSE            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    DEDENT          reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    R_SQB           reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)
    R_CB            reduce using rule 140 (tuple -> L_PARENTHESIS expression COMMA expressions R_PARENTHESIS .)


state 248

    (48) if_stmt -> IF expression COLON block elif_stmt .

    ENDMARKER       reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    NEWLINE         reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    DEF             reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    IF              reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    CLASS           reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    FOR             reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    WHILE           reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    PASS            reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    BREAK           reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    CONTINUE        reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    RETURN          reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    DEL             reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    GLOBAL          reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    IDENTIFIER      reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    L_SQB           reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    L_PARENTHESIS   reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    NOT             reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    PLUS            reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    MINUS           reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    TRUE            reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    FALSE           reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    NONE            reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    STRING          reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    TRIPLE_STRING   reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    NUMBER          reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    F_NUMBER        reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    BIN_NUMBER      reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    HEX_NUMBER      reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    OCT_NUMBER      reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    L_CB            reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)
    DEDENT          reduce using rule 48 (if_stmt -> IF expression COLON block elif_stmt .)


state 249

    (49) if_stmt -> IF expression COLON block else_block .

    ENDMARKER       reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    NEWLINE         reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    DEF             reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    IF              reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    CLASS           reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    FOR             reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    WHILE           reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    PASS            reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    BREAK           reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    CONTINUE        reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    RETURN          reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    DEL             reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    GLOBAL          reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    IDENTIFIER      reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    L_SQB           reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    L_PARENTHESIS   reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    NOT             reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    PLUS            reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    MINUS           reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    TRUE            reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    FALSE           reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    NONE            reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    STRING          reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    TRIPLE_STRING   reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    NUMBER          reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    F_NUMBER        reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    BIN_NUMBER      reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    HEX_NUMBER      reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    OCT_NUMBER      reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    L_CB            reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)
    DEDENT          reduce using rule 49 (if_stmt -> IF expression COLON block else_block .)


state 250

    (51) elif_stmt -> ELIF . expression COLON block elif_stmt
    (52) elif_stmt -> ELIF . expression COLON block else_block
    (53) elif_stmt -> ELIF . expression COLON block
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 264
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 251

    (54) else_block -> ELSE . COLON block

    COLON           shift and go to state 265


state 252

    (39) block -> NEWLINE INDENT . statements DEDENT
    (3) statements -> . statements statement
    (4) statements -> . statements NEWLINE
    (5) statements -> . statement
    (6) statement -> . compound_stmt
    (7) statement -> . simple_stmts
    (19) compound_stmt -> . function_def
    (20) compound_stmt -> . if_stmt
    (21) compound_stmt -> . class_def
    (22) compound_stmt -> . for_stmt
    (23) compound_stmt -> . while_stmt
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (44) function_def -> . DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (45) function_def -> . DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (48) if_stmt -> . IF expression COLON block elif_stmt
    (49) if_stmt -> . IF expression COLON block else_block
    (50) if_stmt -> . IF expression COLON block
    (41) class_def -> . CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (42) class_def -> . CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (43) class_def -> . CLASS IDENTIFIER COLON block
    (57) for_stmt -> . FOR targets IN expressions COLON else_block
    (58) for_stmt -> . FOR targets IN expressions COLON block
    (55) while_stmt -> . WHILE expression COLON block else_block
    (56) while_stmt -> . WHILE expression COLON block
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    DEF             shift and go to state 13
    IF              shift and go to state 16
    CLASS           shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 22
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    statements                     shift and go to state 266
    statement                      shift and go to state 4
    compound_stmt                  shift and go to state 5
    simple_stmts                   shift and go to state 6
    function_def                   shift and go to state 7
    if_stmt                        shift and go to state 8
    class_def                      shift and go to state 9
    for_stmt                       shift and go to state 10
    while_stmt                     shift and go to state 11
    simple_stmt                    shift and go to state 12
    expression                     shift and go to state 17
    targets                        shift and go to state 20
    expressions                    shift and go to state 21
    assignment                     shift and go to state 23
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    target                         shift and go to state 30
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 253

    (41) class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS . COLON block

    COLON           shift and go to state 267


state 254

    (42) class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON . block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    block                          shift and go to state 268
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    expression                     shift and go to state 17
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 255

    (57) for_stmt -> FOR targets IN expressions COLON . else_block
    (58) for_stmt -> FOR targets IN expressions COLON . block
    (54) else_block -> . ELSE COLON block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    ELSE            shift and go to state 251
    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    targets                        shift and go to state 20
    expressions                    shift and go to state 21
    else_block                     shift and go to state 269
    block                          shift and go to state 270
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    target                         shift and go to state 30
    expression                     shift and go to state 17
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 256

    (55) while_stmt -> WHILE expression COLON block else_block .

    ENDMARKER       reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    NEWLINE         reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    DEF             reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    IF              reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    CLASS           reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    FOR             reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    WHILE           reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    PASS            reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    BREAK           reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    CONTINUE        reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    RETURN          reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    DEL             reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    GLOBAL          reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    IDENTIFIER      reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    L_SQB           reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    L_PARENTHESIS   reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    NOT             reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    PLUS            reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    MINUS           reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    TRUE            reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    FALSE           reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    NONE            reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    STRING          reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    TRIPLE_STRING   reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    NUMBER          reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    F_NUMBER        reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    BIN_NUMBER      reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    HEX_NUMBER      reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    OCT_NUMBER      reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    L_CB            reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)
    DEDENT          reduce using rule 55 (while_stmt -> WHILE expression COLON block else_block .)


state 257

    (111) slices -> slices COMMA slice .

    R_SQB           reduce using rule 111 (slices -> slices COMMA slice .)
    COMMA           reduce using rule 111 (slices -> slices COMMA slice .)


state 258

    (113) slice -> expression COLON expression . COLON expression
    (114) slice -> expression COLON expression .

    COLON           shift and go to state 271
    R_SQB           reduce using rule 114 (slice -> expression COLON expression .)
    COMMA           reduce using rule 114 (slice -> expression COLON expression .)


state 259

    (156) target_primary -> target_primary L_SQB slices R_SQB .

    R_SQB           reduce using rule 156 (target_primary -> target_primary L_SQB slices R_SQB .)
    DOT             reduce using rule 156 (target_primary -> target_primary L_SQB slices R_SQB .)
    L_SQB           reduce using rule 156 (target_primary -> target_primary L_SQB slices R_SQB .)
    L_PARENTHESIS   reduce using rule 156 (target_primary -> target_primary L_SQB slices R_SQB .)


state 260

    (61) expression -> disjunction IF disjunction ELSE expression .

    COMMA           reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    NEWLINE         reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    SEMICOLON       reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    ENDMARKER       reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    DEF             reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    IF              reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    CLASS           reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    FOR             reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    WHILE           reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    PASS            reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    BREAK           reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    CONTINUE        reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    RETURN          reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    DEL             reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    GLOBAL          reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    IDENTIFIER      reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    L_SQB           reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    L_PARENTHESIS   reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    NOT             reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    PLUS            reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    MINUS           reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    TRUE            reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    FALSE           reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    NONE            reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    STRING          reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    TRIPLE_STRING   reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    NUMBER          reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    F_NUMBER        reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    BIN_NUMBER      reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    HEX_NUMBER      reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    OCT_NUMBER      reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    L_CB            reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    R_PARENTHESIS   reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    COLON           reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    ELIF            reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    ELSE            reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    DEDENT          reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    R_SQB           reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)
    R_CB            reduce using rule 61 (expression -> disjunction IF disjunction ELSE expression .)


state 261

    (44) function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON . block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    block                          shift and go to state 272
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    expression                     shift and go to state 17
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 262

    (46) parameters -> parameters COMMA IDENTIFIER .

    R_PARENTHESIS   reduce using rule 46 (parameters -> parameters COMMA IDENTIFIER .)
    COMMA           reduce using rule 46 (parameters -> parameters COMMA IDENTIFIER .)


state 263

    (45) function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .

    ENDMARKER       reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NEWLINE         reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEF             reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    IF              reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    CLASS           reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    FOR             reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    WHILE           reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    PASS            reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    BREAK           reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    CONTINUE        reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    RETURN          reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEL             reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    GLOBAL          reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    IDENTIFIER      reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_SQB           reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_PARENTHESIS   reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NOT             reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    PLUS            reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    MINUS           reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    TRUE            reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    FALSE           reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NONE            reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    STRING          reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    TRIPLE_STRING   reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NUMBER          reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    F_NUMBER        reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    BIN_NUMBER      reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    HEX_NUMBER      reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    OCT_NUMBER      reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_CB            reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEDENT          reduce using rule 45 (function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)


state 264

    (51) elif_stmt -> ELIF expression . COLON block elif_stmt
    (52) elif_stmt -> ELIF expression . COLON block else_block
    (53) elif_stmt -> ELIF expression . COLON block

    COLON           shift and go to state 273


state 265

    (54) else_block -> ELSE COLON . block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    block                          shift and go to state 274
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    expression                     shift and go to state 17
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 266

    (39) block -> NEWLINE INDENT statements . DEDENT
    (3) statements -> statements . statement
    (4) statements -> statements . NEWLINE
    (6) statement -> . compound_stmt
    (7) statement -> . simple_stmts
    (19) compound_stmt -> . function_def
    (20) compound_stmt -> . if_stmt
    (21) compound_stmt -> . class_def
    (22) compound_stmt -> . for_stmt
    (23) compound_stmt -> . while_stmt
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (44) function_def -> . DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block
    (45) function_def -> . DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (48) if_stmt -> . IF expression COLON block elif_stmt
    (49) if_stmt -> . IF expression COLON block else_block
    (50) if_stmt -> . IF expression COLON block
    (41) class_def -> . CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block
    (42) class_def -> . CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block
    (43) class_def -> . CLASS IDENTIFIER COLON block
    (57) for_stmt -> . FOR targets IN expressions COLON else_block
    (58) for_stmt -> . FOR targets IN expressions COLON block
    (55) while_stmt -> . WHILE expression COLON block else_block
    (56) while_stmt -> . WHILE expression COLON block
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    DEDENT          shift and go to state 275
    NEWLINE         shift and go to state 73
    DEF             shift and go to state 13
    IF              shift and go to state 16
    CLASS           shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 22
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    statement                      shift and go to state 72
    compound_stmt                  shift and go to state 5
    simple_stmts                   shift and go to state 6
    function_def                   shift and go to state 7
    if_stmt                        shift and go to state 8
    class_def                      shift and go to state 9
    for_stmt                       shift and go to state 10
    while_stmt                     shift and go to state 11
    simple_stmt                    shift and go to state 12
    expression                     shift and go to state 17
    targets                        shift and go to state 20
    expressions                    shift and go to state 21
    assignment                     shift and go to state 23
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    target                         shift and go to state 30
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 267

    (41) class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON . block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    block                          shift and go to state 276
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    expression                     shift and go to state 17
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 268

    (42) class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .

    ENDMARKER       reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NEWLINE         reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEF             reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    IF              reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    CLASS           reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    FOR             reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    WHILE           reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    PASS            reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    BREAK           reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    CONTINUE        reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    RETURN          reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEL             reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    GLOBAL          reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    IDENTIFIER      reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_SQB           reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_PARENTHESIS   reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NOT             reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    PLUS            reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    MINUS           reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    TRUE            reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    FALSE           reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NONE            reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    STRING          reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    TRIPLE_STRING   reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    NUMBER          reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    F_NUMBER        reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    BIN_NUMBER      reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    HEX_NUMBER      reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    OCT_NUMBER      reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    L_CB            reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)
    DEDENT          reduce using rule 42 (class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block .)


state 269

    (57) for_stmt -> FOR targets IN expressions COLON else_block .

    ENDMARKER       reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    NEWLINE         reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    DEF             reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    IF              reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    CLASS           reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    FOR             reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    WHILE           reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    PASS            reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    BREAK           reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    CONTINUE        reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    RETURN          reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    DEL             reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    GLOBAL          reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    IDENTIFIER      reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    L_SQB           reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    L_PARENTHESIS   reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    NOT             reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    PLUS            reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    MINUS           reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    TRUE            reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    FALSE           reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    NONE            reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    STRING          reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    TRIPLE_STRING   reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    NUMBER          reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    F_NUMBER        reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    BIN_NUMBER      reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    HEX_NUMBER      reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    OCT_NUMBER      reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    L_CB            reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)
    DEDENT          reduce using rule 57 (for_stmt -> FOR targets IN expressions COLON else_block .)


state 270

    (58) for_stmt -> FOR targets IN expressions COLON block .

    ENDMARKER       reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    NEWLINE         reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    DEF             reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    IF              reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    CLASS           reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    FOR             reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    WHILE           reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    PASS            reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    BREAK           reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    CONTINUE        reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    RETURN          reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    DEL             reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    GLOBAL          reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    IDENTIFIER      reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    L_SQB           reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    L_PARENTHESIS   reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    NOT             reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    PLUS            reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    MINUS           reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    TRUE            reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    FALSE           reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    NONE            reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    STRING          reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    TRIPLE_STRING   reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    NUMBER          reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    F_NUMBER        reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    BIN_NUMBER      reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    HEX_NUMBER      reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    OCT_NUMBER      reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    L_CB            reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)
    DEDENT          reduce using rule 58 (for_stmt -> FOR targets IN expressions COLON block .)


state 271

    (113) slice -> expression COLON expression COLON . expression
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    L_PARENTHESIS   shift and go to state 82
    IDENTIFIER      shift and go to state 84
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_SQB           shift and go to state 83
    L_CB            shift and go to state 70

    expression                     shift and go to state 277
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 272

    (44) function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .

    ENDMARKER       reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    NEWLINE         reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    DEF             reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    IF              reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    CLASS           reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    FOR             reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    WHILE           reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    PASS            reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    BREAK           reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    CONTINUE        reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    RETURN          reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    DEL             reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    GLOBAL          reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    IDENTIFIER      reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    L_SQB           reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    L_PARENTHESIS   reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    NOT             reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    PLUS            reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    MINUS           reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    TRUE            reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    FALSE           reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    NONE            reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    STRING          reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    TRIPLE_STRING   reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    NUMBER          reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    F_NUMBER        reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    BIN_NUMBER      reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    HEX_NUMBER      reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    OCT_NUMBER      reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    L_CB            reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)
    DEDENT          reduce using rule 44 (function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block .)


state 273

    (51) elif_stmt -> ELIF expression COLON . block elif_stmt
    (52) elif_stmt -> ELIF expression COLON . block else_block
    (53) elif_stmt -> ELIF expression COLON . block
    (39) block -> . NEWLINE INDENT statements DEDENT
    (40) block -> . simple_stmts
    (8) simple_stmts -> . simple_stmts SEMICOLON simple_stmt NEWLINE
    (9) simple_stmts -> . simple_stmt NEWLINE
    (10) simple_stmts -> . simple_stmt
    (11) simple_stmt -> . assignment
    (12) simple_stmt -> . expressions
    (13) simple_stmt -> . return_stmt
    (14) simple_stmt -> . PASS
    (15) simple_stmt -> . del_stmt
    (16) simple_stmt -> . BREAK
    (17) simple_stmt -> . CONTINUE
    (18) simple_stmt -> . global_stmt
    (24) assignment -> . targets augmentation_assignment expressions
    (25) assignment -> . targets ASSIGNMENT assignment
    (26) assignment -> . target ASSIGNMENT expressions
    (59) expressions -> . expressions COMMA expression
    (60) expressions -> . expression
    (34) return_stmt -> . RETURN expressions
    (36) del_stmt -> . DEL namelist
    (35) global_stmt -> . GLOBAL namelist
    (150) targets -> . targets COMMA target
    (151) targets -> . target
    (152) target -> . target_primary DOT IDENTIFIER
    (153) target -> . target_primary L_SQB slices R_SQB
    (154) target -> . target_atomic
    (61) expression -> . disjunction IF disjunction ELSE expression
    (62) expression -> . disjunction
    (155) target_primary -> . target_primary DOT IDENTIFIER
    (156) target_primary -> . target_primary L_SQB slices R_SQB
    (157) target_primary -> . target_primary L_PARENTHESIS R_PARENTHESIS
    (158) target_primary -> . target_primary L_PARENTHESIS arguments R_PARENTHESIS
    (159) target_primary -> . target_atomic
    (160) target_atomic -> . IDENTIFIER
    (161) target_atomic -> . L_SQB target_primary R_SQB
    (162) target_atomic -> . L_PARENTHESIS targets R_PARENTHESIS
    (63) disjunction -> . conjunction OR disjunction
    (64) disjunction -> . conjunction
    (65) conjunction -> . inversion AND inversion
    (66) conjunction -> . inversion
    (67) inversion -> . NOT inversion
    (68) inversion -> . comparison
    (69) comparison -> . bitwise_or compare_op_list
    (70) comparison -> . bitwise_or
    (83) bitwise_or -> . bitwise_or PIPE bitwise_xor
    (84) bitwise_or -> . bitwise_xor
    (85) bitwise_xor -> . bitwise_xor CARET bitwise_and
    (86) bitwise_xor -> . bitwise_and
    (87) bitwise_and -> . bitwise_and AMPERSAND shift_expr
    (88) bitwise_and -> . shift_expr
    (89) shift_expr -> . shift_expr L_SHIFT sum
    (90) shift_expr -> . shift_expr R_SHIFT sum
    (91) shift_expr -> . sum
    (92) sum -> . sum PLUS term
    (93) sum -> . sum MINUS term
    (94) sum -> . term
    (95) term -> . term STAR factor
    (96) term -> . term SLASH factor
    (97) term -> . term DOUBLE_SLASH factor
    (98) term -> . term PERCENT factor
    (99) term -> . factor
    (100) factor -> . PLUS factor
    (101) factor -> . MINUS factor
    (102) factor -> . power
    (103) power -> . primary DOUBLE_STAR factor
    (104) power -> . primary
    (105) primary -> . primary L_PARENTHESIS arguments R_PARENTHESIS
    (106) primary -> . L_PARENTHESIS expression R_PARENTHESIS
    (107) primary -> . primary L_PARENTHESIS R_PARENTHESIS
    (108) primary -> . primary L_SQB slices R_SQB
    (109) primary -> . primary DOT IDENTIFIER
    (110) primary -> . atomic
    (120) atomic -> . IDENTIFIER
    (121) atomic -> . TRUE
    (122) atomic -> . FALSE
    (123) atomic -> . NONE
    (124) atomic -> . strings
    (125) atomic -> . number
    (126) atomic -> . tuple
    (127) atomic -> . list
    (128) atomic -> . dict
    (129) atomic -> . set
    (136) strings -> . STRING
    (137) strings -> . TRIPLE_STRING
    (130) number -> . NUMBER
    (131) number -> . F_NUMBER
    (132) number -> . BIN_NUMBER
    (133) number -> . HEX_NUMBER
    (134) number -> . OCT_NUMBER
    (140) tuple -> . L_PARENTHESIS expression COMMA expressions R_PARENTHESIS
    (141) tuple -> . L_PARENTHESIS expression COMMA R_PARENTHESIS
    (142) tuple -> . L_PARENTHESIS R_PARENTHESIS
    (138) list -> . L_SQB expressions R_SQB
    (139) list -> . L_SQB R_SQB
    (144) dict -> . L_CB kvpairs R_CB
    (145) dict -> . L_CB R_CB
    (143) set -> . L_CB expressions R_CB

    NEWLINE         shift and go to state 220
    PASS            shift and go to state 25
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 31
    DEL             shift and go to state 32
    GLOBAL          shift and go to state 33
    IDENTIFIER      shift and go to state 14
    L_SQB           shift and go to state 35
    L_PARENTHESIS   shift and go to state 15
    NOT             shift and go to state 40
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    NONE            shift and go to state 56
    STRING          shift and go to state 63
    TRIPLE_STRING   shift and go to state 64
    NUMBER          shift and go to state 65
    F_NUMBER        shift and go to state 66
    BIN_NUMBER      shift and go to state 67
    HEX_NUMBER      shift and go to state 68
    OCT_NUMBER      shift and go to state 69
    L_CB            shift and go to state 70

    expression                     shift and go to state 17
    block                          shift and go to state 278
    simple_stmts                   shift and go to state 221
    simple_stmt                    shift and go to state 12
    assignment                     shift and go to state 23
    expressions                    shift and go to state 21
    return_stmt                    shift and go to state 24
    del_stmt                       shift and go to state 26
    global_stmt                    shift and go to state 29
    targets                        shift and go to state 20
    target                         shift and go to state 30
    target_primary                 shift and go to state 34
    target_atomic                  shift and go to state 36
    disjunction                    shift and go to state 37
    conjunction                    shift and go to state 38
    inversion                      shift and go to state 39
    comparison                     shift and go to state 41
    bitwise_or                     shift and go to state 42
    bitwise_xor                    shift and go to state 43
    bitwise_and                    shift and go to state 44
    shift_expr                     shift and go to state 45
    sum                            shift and go to state 46
    term                           shift and go to state 48
    factor                         shift and go to state 50
    power                          shift and go to state 51
    primary                        shift and go to state 52
    atomic                         shift and go to state 53
    strings                        shift and go to state 57
    number                         shift and go to state 58
    tuple                          shift and go to state 59
    list                           shift and go to state 60
    dict                           shift and go to state 61
    set                            shift and go to state 62

state 274

    (54) else_block -> ELSE COLON block .

    ENDMARKER       reduce using rule 54 (else_block -> ELSE COLON block .)
    NEWLINE         reduce using rule 54 (else_block -> ELSE COLON block .)
    DEF             reduce using rule 54 (else_block -> ELSE COLON block .)
    IF              reduce using rule 54 (else_block -> ELSE COLON block .)
    CLASS           reduce using rule 54 (else_block -> ELSE COLON block .)
    FOR             reduce using rule 54 (else_block -> ELSE COLON block .)
    WHILE           reduce using rule 54 (else_block -> ELSE COLON block .)
    PASS            reduce using rule 54 (else_block -> ELSE COLON block .)
    BREAK           reduce using rule 54 (else_block -> ELSE COLON block .)
    CONTINUE        reduce using rule 54 (else_block -> ELSE COLON block .)
    RETURN          reduce using rule 54 (else_block -> ELSE COLON block .)
    DEL             reduce using rule 54 (else_block -> ELSE COLON block .)
    GLOBAL          reduce using rule 54 (else_block -> ELSE COLON block .)
    IDENTIFIER      reduce using rule 54 (else_block -> ELSE COLON block .)
    L_SQB           reduce using rule 54 (else_block -> ELSE COLON block .)
    L_PARENTHESIS   reduce using rule 54 (else_block -> ELSE COLON block .)
    NOT             reduce using rule 54 (else_block -> ELSE COLON block .)
    PLUS            reduce using rule 54 (else_block -> ELSE COLON block .)
    MINUS           reduce using rule 54 (else_block -> ELSE COLON block .)
    TRUE            reduce using rule 54 (else_block -> ELSE COLON block .)
    FALSE           reduce using rule 54 (else_block -> ELSE COLON block .)
    NONE            reduce using rule 54 (else_block -> ELSE COLON block .)
    STRING          reduce using rule 54 (else_block -> ELSE COLON block .)
    TRIPLE_STRING   reduce using rule 54 (else_block -> ELSE COLON block .)
    NUMBER          reduce using rule 54 (else_block -> ELSE COLON block .)
    F_NUMBER        reduce using rule 54 (else_block -> ELSE COLON block .)
    BIN_NUMBER      reduce using rule 54 (else_block -> ELSE COLON block .)
    HEX_NUMBER      reduce using rule 54 (else_block -> ELSE COLON block .)
    OCT_NUMBER      reduce using rule 54 (else_block -> ELSE COLON block .)
    L_CB            reduce using rule 54 (else_block -> ELSE COLON block .)
    DEDENT          reduce using rule 54 (else_block -> ELSE COLON block .)


state 275

    (39) block -> NEWLINE INDENT statements DEDENT .

    ELIF            reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    ELSE            reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    ENDMARKER       reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    NEWLINE         reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    DEF             reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    IF              reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    CLASS           reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    FOR             reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    WHILE           reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    PASS            reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    BREAK           reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    CONTINUE        reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    RETURN          reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    DEL             reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    GLOBAL          reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    IDENTIFIER      reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    L_SQB           reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    L_PARENTHESIS   reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    NOT             reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    PLUS            reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    MINUS           reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    TRUE            reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    FALSE           reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    NONE            reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    STRING          reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    TRIPLE_STRING   reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    NUMBER          reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    F_NUMBER        reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    BIN_NUMBER      reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    HEX_NUMBER      reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    OCT_NUMBER      reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    L_CB            reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)
    DEDENT          reduce using rule 39 (block -> NEWLINE INDENT statements DEDENT .)


state 276

    (41) class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .

    ENDMARKER       reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    NEWLINE         reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    DEF             reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    IF              reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    CLASS           reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    FOR             reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    WHILE           reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    PASS            reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    BREAK           reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    CONTINUE        reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    RETURN          reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    DEL             reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    GLOBAL          reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    IDENTIFIER      reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    L_SQB           reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    L_PARENTHESIS   reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    NOT             reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    PLUS            reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    MINUS           reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    TRUE            reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    FALSE           reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    NONE            reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    STRING          reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    TRIPLE_STRING   reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    NUMBER          reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    F_NUMBER        reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    BIN_NUMBER      reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    HEX_NUMBER      reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    OCT_NUMBER      reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    L_CB            reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)
    DEDENT          reduce using rule 41 (class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block .)


state 277

    (113) slice -> expression COLON expression COLON expression .

    R_SQB           reduce using rule 113 (slice -> expression COLON expression COLON expression .)
    COMMA           reduce using rule 113 (slice -> expression COLON expression COLON expression .)


state 278

    (51) elif_stmt -> ELIF expression COLON block . elif_stmt
    (52) elif_stmt -> ELIF expression COLON block . else_block
    (53) elif_stmt -> ELIF expression COLON block .
    (51) elif_stmt -> . ELIF expression COLON block elif_stmt
    (52) elif_stmt -> . ELIF expression COLON block else_block
    (53) elif_stmt -> . ELIF expression COLON block
    (54) else_block -> . ELSE COLON block

    ENDMARKER       reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    NEWLINE         reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    DEF             reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    IF              reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    CLASS           reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    FOR             reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    WHILE           reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    PASS            reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    BREAK           reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    CONTINUE        reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    RETURN          reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    DEL             reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    GLOBAL          reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    IDENTIFIER      reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    L_SQB           reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    L_PARENTHESIS   reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    NOT             reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    PLUS            reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    MINUS           reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    TRUE            reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    FALSE           reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    NONE            reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    STRING          reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    TRIPLE_STRING   reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    NUMBER          reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    F_NUMBER        reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    BIN_NUMBER      reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    HEX_NUMBER      reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    OCT_NUMBER      reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    L_CB            reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    DEDENT          reduce using rule 53 (elif_stmt -> ELIF expression COLON block .)
    ELIF            shift and go to state 250
    ELSE            shift and go to state 251

    elif_stmt                      shift and go to state 279
    else_block                     shift and go to state 280

state 279

    (51) elif_stmt -> ELIF expression COLON block elif_stmt .

    ENDMARKER       reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    NEWLINE         reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    DEF             reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    IF              reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    CLASS           reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    FOR             reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    WHILE           reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    PASS            reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    BREAK           reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    CONTINUE        reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    RETURN          reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    DEL             reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    GLOBAL          reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    IDENTIFIER      reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    L_SQB           reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    L_PARENTHESIS   reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    NOT             reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    PLUS            reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    MINUS           reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    TRUE            reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    FALSE           reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    NONE            reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    STRING          reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    TRIPLE_STRING   reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    NUMBER          reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    F_NUMBER        reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    BIN_NUMBER      reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    HEX_NUMBER      reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    OCT_NUMBER      reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    L_CB            reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)
    DEDENT          reduce using rule 51 (elif_stmt -> ELIF expression COLON block elif_stmt .)


state 280

    (52) elif_stmt -> ELIF expression COLON block else_block .

    ENDMARKER       reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    NEWLINE         reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    DEF             reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    IF              reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    CLASS           reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    FOR             reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    WHILE           reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    PASS            reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    BREAK           reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    CONTINUE        reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    RETURN          reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    DEL             reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    GLOBAL          reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    IDENTIFIER      reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    L_SQB           reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    L_PARENTHESIS   reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    NOT             reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    PLUS            reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    MINUS           reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    TRUE            reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    FALSE           reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    NONE            reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    STRING          reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    TRIPLE_STRING   reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    NUMBER          reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    F_NUMBER        reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    BIN_NUMBER      reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    HEX_NUMBER      reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    OCT_NUMBER      reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    L_CB            reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)
    DEDENT          reduce using rule 52 (elif_stmt -> ELIF expression COLON block else_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 12 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMENT in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 37 resolved as shift
WARNING: shift/reduce conflict for NOT in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for L_PARENTHESIS in state 52 resolved as shift
WARNING: shift/reduce conflict for L_SQB in state 52 resolved as shift
WARNING: shift/reduce conflict for NOT in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 196 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 196 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 197 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 197 resolved as shift
WARNING: reduce/reduce conflict in state 14 resolved using rule (atomic -> IDENTIFIER)
WARNING: rejected rule (target_atomic -> IDENTIFIER) in state 14
