
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "file_inputAND AS ASSIGNMENT AT BIN_NUMBER BITWISE_AND BITWISE_OR BREAK CLASS COLON COMMA CONTINUE DEDENT DEF DEL DIVISION DIVISION_ASSIGNMENT DOT ELIF ELSE ENDMARKER EQUALITY EXPONENTIATION EXPONENTIATION_ASSIGNMENT FALSE FOR F_NUMBER GLOBAL GREATER GREATER_EQUAL HEX_NUMBER IDENTIFIER IF IN INDENT INEQUALITY INTEGER_DIVISION INTEGER_DIVISION_ASSIGNMENT IS LESSER LESSER_EQUAL L_CB L_PARENTHESIS L_SHIFT L_SQB MODULUS MODULUS_ASSIGNMENT NEWLINE NONE NOT NUMBER OCT_NUMBER OR PASS PRODUCT PRODUCT_ASSIGNMENT RETURN R_CB R_PARENTHESIS R_SHIFT R_SQB STRING SUBTRACTION SUBTRACTION_ASSIGNMENT SUM SUM_ASSIGNMENT TRIPLE_STRING TRUE WHILE WHITESPACEfile_input : stmt_list ENDMARKER\n    stmt_list : stmt_list stmt\n                 | empty\n    stmt : simple_stmt\n            | expr_stmt\n            | func_call_stmt\n    simple_stmt : NEWLINE\n    expr_stmt : expr\n    func_call_stmt : function_call\n    expr : STRING\n            | NUMBER\n    function_call : IDENTIFIER L_PARENTHESIS arg_list R_PARENTHESIS\n    arg_list : expr\n                | expr ',' arg_list\n                | empty\n    empty :"
    
_lr_action_items = {'ENDMARKER':([0,2,3,5,6,7,8,9,10,11,12,13,19,],[-16,4,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'NEWLINE':([0,2,3,5,6,7,8,9,10,11,12,13,19,],[-16,9,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'STRING':([0,2,3,5,6,7,8,9,10,11,12,13,15,19,20,],[-16,12,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,12,-12,12,]),'NUMBER':([0,2,3,5,6,7,8,9,10,11,12,13,15,19,20,],[-16,13,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,13,-12,13,]),'IDENTIFIER':([0,2,3,5,6,7,8,9,10,11,12,13,19,],[-16,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'$end':([1,4,],[0,-1,]),',':([12,13,17,],[-10,-11,20,]),'R_PARENTHESIS':([12,13,15,16,17,18,20,21,],[-10,-11,-16,19,-13,-15,-16,-14,]),'L_PARENTHESIS':([14,],[15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file_input':([0,],[1,]),'stmt_list':([0,],[2,]),'empty':([0,15,20,],[3,18,18,]),'stmt':([2,],[5,]),'simple_stmt':([2,],[6,]),'expr_stmt':([2,],[7,]),'func_call_stmt':([2,],[8,]),'expr':([2,15,20,],[10,17,17,]),'function_call':([2,],[11,]),'arg_list':([15,20,],[16,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file_input","S'",1,None,None,None),
  ('file_input -> stmt_list ENDMARKER','file_input',2,'p_file_input','Parser.py',7),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','Parser.py',12),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','Parser.py',13),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','Parser.py',18),
  ('stmt -> expr_stmt','stmt',1,'p_stmt','Parser.py',19),
  ('stmt -> func_call_stmt','stmt',1,'p_stmt','Parser.py',20),
  ('simple_stmt -> NEWLINE','simple_stmt',1,'p_simple_stmt','Parser.py',25),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','Parser.py',30),
  ('func_call_stmt -> function_call','func_call_stmt',1,'p_func_call_stmt','Parser.py',35),
  ('expr -> STRING','expr',1,'p_expr','Parser.py',40),
  ('expr -> NUMBER','expr',1,'p_expr','Parser.py',41),
  ('function_call -> IDENTIFIER L_PARENTHESIS arg_list R_PARENTHESIS','function_call',4,'p_function_call','Parser.py',46),
  ('arg_list -> expr','arg_list',1,'p_arg_list','Parser.py',51),
  ('arg_list -> expr , arg_list','arg_list',3,'p_arg_list','Parser.py',52),
  ('arg_list -> empty','arg_list',1,'p_arg_list','Parser.py',53),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',58),
]
