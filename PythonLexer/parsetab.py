
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'fileAND AS ASSIGNMENT BIN_NUMBER BITWISE_AND BITWISE_OR BITWISE_XOR BREAK CLASS COLON COMMA CONTINUE DEDENT DEF DEL DIVISION DIVISION_ASSIGNMENT DOT ELIF ELSE ENDMARKER EQUALITY EXPONENTIATION EXPONENTIATION_ASSIGNMENT FALSE FOR F_NUMBER GLOBAL GREATER GREATER_EQUAL HEX_NUMBER IDENTIFIER IF IN INDENT INEQUALITY INTEGER_DIVISION INTEGER_DIVISION_ASSIGNMENT IS LESSER LESSER_EQUAL L_CB L_PARENTHESIS L_SHIFT L_SQB MODULUS MODULUS_ASSIGNMENT NEWLINE NONE NOT NUMBER OCT_NUMBER OR PASS PRODUCT PRODUCT_ASSIGNMENT RETURN R_CB R_PARENTHESIS R_SHIFT R_SQB SEMICOLON STRING SUBTRACTION SUBTRACTION_ASSIGNMENT SUM SUM_ASSIGNMENT TRIPLE_STRING TRUE WHILE WHITESPACEfile : statements ENDMARKER\n    statements : statements statement\n                  | statement\n    statement : compound_stmt\n                 | simple_stmts\n    simple_stmts : simple_stmts SEMICOLON simple_stmt\n                    | simple_stmt NEWLINE\n    simple_stmt : assignment\n                   | return_stmt\n                   | PASS\n                   | del_stmt\n                   | BREAK \n                   | CONTINUE \n                   | global_stmt\n    compound_stmt : function_def\n                     | if_stmt\n                     | class_def\n                     | for_stmt\n                     | while_stmt\n    assignment : IDENTIFIER augmentation_assignment expressions\n    augmentation_assignment : ASSIGNMENT\n                               | SUM_ASSIGNMENT\n                               | SUBTRACTION_ASSIGNMENT\n                               | PRODUCT_ASSIGNMENT\n                               | DIVISION_ASSIGNMENT\n                               | MODULUS_ASSIGNMENT\n                               | EXPONENTIATION_ASSIGNMENT\n                               | INTEGER_DIVISION_ASSIGNMENT\n    return_stmt : RETURN expressions\n    global_stmt : GLOBAL namelist\n    del_stmt : DEL namelist\n    namelist : namelist COMMA IDENTIFIER\n                | IDENTIFIER\n    block : NEWLINE INDENT statements DEDENT\n             | simple_stmts\n    class_def : CLASS IDENTIFIER COLON block\n                 | CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block\n                 | CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block   \n    function_def : DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block\n                    | DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block\n    parameters : parameters COMMA IDENTIFIER\n                  | IDENTIFIER\n    if_stmt : IF expression COLON block elif_stmt\n               | IF expression COLON block else_block\n               | IF expression COLON block\n    elif_stmt : ELIF expression COLON block elif_stmt\n                 | ELIF expression COLON block else_block\n                 | ELIF expression COLON block\n    else_block : ELSE COLON block\n    while_stmt : WHILE expression COLON block else_block\n                  | WHILE expression COLON block\n    for_stmt : FOR targets IN expressions COLON else_block\n                | FOR targets IN expressions COLON block\n    expressions : expressions COMMA expression\n                   | expression\n    expression : disjunction\n                  | disjunction IF disjunction ELSE expression\n    disjunction : conjunction \n                   | conjunction OR disjunction\n    conjunction : inversion \n                   | inversion AND inversion\n    inversion : NOT inversion \n                 | comparison\n    comparison : bitwise_or \n                  | bitwise_or compare_op_list\n    compare_op_list : compare_op \n                       | compare_op_list compare_op\n    compare_op : EQUALITY bitwise_or \n                  | INEQUALITY bitwise_or \n                  | GREATER_EQUAL bitwise_or \n                  | LESSER_EQUAL bitwise_or \n                  | GREATER bitwise_or \n                  | LESSER bitwise_or \n                  | NOT IN bitwise_or \n                  | IS NOT bitwise_or \n                  | IN bitwise_or \n                  | IS bitwise_or \n    bitwise_or : bitwise_or BITWISE_OR bitwise_xor \n                  | bitwise_xor \n    bitwise_xor : bitwise_xor BITWISE_XOR bitwise_and \n                   | bitwise_and\n    bitwise_and : bitwise_and BITWISE_AND shift_expr \n                   | shift_expr\n    shift_expr : shift_expr L_SHIFT sum\n                  | shift_expr R_SHIFT sum\n                  | sum\n    sum : sum SUM term\n           | sum SUBTRACTION term\n           | term\n    term : term PRODUCT factor \n            | term DIVISION factor \n            | term INTEGER_DIVISION factor \n            | term MODULUS factor\n            | factor\n    factor : SUM factor \n              | SUBTRACTION factor \n              | power\n    power : primary EXPONENTIATION target\n             | primary\n    primary : primary DOT IDENTIFIER\n               | primary L_PARENTHESIS arguments R_PARENTHESIS\n               | primary L_SQB slices R_SQB\n               | atomic\n    slices : slice\n              | COMMA L_PARENTHESIS slice R_PARENTHESIS slices\n    slice : expression\n    atomic : IDENTIFIER\n              | TRUE\n              | FALSE\n              | NONE\n              | strings\n              | NUMBER\n              | F_NUMBER\n    arguments :\n    strings : STRING\n               | TRIPLE_STRING\n    targets : target\n               | target COMMA targets\n    target : empty\n    empty :'
    
_lr_action_items = {'DEF':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,171,172,175,177,178,179,180,185,188,191,192,194,196,197,198,200,201,203,204,206,207,],[12,12,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,-43,-44,12,-74,-75,-101,-102,-50,-40,12,-57,-37,-52,-53,-39,-49,-34,-38,-48,-46,-47,]),'IF':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,171,172,175,177,178,179,180,185,188,191,192,194,196,197,198,200,201,203,204,206,207,],[14,14,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,-7,83,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,-43,-44,14,-74,-75,-101,-102,-50,-40,14,-57,-37,-52,-53,-39,-49,-34,-38,-48,-46,-47,]),'CLASS':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,171,172,175,177,178,179,180,185,188,191,192,194,196,197,198,200,201,203,204,206,207,],[15,15,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,-43,-44,15,-74,-75,-101,-102,-50,-40,15,-57,-37,-52,-53,-39,-49,-34,-38,-48,-46,-47,]),'FOR':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,171,172,175,177,178,179,180,185,188,191,192,194,196,197,198,200,201,203,204,206,207,],[16,16,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,-43,-44,16,-74,-75,-101,-102,-50,-40,16,-57,-37,-52,-53,-39,-49,-34,-38,-48,-46,-47,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,171,172,175,177,178,179,180,185,188,191,192,194,196,197,198,200,201,203,204,206,207,],[17,17,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,-43,-44,17,-74,-75,-101,-102,-50,-40,17,-57,-37,-52,-53,-39,-49,-34,-38,-48,-46,-47,]),'PASS':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,30,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,82,86,87,89,105,110,111,115,119,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,170,171,172,175,177,178,179,180,182,184,185,186,188,190,191,192,194,195,196,197,198,199,200,201,203,204,206,207,],[20,20,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,20,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,20,-62,-65,-66,-95,-96,-120,20,20,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,20,-43,-44,20,-74,-75,-101,-102,20,20,-50,20,-40,20,20,-57,-37,20,-52,-53,-39,20,-49,-34,-38,-48,-46,-47,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,30,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,82,86,87,89,105,110,111,115,119,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,170,171,172,175,177,178,179,180,182,184,185,186,188,190,191,192,194,195,196,197,198,199,200,201,203,204,206,207,],[22,22,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,22,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,22,-62,-65,-66,-95,-96,-120,22,22,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,22,-43,-44,22,-74,-75,-101,-102,22,22,-50,22,-40,22,22,-57,-37,22,-52,-53,-39,22,-49,-34,-38,-48,-46,-47,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,30,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,82,86,87,89,105,110,111,115,119,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,170,171,172,175,177,178,179,180,182,184,185,186,188,190,191,192,194,195,196,197,198,199,200,201,203,204,206,207,],[23,23,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,23,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,23,-62,-65,-66,-95,-96,-120,23,23,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,23,-43,-44,23,-74,-75,-101,-102,23,23,-50,23,-40,23,23,-57,-37,23,-52,-53,-39,23,-49,-34,-38,-48,-46,-47,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,12,14,15,17,18,19,20,21,22,23,24,25,26,27,29,30,31,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,117,119,120,121,125,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,169,170,171,172,173,175,176,177,178,179,180,181,182,184,185,186,188,190,191,192,194,195,196,197,198,199,200,201,202,203,204,206,207,],[13,13,-3,-4,-5,-15,-16,-17,-18,-19,32,59,69,59,-8,-9,-10,-11,-12,-13,-14,59,77,77,-2,13,-7,59,-21,-22,-23,-24,-25,-26,-27,-28,-56,-58,-60,59,-63,-64,-79,-81,-83,-86,59,-89,59,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,122,-20,13,59,59,59,-62,-65,59,-66,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-95,59,59,59,59,-96,-120,154,59,13,59,13,59,167,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,59,-76,59,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,187,13,-43,-44,59,13,59,-74,-75,-101,-102,59,13,13,-50,13,-40,13,13,-57,-37,13,-52,-53,-39,13,-49,-34,59,-38,-48,-46,-47,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,30,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,82,86,87,89,105,110,111,115,119,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,170,171,172,175,177,178,179,180,182,184,185,186,188,190,191,192,194,195,196,197,198,199,200,201,203,204,206,207,],[25,25,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,25,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,25,-62,-65,-66,-95,-96,-120,25,25,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,25,-43,-44,25,-74,-75,-101,-102,25,25,-50,25,-40,25,25,-57,-37,25,-52,-53,-39,25,-49,-34,-38,-48,-46,-47,]),'DEL':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,30,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,82,86,87,89,105,110,111,115,119,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,170,171,172,175,177,178,179,180,182,184,185,186,188,190,191,192,194,195,196,197,198,199,200,201,203,204,206,207,],[26,26,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,26,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,26,-62,-65,-66,-95,-96,-120,26,26,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,26,-43,-44,26,-74,-75,-101,-102,26,26,-50,26,-40,26,26,-57,-37,26,-52,-53,-39,26,-49,-34,-38,-48,-46,-47,]),'GLOBAL':([0,2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,30,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,82,86,87,89,105,110,111,115,119,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,170,171,172,175,177,178,179,180,182,184,185,186,188,190,191,192,194,195,196,197,198,199,200,201,203,204,206,207,],[27,27,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,27,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,27,-62,-65,-66,-95,-96,-120,27,27,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,27,-43,-44,27,-74,-75,-101,-102,27,27,-50,27,-40,27,27,-57,-37,27,-52,-53,-39,27,-49,-34,-38,-48,-46,-47,]),'$end':([1,28,],[0,-1,]),'ENDMARKER':([2,3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,171,172,177,178,179,180,185,188,192,194,196,197,198,200,201,203,204,206,207,],[28,-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,-43,-44,-74,-75,-101,-102,-50,-40,-57,-37,-52,-53,-39,-49,-34,-38,-48,-46,-47,]),'DEDENT':([3,4,5,6,7,8,9,10,18,19,20,21,22,23,24,29,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,160,165,166,167,171,172,177,178,179,180,185,188,191,192,194,196,197,198,200,201,203,204,206,207,],[-3,-4,-5,-15,-16,-17,-18,-19,-8,-9,-10,-11,-12,-13,-14,-2,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,-45,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-36,-51,-54,-32,-43,-44,-74,-75,-101,-102,-50,-40,201,-57,-37,-52,-53,-39,-49,-34,-38,-48,-46,-47,]),'SEMICOLON':([5,18,19,20,21,22,23,24,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,166,167,177,178,179,180,192,],[30,-8,-9,-10,-11,-12,-13,-14,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,30,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-54,-32,-74,-75,-101,-102,-57,]),'NEWLINE':([11,18,19,20,21,22,23,24,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,81,82,86,87,89,105,110,111,115,119,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,166,167,170,177,178,179,180,182,184,186,190,192,195,199,],[31,-8,-9,-10,-11,-12,-13,-14,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-20,126,-62,-65,-66,-95,-96,-120,126,126,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-54,-32,126,-74,-75,-101,-102,126,126,126,126,-57,126,126,]),'ASSIGNMENT':([13,],[34,]),'SUM_ASSIGNMENT':([13,],[35,]),'SUBTRACTION_ASSIGNMENT':([13,],[36,]),'PRODUCT_ASSIGNMENT':([13,],[37,]),'DIVISION_ASSIGNMENT':([13,],[38,]),'MODULUS_ASSIGNMENT':([13,],[39,]),'EXPONENTIATION_ASSIGNMENT':([13,],[40,]),'INTEGER_DIVISION_ASSIGNMENT':([13,],[41,]),'NOT':([14,17,25,33,34,35,36,37,38,39,40,41,46,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,83,84,85,87,89,98,105,110,111,114,117,120,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,173,176,177,178,179,180,181,202,],[46,46,46,46,-21,-22,-23,-24,-25,-26,-27,-28,46,96,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,46,46,46,96,-66,141,-95,-96,-120,46,46,46,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,46,46,-74,-75,-101,-102,46,46,]),'SUM':([14,17,25,33,34,35,36,37,38,39,40,41,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,117,120,139,141,145,146,147,148,149,150,151,152,153,154,173,176,179,180,181,202,],[53,53,53,53,-21,-22,-23,-24,-25,-26,-27,-28,53,103,53,-89,53,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-95,53,53,53,53,-96,-120,53,53,53,53,53,103,103,-87,-88,-90,-91,-92,-93,-98,-100,53,53,-101,-102,53,53,]),'SUBTRACTION':([14,17,25,33,34,35,36,37,38,39,40,41,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,117,120,139,141,145,146,147,148,149,150,151,152,153,154,173,176,179,180,181,202,],[55,55,55,55,-21,-22,-23,-24,-25,-26,-27,-28,55,104,55,-89,55,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-95,55,55,55,55,-96,-120,55,55,55,55,55,104,104,-87,-88,-90,-91,-92,-93,-98,-100,55,55,-101,-102,55,55,]),'TRUE':([14,17,25,33,34,35,36,37,38,39,40,41,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[61,61,61,61,-21,-22,-23,-24,-25,-26,-27,-28,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'FALSE':([14,17,25,33,34,35,36,37,38,39,40,41,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[62,62,62,62,-21,-22,-23,-24,-25,-26,-27,-28,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'NONE':([14,17,25,33,34,35,36,37,38,39,40,41,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[63,63,63,63,-21,-22,-23,-24,-25,-26,-27,-28,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'NUMBER':([14,17,25,33,34,35,36,37,38,39,40,41,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[65,65,65,65,-21,-22,-23,-24,-25,-26,-27,-28,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'F_NUMBER':([14,17,25,33,34,35,36,37,38,39,40,41,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[66,66,66,66,-21,-22,-23,-24,-25,-26,-27,-28,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'STRING':([14,17,25,33,34,35,36,37,38,39,40,41,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[67,67,67,67,-21,-22,-23,-24,-25,-26,-27,-28,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'TRIPLE_STRING':([14,17,25,33,34,35,36,37,38,39,40,41,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[68,68,68,68,-21,-22,-23,-24,-25,-26,-27,-28,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'COMMA':([16,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,74,75,76,77,78,81,86,87,89,105,110,111,114,118,122,123,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,163,166,167,177,178,179,180,187,192,202,],[-120,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,118,-119,120,-55,121,-33,121,120,-62,-65,-66,-95,-96,-120,158,-120,-42,169,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,120,-54,-32,-74,-75,-101,-102,-41,-57,158,]),'IN':([16,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,87,89,96,105,110,111,118,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,164,177,178,179,180,],[-120,97,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,117,-117,-119,97,-66,139,-95,-96,-120,-120,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-118,-74,-75,-101,-102,]),'ELIF':([18,19,20,21,22,23,24,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,125,127,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,166,167,177,178,179,180,192,201,204,],[-8,-9,-10,-11,-12,-13,-14,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,173,-35,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-54,-32,-74,-75,-101,-102,-57,-34,173,]),'ELSE':([18,19,20,21,22,23,24,31,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,77,78,79,81,86,87,89,105,110,111,125,127,128,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,165,166,167,177,178,179,180,184,192,201,204,],[-8,-9,-10,-11,-12,-13,-14,-7,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-29,-55,-31,-33,-30,-6,-20,-62,-65,-66,-95,-96,-120,174,-35,176,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,174,-54,-32,-74,-75,-101,-102,174,-57,-34,174,]),'L_PARENTHESIS':([32,58,59,60,61,62,63,64,65,66,67,68,69,154,158,179,180,],[80,113,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,116,-100,181,-101,-102,]),'COLON':([42,43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,75,86,87,89,105,110,111,124,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,161,163,166,168,174,177,178,179,180,183,189,192,],[82,-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,115,-119,119,-55,-62,-65,-66,-95,-96,-120,170,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,182,184,-54,186,190,-74,-75,-101,-102,195,199,-57,]),'R_SQB':([43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,86,87,89,105,110,111,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,159,177,178,179,180,192,205,],[-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-62,-65,-66,-95,-96,-120,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,180,-104,-106,-74,-75,-101,-102,-57,-105,]),'R_PARENTHESIS':([43,44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,80,86,87,89,105,110,111,113,116,122,123,129,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,159,162,177,178,179,180,187,192,193,],[-56,-58,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,124,-62,-65,-66,-95,-96,-120,-114,161,-42,168,-59,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,179,-106,183,-74,-75,-101,-102,-41,-57,202,]),'OR':([44,45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,86,87,89,105,110,111,130,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[84,-60,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-62,-65,-66,-95,-96,-120,-61,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-74,-75,-101,-102,]),'AND':([45,47,48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,86,87,89,105,110,111,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[85,-63,-64,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-62,-65,-66,-95,-96,-120,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-74,-75,-101,-102,]),'BITWISE_OR':([48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,110,111,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[88,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-95,-96,-120,-78,88,88,88,88,88,88,88,88,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,88,88,-101,-102,]),'EQUALITY':([48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,87,89,105,110,111,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[90,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,90,-66,-95,-96,-120,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-74,-75,-101,-102,]),'INEQUALITY':([48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,87,89,105,110,111,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[91,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,91,-66,-95,-96,-120,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-74,-75,-101,-102,]),'GREATER_EQUAL':([48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,87,89,105,110,111,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[92,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,92,-66,-95,-96,-120,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-74,-75,-101,-102,]),'LESSER_EQUAL':([48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,87,89,105,110,111,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[93,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,93,-66,-95,-96,-120,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-74,-75,-101,-102,]),'GREATER':([48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,87,89,105,110,111,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[94,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,94,-66,-95,-96,-120,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-74,-75,-101,-102,]),'LESSER':([48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,87,89,105,110,111,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[95,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,95,-66,-95,-96,-120,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-74,-75,-101,-102,]),'IS':([48,49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,87,89,105,110,111,131,132,133,134,135,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,154,177,178,179,180,],[98,-79,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,98,-66,-95,-96,-120,-67,-78,-68,-69,-70,-71,-72,-73,-76,-77,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-74,-75,-101,-102,]),'BITWISE_XOR':([49,50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,110,111,132,143,144,145,146,147,148,149,150,151,152,153,154,179,180,],[99,-81,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-95,-96,-120,99,-80,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-101,-102,]),'BITWISE_AND':([50,51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,110,111,143,144,145,146,147,148,149,150,151,152,153,154,179,180,],[100,-83,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-95,-96,-120,100,-82,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-101,-102,]),'L_SHIFT':([51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,110,111,144,145,146,147,148,149,150,151,152,153,154,179,180,],[101,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-95,-96,-120,101,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-101,-102,]),'R_SHIFT':([51,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,110,111,144,145,146,147,148,149,150,151,152,153,154,179,180,],[102,-86,-89,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-95,-96,-120,102,-84,-85,-87,-88,-90,-91,-92,-93,-98,-100,-101,-102,]),'PRODUCT':([54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,110,111,147,148,149,150,151,152,153,154,179,180,],[106,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-95,-96,-120,106,106,-90,-91,-92,-93,-98,-100,-101,-102,]),'DIVISION':([54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,110,111,147,148,149,150,151,152,153,154,179,180,],[107,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-95,-96,-120,107,107,-90,-91,-92,-93,-98,-100,-101,-102,]),'INTEGER_DIVISION':([54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,110,111,147,148,149,150,151,152,153,154,179,180,],[108,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-95,-96,-120,108,108,-90,-91,-92,-93,-98,-100,-101,-102,]),'MODULUS':([54,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,110,111,147,148,149,150,151,152,153,154,179,180,],[109,-94,-97,-99,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-119,-95,-96,-120,109,109,-90,-91,-92,-93,-98,-100,-101,-102,]),'EXPONENTIATION':([58,59,60,61,62,63,64,65,66,67,68,154,179,180,],[111,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-100,-101,-102,]),'DOT':([58,59,60,61,62,63,64,65,66,67,68,154,179,180,],[112,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-100,-101,-102,]),'L_SQB':([58,59,60,61,62,63,64,65,66,67,68,154,179,180,],[114,-107,-103,-108,-109,-110,-111,-112,-113,-115,-116,-100,-101,-102,]),'INDENT':([126,],[175,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'statements':([0,175,],[2,191,]),'statement':([0,2,175,191,],[3,29,3,29,]),'compound_stmt':([0,2,175,191,],[4,4,4,4,]),'simple_stmts':([0,2,82,115,119,170,175,182,184,186,190,191,195,199,],[5,5,127,127,127,127,5,127,127,127,127,5,127,127,]),'function_def':([0,2,175,191,],[6,6,6,6,]),'if_stmt':([0,2,175,191,],[7,7,7,7,]),'class_def':([0,2,175,191,],[8,8,8,8,]),'for_stmt':([0,2,175,191,],[9,9,9,9,]),'while_stmt':([0,2,175,191,],[10,10,10,10,]),'simple_stmt':([0,2,30,82,115,119,170,175,182,184,186,190,191,195,199,],[11,11,79,11,11,11,11,11,11,11,11,11,11,11,11,]),'assignment':([0,2,30,82,115,119,170,175,182,184,186,190,191,195,199,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'return_stmt':([0,2,30,82,115,119,170,175,182,184,186,190,191,195,199,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'del_stmt':([0,2,30,82,115,119,170,175,182,184,186,190,191,195,199,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'global_stmt':([0,2,30,82,115,119,170,175,182,184,186,190,191,195,199,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'augmentation_assignment':([13,],[33,]),'expression':([14,17,25,33,114,117,120,173,176,181,202,],[42,73,75,75,159,75,166,189,192,159,159,]),'disjunction':([14,17,25,33,83,84,114,117,120,173,176,181,202,],[43,43,43,43,128,129,43,43,43,43,43,43,43,]),'conjunction':([14,17,25,33,83,84,114,117,120,173,176,181,202,],[44,44,44,44,44,44,44,44,44,44,44,44,44,]),'inversion':([14,17,25,33,46,83,84,85,114,117,120,173,176,181,202,],[45,45,45,45,86,45,45,130,45,45,45,45,45,45,45,]),'comparison':([14,17,25,33,46,83,84,85,114,117,120,173,176,181,202,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'bitwise_or':([14,17,25,33,46,83,84,85,90,91,92,93,94,95,97,98,114,117,120,139,141,173,176,181,202,],[48,48,48,48,48,48,48,48,133,134,135,136,137,138,140,142,48,48,48,177,178,48,48,48,48,]),'bitwise_xor':([14,17,25,33,46,83,84,85,88,90,91,92,93,94,95,97,98,114,117,120,139,141,173,176,181,202,],[49,49,49,49,49,49,49,49,132,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'bitwise_and':([14,17,25,33,46,83,84,85,88,90,91,92,93,94,95,97,98,99,114,117,120,139,141,173,176,181,202,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,143,50,50,50,50,50,50,50,50,50,]),'shift_expr':([14,17,25,33,46,83,84,85,88,90,91,92,93,94,95,97,98,99,100,114,117,120,139,141,173,176,181,202,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,144,51,51,51,51,51,51,51,51,51,]),'sum':([14,17,25,33,46,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,114,117,120,139,141,173,176,181,202,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,145,146,52,52,52,52,52,52,52,52,52,]),'term':([14,17,25,33,46,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,114,117,120,139,141,173,176,181,202,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,147,148,54,54,54,54,54,54,54,54,54,]),'factor':([14,17,25,33,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[56,56,56,56,56,105,110,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,149,150,151,152,56,56,56,56,56,56,56,56,56,]),'power':([14,17,25,33,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'primary':([14,17,25,33,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'atomic':([14,17,25,33,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'strings':([14,17,25,33,46,53,55,83,84,85,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,114,117,120,139,141,173,176,181,202,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'targets':([16,118,],[70,164,]),'target':([16,111,118,],[71,153,71,]),'empty':([16,111,118,],[72,72,72,]),'expressions':([25,33,117,],[74,81,163,]),'namelist':([26,27,],[76,78,]),'compare_op_list':([48,],[87,]),'compare_op':([48,87,],[89,131,]),'parameters':([80,],[123,]),'block':([82,115,119,170,182,184,186,190,195,199,],[125,160,165,188,194,197,198,200,203,204,]),'arguments':([113,116,],[155,162,]),'slices':([114,202,],[156,205,]),'slice':([114,181,202,],[157,193,157,]),'elif_stmt':([125,204,],[171,206,]),'else_block':([125,165,184,204,],[172,185,196,207,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> statements ENDMARKER','file',2,'p_file','Parser.py',67),
  ('statements -> statements statement','statements',2,'p_statements','Parser.py',75),
  ('statements -> statement','statements',1,'p_statements','Parser.py',76),
  ('statement -> compound_stmt','statement',1,'p_statement','Parser.py',81),
  ('statement -> simple_stmts','statement',1,'p_statement','Parser.py',82),
  ('simple_stmts -> simple_stmts SEMICOLON simple_stmt','simple_stmts',3,'p_simple_stmts','Parser.py',90),
  ('simple_stmts -> simple_stmt NEWLINE','simple_stmts',2,'p_simple_stmts','Parser.py',91),
  ('simple_stmt -> assignment','simple_stmt',1,'p_simple_stmt','Parser.py',97),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','Parser.py',98),
  ('simple_stmt -> PASS','simple_stmt',1,'p_simple_stmt','Parser.py',99),
  ('simple_stmt -> del_stmt','simple_stmt',1,'p_simple_stmt','Parser.py',100),
  ('simple_stmt -> BREAK','simple_stmt',1,'p_simple_stmt','Parser.py',101),
  ('simple_stmt -> CONTINUE','simple_stmt',1,'p_simple_stmt','Parser.py',102),
  ('simple_stmt -> global_stmt','simple_stmt',1,'p_simple_stmt','Parser.py',103),
  ('compound_stmt -> function_def','compound_stmt',1,'p_compound_stmt','Parser.py',107),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','Parser.py',108),
  ('compound_stmt -> class_def','compound_stmt',1,'p_compound_stmt','Parser.py',109),
  ('compound_stmt -> for_stmt','compound_stmt',1,'p_compound_stmt','Parser.py',110),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','Parser.py',111),
  ('assignment -> IDENTIFIER augmentation_assignment expressions','assignment',3,'p_assignment','Parser.py',119),
  ('augmentation_assignment -> ASSIGNMENT','augmentation_assignment',1,'p_augmentation_assignment','Parser.py',124),
  ('augmentation_assignment -> SUM_ASSIGNMENT','augmentation_assignment',1,'p_augmentation_assignment','Parser.py',125),
  ('augmentation_assignment -> SUBTRACTION_ASSIGNMENT','augmentation_assignment',1,'p_augmentation_assignment','Parser.py',126),
  ('augmentation_assignment -> PRODUCT_ASSIGNMENT','augmentation_assignment',1,'p_augmentation_assignment','Parser.py',127),
  ('augmentation_assignment -> DIVISION_ASSIGNMENT','augmentation_assignment',1,'p_augmentation_assignment','Parser.py',128),
  ('augmentation_assignment -> MODULUS_ASSIGNMENT','augmentation_assignment',1,'p_augmentation_assignment','Parser.py',129),
  ('augmentation_assignment -> EXPONENTIATION_ASSIGNMENT','augmentation_assignment',1,'p_augmentation_assignment','Parser.py',130),
  ('augmentation_assignment -> INTEGER_DIVISION_ASSIGNMENT','augmentation_assignment',1,'p_augmentation_assignment','Parser.py',131),
  ('return_stmt -> RETURN expressions','return_stmt',2,'p_return_stmt','Parser.py',137),
  ('global_stmt -> GLOBAL namelist','global_stmt',2,'p_global_stmt','Parser.py',141),
  ('del_stmt -> DEL namelist','del_stmt',2,'p_del_stmt','Parser.py',145),
  ('namelist -> namelist COMMA IDENTIFIER','namelist',3,'p_namelist','Parser.py',149),
  ('namelist -> IDENTIFIER','namelist',1,'p_namelist','Parser.py',150),
  ('block -> NEWLINE INDENT statements DEDENT','block',4,'p_block','Parser.py',160),
  ('block -> simple_stmts','block',1,'p_block','Parser.py',161),
  ('class_def -> CLASS IDENTIFIER COLON block','class_def',4,'p_class_def','Parser.py',168),
  ('class_def -> CLASS IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block','class_def',6,'p_class_def','Parser.py',169),
  ('class_def -> CLASS IDENTIFIER L_PARENTHESIS arguments R_PARENTHESIS COLON block','class_def',7,'p_class_def','Parser.py',170),
  ('function_def -> DEF IDENTIFIER L_PARENTHESIS parameters R_PARENTHESIS COLON block','function_def',7,'p_function_def','Parser.py',174),
  ('function_def -> DEF IDENTIFIER L_PARENTHESIS R_PARENTHESIS COLON block','function_def',6,'p_function_def','Parser.py',175),
  ('parameters -> parameters COMMA IDENTIFIER','parameters',3,'p_parameters','Parser.py',187),
  ('parameters -> IDENTIFIER','parameters',1,'p_parameters','Parser.py',188),
  ('if_stmt -> IF expression COLON block elif_stmt','if_stmt',5,'p_if_stmt','Parser.py',193),
  ('if_stmt -> IF expression COLON block else_block','if_stmt',5,'p_if_stmt','Parser.py',194),
  ('if_stmt -> IF expression COLON block','if_stmt',4,'p_if_stmt','Parser.py',195),
  ('elif_stmt -> ELIF expression COLON block elif_stmt','elif_stmt',5,'p_elif_stmt','Parser.py',201),
  ('elif_stmt -> ELIF expression COLON block else_block','elif_stmt',5,'p_elif_stmt','Parser.py',202),
  ('elif_stmt -> ELIF expression COLON block','elif_stmt',4,'p_elif_stmt','Parser.py',203),
  ('else_block -> ELSE COLON block','else_block',3,'p_else_block','Parser.py',207),
  ('while_stmt -> WHILE expression COLON block else_block','while_stmt',5,'p_while_stmt','Parser.py',213),
  ('while_stmt -> WHILE expression COLON block','while_stmt',4,'p_while_stmt','Parser.py',214),
  ('for_stmt -> FOR targets IN expressions COLON else_block','for_stmt',6,'p_for_stmt','Parser.py',221),
  ('for_stmt -> FOR targets IN expressions COLON block','for_stmt',6,'p_for_stmt','Parser.py',222),
  ('expressions -> expressions COMMA expression','expressions',3,'p_expressions','Parser.py',229),
  ('expressions -> expression','expressions',1,'p_expressions','Parser.py',230),
  ('expression -> disjunction','expression',1,'p_expression','Parser.py',234),
  ('expression -> disjunction IF disjunction ELSE expression','expression',5,'p_expression','Parser.py',235),
  ('disjunction -> conjunction','disjunction',1,'p_disjunction','Parser.py',240),
  ('disjunction -> conjunction OR disjunction','disjunction',3,'p_disjunction','Parser.py',241),
  ('conjunction -> inversion','conjunction',1,'p_conjunction','Parser.py',246),
  ('conjunction -> inversion AND inversion','conjunction',3,'p_conjunction','Parser.py',247),
  ('inversion -> NOT inversion','inversion',2,'p_inversion','Parser.py',251),
  ('inversion -> comparison','inversion',1,'p_inversion','Parser.py',252),
  ('comparison -> bitwise_or','comparison',1,'p_comparison','Parser.py',259),
  ('comparison -> bitwise_or compare_op_list','comparison',2,'p_comparison','Parser.py',260),
  ('compare_op_list -> compare_op','compare_op_list',1,'p_compare_op_list','Parser.py',264),
  ('compare_op_list -> compare_op_list compare_op','compare_op_list',2,'p_compare_op_list','Parser.py',265),
  ('compare_op -> EQUALITY bitwise_or','compare_op',2,'p_compare_op','Parser.py',270),
  ('compare_op -> INEQUALITY bitwise_or','compare_op',2,'p_compare_op','Parser.py',271),
  ('compare_op -> GREATER_EQUAL bitwise_or','compare_op',2,'p_compare_op','Parser.py',272),
  ('compare_op -> LESSER_EQUAL bitwise_or','compare_op',2,'p_compare_op','Parser.py',273),
  ('compare_op -> GREATER bitwise_or','compare_op',2,'p_compare_op','Parser.py',274),
  ('compare_op -> LESSER bitwise_or','compare_op',2,'p_compare_op','Parser.py',275),
  ('compare_op -> NOT IN bitwise_or','compare_op',3,'p_compare_op','Parser.py',276),
  ('compare_op -> IS NOT bitwise_or','compare_op',3,'p_compare_op','Parser.py',277),
  ('compare_op -> IN bitwise_or','compare_op',2,'p_compare_op','Parser.py',278),
  ('compare_op -> IS bitwise_or','compare_op',2,'p_compare_op','Parser.py',279),
  ('bitwise_or -> bitwise_or BITWISE_OR bitwise_xor','bitwise_or',3,'p_bitwise_or','Parser.py',286),
  ('bitwise_or -> bitwise_xor','bitwise_or',1,'p_bitwise_or','Parser.py',287),
  ('bitwise_xor -> bitwise_xor BITWISE_XOR bitwise_and','bitwise_xor',3,'p_bitwise_xor','Parser.py',292),
  ('bitwise_xor -> bitwise_and','bitwise_xor',1,'p_bitwise_xor','Parser.py',293),
  ('bitwise_and -> bitwise_and BITWISE_AND shift_expr','bitwise_and',3,'p_bitwise_and','Parser.py',297),
  ('bitwise_and -> shift_expr','bitwise_and',1,'p_bitwise_and','Parser.py',298),
  ('shift_expr -> shift_expr L_SHIFT sum','shift_expr',3,'p_shift_expr','Parser.py',302),
  ('shift_expr -> shift_expr R_SHIFT sum','shift_expr',3,'p_shift_expr','Parser.py',303),
  ('shift_expr -> sum','shift_expr',1,'p_shift_expr','Parser.py',304),
  ('sum -> sum SUM term','sum',3,'p_sum','Parser.py',311),
  ('sum -> sum SUBTRACTION term','sum',3,'p_sum','Parser.py',312),
  ('sum -> term','sum',1,'p_sum','Parser.py',313),
  ('term -> term PRODUCT factor','term',3,'p_term','Parser.py',318),
  ('term -> term DIVISION factor','term',3,'p_term','Parser.py',319),
  ('term -> term INTEGER_DIVISION factor','term',3,'p_term','Parser.py',320),
  ('term -> term MODULUS factor','term',3,'p_term','Parser.py',321),
  ('term -> factor','term',1,'p_term','Parser.py',322),
  ('factor -> SUM factor','factor',2,'p_factor','Parser.py',327),
  ('factor -> SUBTRACTION factor','factor',2,'p_factor','Parser.py',328),
  ('factor -> power','factor',1,'p_factor','Parser.py',329),
  ('power -> primary EXPONENTIATION target','power',3,'p_power','Parser.py',333),
  ('power -> primary','power',1,'p_power','Parser.py',334),
  ('primary -> primary DOT IDENTIFIER','primary',3,'p_primary','Parser.py',347),
  ('primary -> primary L_PARENTHESIS arguments R_PARENTHESIS','primary',4,'p_primary','Parser.py',348),
  ('primary -> primary L_SQB slices R_SQB','primary',4,'p_primary','Parser.py',349),
  ('primary -> atomic','primary',1,'p_primary','Parser.py',350),
  ('slices -> slice','slices',1,'p_slices','Parser.py',359),
  ('slices -> COMMA L_PARENTHESIS slice R_PARENTHESIS slices','slices',5,'p_slices','Parser.py',360),
  ('slice -> expression','slice',1,'p_slice','Parser.py',368),
  ('atomic -> IDENTIFIER','atomic',1,'p_atomic','Parser.py',374),
  ('atomic -> TRUE','atomic',1,'p_atomic','Parser.py',375),
  ('atomic -> FALSE','atomic',1,'p_atomic','Parser.py',376),
  ('atomic -> NONE','atomic',1,'p_atomic','Parser.py',377),
  ('atomic -> strings','atomic',1,'p_atomic','Parser.py',378),
  ('atomic -> NUMBER','atomic',1,'p_atomic','Parser.py',379),
  ('atomic -> F_NUMBER','atomic',1,'p_atomic','Parser.py',380),
  ('arguments -> <empty>','arguments',0,'p_arguments','Parser.py',388),
  ('strings -> STRING','strings',1,'p_strings','Parser.py',395),
  ('strings -> TRIPLE_STRING','strings',1,'p_strings','Parser.py',396),
  ('targets -> target','targets',1,'p_targets','Parser.py',403),
  ('targets -> target COMMA targets','targets',3,'p_targets','Parser.py',404),
  ('target -> empty','target',1,'p_target','Parser.py',408),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',414),
]
